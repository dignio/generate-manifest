{"version":3,"file":"index.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpbpiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACplLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnxPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnzVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACljrptthIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjpxl7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACppEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzrjDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwGA;AACA;;;;;;;;;;;;ACzpLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtrbfA;AACA;AACA;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9BA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvQA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClpRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnllDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACztHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACllnqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxhhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzhnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACnsources":["../webpack://generate-manifest/./node_modules/@actions/core/lib/command.js","../webpack://generate-manifest/./node_modules/@actions/core/lib/core.js","../webpack://generate-manifest/./node_modules/@actions/core/lib/file-command.js","../webpack://generate-manifest/./node_modules/@actions/core/lib/oidc-utils.js","../webpack://generate-manifest/./node_modules/@actions/core/lib/summary.js","../webpack://generate-manifest/./node_modules/@actions/core/lib/utils.js","../webpack://generate-manifest/./node_modules/@actions/http-client/lib/auth.js","../webpack://generate-manifest/./node_modules/@actions/http-client/lib/index.js","../webpack://generate-manifest/./node_modules/@actions/http-client/lib/proxy.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/_action.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/api-resource.generated.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/base.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/config-map.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/container.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/daemon-set.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/deployment.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/handler.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/imports/k8s.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/index.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/ingress.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/job.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/namespace.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/network-policy.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/pod.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/probe.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/pv.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/pvc.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/role-binding.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/role.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/secret.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/service-account.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/service.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/stateful-set.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/utils.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/volume.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/lib/workload.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/node_modules/balanced-match/index.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/node_modules/brace-expansion/index.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/node_modules/concat-map/index.js","../webpack://generate-manifest/./node_modules/cdk8s-plus-22/node_modules/minimatch/minimatch.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/_child_process.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/_resolve.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/_util.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/api-object.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/app.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/chart.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/dependency.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/duration.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/helm.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/include.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/index.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/json-patch.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/lazy.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/metadata.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/names.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/size.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/testing.js","../webpack://generate-manifest/./node_modules/cdk8s/lib/yaml.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/fast-json-patch/lib/core.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/fast-json-patch/lib/duplex.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/fast-json-patch/lib/helpers.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/fast-json-patch/node_modules/fast-deep-equal/index.js","../webpack://generate-manifest/./node_modules/constructs/lib/construct.js","../webpack://generate-manifest/./node_modules/constructs/lib/dependency.js","../webpack://generate-manifest/./node_modules/constructs/lib/index.js","../webpack://generate-manifest/./node_modules/constructs/lib/metadata.js","../webpack://generate-manifest/./node_modules/constructs/lib/private/stack-trace.js","../webpack://generate-manifest/./node_modules/constructs/lib/private/uniqueid.js","../webpack://generate-manifest/./node_modules/tunnel/index.js","../webpack://generate-manifest/./node_modules/tunnel/lib/tunnel.js","../webpack://generate-manifest/external node-commonjs \"assert\"","../webpack://generate-manifest/external node-commonjs \"child_process\"","../webpack://generate-manifest/external node-commonjs \"crypto\"","../webpack://generate-manifest/external node-commonjs \"events\"","../webpack://generate-manifest/external node-commonjs \"fs\"","../webpack://generate-manifest/external node-commonjs \"http\"","../webpack://generate-manifest/external node-commonjs \"https\"","../webpack://generate-manifest/external node-commonjs \"net\"","../webpack://generate-manifest/external node-commonjs \"os\"","../webpack://generate-manifest/external node-commonjs \"path\"","../webpack://generate-manifest/external node-commonjs \"tls\"","../webpack://generate-manifest/external node-commonjs \"util\"","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/compose-collection.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/compose-doc.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/compose-node.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/compose-scalar.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/composer.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/resolve-block-map.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/resolve-block-scalar.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/resolve-block-seq.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/resolve-end.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/resolve-flow-collection.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/resolve-flow-scalar.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/resolve-props.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/util-contains-newline.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/util-empty-scalar-position.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/compose/util-map-includes.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/doc/Document.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/doc/anchors.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/doc/applyReviver.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/doc/createNode.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/doc/directives.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/errors.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/index.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/log.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/nodes/Alias.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/nodes/Collection.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/nodes/Node.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/nodes/Pair.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/nodes/Scalar.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/nodes/YAMLMap.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/nodes/YAMLSeq.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/nodes/addPairToJSMap.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/nodes/toJS.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/options.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/parse/cst-scalar.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/parse/cst-stringify.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/parse/cst-visit.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/parse/cst.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/parse/lexer.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/parse/line-counter.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/parse/parser.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/public-api.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/Schema.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/common/map.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/common/null.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/common/seq.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/common/string.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/core/bool.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/core/float.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/core/int.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/core/schema.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/json/schema.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/tags.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/yaml-1.1/binary.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/yaml-1.1/bool.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/yaml-1.1/float.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/yaml-1.1/int.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/yaml-1.1/omap.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/yaml-1.1/pairs.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/yaml-1.1/schema.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/yaml-1.1/set.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/schema/yaml-1.1/timestamp.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/stringify/foldFlowLines.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/stringify/stringify.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/stringify/stringifyCollection.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/stringify/stringifyComment.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/stringify/stringifyDocument.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/stringify/stringifyNumber.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/stringify/stringifyPair.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/stringify/stringifyString.js","../webpack://generate-manifest/./node_modules/cdk8s/node_modules/yaml/dist/visit.js","../webpack://generate-manifest/webpack/bootstrap","../webpack://generate-manifest/webpack/runtime/compat","../webpack://generate-manifest/./imports/external-secrets.js","../webpack://generate-manifest/./src/resources.js","../webpack://generate-manifest/./src/service/webservice.js","../webpack://generate-manifest/./src/strategy.js","../webpack://generate-manifest/./main.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issue = exports.issueCommand = void 0;\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst oidc_utils_1 = require(\"./oidc-utils\");\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.\n * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.\n * Returns an empty string if the value is not defined.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    if (options && options.trimWhitespace === false) {\n        return val;\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Gets the values of an multiline input.  Each value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string[]\n *\n */\nfunction getMultilineInput(name, options) {\n    const inputs = getInput(name, options)\n        .split('\\n')\n        .filter(x => x !== '');\n    return inputs;\n}\nexports.getMultilineInput = getMultilineInput;\n/**\n * Gets the input value of the boolean type in the YAML 1.2 \"core schema\" specification.\n * Support boolean input list: `true | True | TRUE | false | False | FALSE` .\n * The return value is also in boolean type.\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   boolean\n */\nfunction getBooleanInput(name, options) {\n    const trueValue = ['true', 'True', 'TRUE'];\n    const falseValue = ['false', 'False', 'FALSE'];\n    const val = getInput(name, options);\n    if (trueValue.includes(val))\n        return true;\n    if (falseValue.includes(val))\n        return false;\n    throw new TypeError(`Input does not meet YAML 1.2 \"Core Schema\" specification: ${name}\\n` +\n        `Support boolean input list: \\`true | True | TRUE | false | False | FALSE\\``);\n}\nexports.getBooleanInput = getBooleanInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    process.stdout.write(os.EOL);\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction error(message, properties = {}) {\n    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds a warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction warning(message, properties = {}) {\n    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Adds a notice issue\n * @param message notice issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction notice(message, properties = {}) {\n    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.notice = notice;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\nfunction getIDToken(aud) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield oidc_utils_1.OidcClient.getIDToken(aud);\n    });\n}\nexports.getIDToken = getIDToken;\n/**\n * Summary exports\n */\nvar summary_1 = require(\"./summary\");\nObject.defineProperty(exports, \"summary\", { enumerable: true, get: function () { return summary_1.summary; } });\n/**\n * @deprecated use core.summary\n */\nvar summary_2 = require(\"./summary\");\nObject.defineProperty(exports, \"markdownSummary\", { enumerable: true, get: function () { return summary_2.markdownSummary; } });\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issueCommand = void 0;\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OidcClient = void 0;\nconst http_client_1 = require(\"@actions/http-client\");\nconst auth_1 = require(\"@actions/http-client/lib/auth\");\nconst core_1 = require(\"./core\");\nclass OidcClient {\n    static createHttpClient(allowRetry = true, maxRetry = 10) {\n        const requestOptions = {\n            allowRetries: allowRetry,\n            maxRetries: maxRetry\n        };\n        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);\n    }\n    static getRequestToken() {\n        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];\n        if (!token) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');\n        }\n        return token;\n    }\n    static getIDTokenUrl() {\n        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];\n        if (!runtimeUrl) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');\n        }\n        return runtimeUrl;\n    }\n    static getCall(id_token_url) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const httpclient = OidcClient.createHttpClient();\n            const res = yield httpclient\n                .getJson(id_token_url)\n                .catch(error => {\n                throw new Error(`Failed to get ID Token. \\n \n        Error Code : ${error.statusCode}\\n \n        Error Message: ${error.result.message}`);\n            });\n            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;\n            if (!id_token) {\n                throw new Error('Response json body do not have ID Token field');\n            }\n            return id_token;\n        });\n    }\n    static getIDToken(audience) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // New ID Token is requested from action service\n                let id_token_url = OidcClient.getIDTokenUrl();\n                if (audience) {\n                    const encodedAudience = encodeURIComponent(audience);\n                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;\n                }\n                core_1.debug(`ID token url is ${id_token_url}`);\n                const id_token = yield OidcClient.getCall(id_token_url);\n                core_1.setSecret(id_token);\n                return id_token;\n            }\n            catch (error) {\n                throw new Error(`Error message: ${error.message}`);\n            }\n        });\n    }\n}\nexports.OidcClient = OidcClient;\n//# sourceMappingURL=oidc-utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;\nconst os_1 = require(\"os\");\nconst fs_1 = require(\"fs\");\nconst { access, appendFile, writeFile } = fs_1.promises;\nexports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';\nexports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';\nclass Summary {\n    constructor() {\n        this._buffer = '';\n    }\n    /**\n     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist\n     * Also checks r/w permissions.\n     *\n     * @returns step summary file path\n     */\n    filePath() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._filePath) {\n                return this._filePath;\n            }\n            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];\n            if (!pathFromEnv) {\n                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);\n            }\n            try {\n                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);\n            }\n            catch (_a) {\n                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);\n            }\n            this._filePath = pathFromEnv;\n            return this._filePath;\n        });\n    }\n    /**\n     * Wraps content in an HTML tag, adding any HTML attributes\n     *\n     * @param {string} tag HTML tag to wrap\n     * @param {string | null} content content within the tag\n     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add\n     *\n     * @returns {string} content wrapped in HTML element\n     */\n    wrap(tag, content, attrs = {}) {\n        const htmlAttrs = Object.entries(attrs)\n            .map(([key, value]) => ` ${key}=\"${value}\"`)\n            .join('');\n        if (!content) {\n            return `<${tag}${htmlAttrs}>`;\n        }\n        return `<${tag}${htmlAttrs}>${content}</${tag}>`;\n    }\n    /**\n     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.\n     *\n     * @param {SummaryWriteOptions} [options] (optional) options for write operation\n     *\n     * @returns {Promise<Summary>} summary instance\n     */\n    write(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);\n            const filePath = yield this.filePath();\n            const writeFunc = overwrite ? writeFile : appendFile;\n            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });\n            return this.emptyBuffer();\n        });\n    }\n    /**\n     * Clears the summary buffer and wipes the summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.emptyBuffer().write({ overwrite: true });\n        });\n    }\n    /**\n     * Returns the current summary buffer as a string\n     *\n     * @returns {string} string of summary buffer\n     */\n    stringify() {\n        return this._buffer;\n    }\n    /**\n     * If the summary buffer is empty\n     *\n     * @returns {boolen} true if the buffer is empty\n     */\n    isEmptyBuffer() {\n        return this._buffer.length === 0;\n    }\n    /**\n     * Resets the summary buffer without writing to summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    emptyBuffer() {\n        this._buffer = '';\n        return this;\n    }\n    /**\n     * Adds raw text to the summary buffer\n     *\n     * @param {string} text content to add\n     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addRaw(text, addEOL = false) {\n        this._buffer += text;\n        return addEOL ? this.addEOL() : this;\n    }\n    /**\n     * Adds the operating system-specific end-of-line marker to the buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addEOL() {\n        return this.addRaw(os_1.EOL);\n    }\n    /**\n     * Adds an HTML codeblock to the summary buffer\n     *\n     * @param {string} code content to render within fenced code block\n     * @param {string} lang (optional) language to syntax highlight code\n     *\n     * @returns {Summary} summary instance\n     */\n    addCodeBlock(code, lang) {\n        const attrs = Object.assign({}, (lang && { lang }));\n        const element = this.wrap('pre', this.wrap('code', code), attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML list to the summary buffer\n     *\n     * @param {string[]} items list of items to render\n     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addList(items, ordered = false) {\n        const tag = ordered ? 'ol' : 'ul';\n        const listItems = items.map(item => this.wrap('li', item)).join('');\n        const element = this.wrap(tag, listItems);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML table to the summary buffer\n     *\n     * @param {SummaryTableCell[]} rows table rows\n     *\n     * @returns {Summary} summary instance\n     */\n    addTable(rows) {\n        const tableBody = rows\n            .map(row => {\n            const cells = row\n                .map(cell => {\n                if (typeof cell === 'string') {\n                    return this.wrap('td', cell);\n                }\n                const { header, data, colspan, rowspan } = cell;\n                const tag = header ? 'th' : 'td';\n                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));\n                return this.wrap(tag, data, attrs);\n            })\n                .join('');\n            return this.wrap('tr', cells);\n        })\n            .join('');\n        const element = this.wrap('table', tableBody);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds a collapsable HTML details element to the summary buffer\n     *\n     * @param {string} label text for the closed state\n     * @param {string} content collapsable content\n     *\n     * @returns {Summary} summary instance\n     */\n    addDetails(label, content) {\n        const element = this.wrap('details', this.wrap('summary', label) + content);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML image tag to the summary buffer\n     *\n     * @param {string} src path to the image you to embed\n     * @param {string} alt text description of the image\n     * @param {SummaryImageOptions} options (optional) addition image attributes\n     *\n     * @returns {Summary} summary instance\n     */\n    addImage(src, alt, options) {\n        const { width, height } = options || {};\n        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));\n        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML section heading element\n     *\n     * @param {string} text heading text\n     * @param {number | string} [level=1] (optional) the heading level, default: 1\n     *\n     * @returns {Summary} summary instance\n     */\n    addHeading(text, level) {\n        const tag = `h${level}`;\n        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)\n            ? tag\n            : 'h1';\n        const element = this.wrap(allowedTag, text);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML thematic break (<hr>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addSeparator() {\n        const element = this.wrap('hr', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML line break (<br>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addBreak() {\n        const element = this.wrap('br', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML blockquote to the summary buffer\n     *\n     * @param {string} text quote text\n     * @param {string} cite (optional) citation url\n     *\n     * @returns {Summary} summary instance\n     */\n    addQuote(text, cite) {\n        const attrs = Object.assign({}, (cite && { cite }));\n        const element = this.wrap('blockquote', text, attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML anchor tag to the summary buffer\n     *\n     * @param {string} text link text/content\n     * @param {string} href hyperlink\n     *\n     * @returns {Summary} summary instance\n     */\n    addLink(text, href) {\n        const element = this.wrap('a', text, { href });\n        return this.addRaw(element).addEOL();\n    }\n}\nconst _summary = new Summary();\n/**\n * @deprecated use `core.summary`\n */\nexports.markdownSummary = _summary;\nexports.summary = _summary;\n//# sourceMappingURL=summary.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCommandProperties = exports.toCommandValue = void 0;\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n/**\n *\n * @param annotationProperties\n * @returns The command properties to send with the actual annotation command\n * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646\n */\nfunction toCommandProperties(annotationProperties) {\n    if (!Object.keys(annotationProperties).length) {\n        return {};\n    }\n    return {\n        title: annotationProperties.title,\n        file: annotationProperties.file,\n        line: annotationProperties.startLine,\n        endLine: annotationProperties.endLine,\n        col: annotationProperties.startColumn,\n        endColumn: annotationProperties.endColumn\n    };\n}\nexports.toCommandProperties = toCommandProperties;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;\nclass BasicCredentialHandler {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BasicCredentialHandler = BasicCredentialHandler;\nclass BearerCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BearerCredentialHandler = BearerCredentialHandler;\nclass PersonalAccessTokenCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\n//# sourceMappingURL=auth.js.map","\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nconst pm = __importStar(require(\"./proxy\"));\nconst tunnel = __importStar(require(\"tunnel\"));\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                let output = Buffer.alloc(0);\n                this.message.on('data', (chunk) => {\n                    output = Buffer.concat([output, chunk]);\n                });\n                this.message.on('end', () => {\n                    resolve(output.toString());\n                });\n            }));\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    const parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    get(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('GET', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    del(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('POST', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PUT', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    head(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request(verb, requestUrl, stream, additionalHeaders);\n        });\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    getJson(requestUrl, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            const res = yield this.get(requestUrl, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    postJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.post(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    putJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.put(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    patchJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.patch(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    request(verb, requestUrl, data, headers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._disposed) {\n                throw new Error('Client has already been disposed.');\n            }\n            const parsedUrl = new URL(requestUrl);\n            let info = this._prepareRequest(verb, parsedUrl, headers);\n            // Only perform retries on reads since writes may not be idempotent.\n            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)\n                ? this._maxRetries + 1\n                : 1;\n            let numTries = 0;\n            let response;\n            do {\n                response = yield this.requestRaw(info, data);\n                // Check if it's an authentication challenge\n                if (response &&\n                    response.message &&\n                    response.message.statusCode === HttpCodes.Unauthorized) {\n                    let authenticationHandler;\n                    for (const handler of this.handlers) {\n                        if (handler.canHandleAuthentication(response)) {\n                            authenticationHandler = handler;\n                            break;\n                        }\n                    }\n                    if (authenticationHandler) {\n                        return authenticationHandler.handleAuthentication(this, info, data);\n                    }\n                    else {\n                        // We have received an unauthorized response but have no handlers to handle it.\n                        // Let the response return to the caller.\n                        return response;\n                    }\n                }\n                let redirectsRemaining = this._maxRedirects;\n                while (response.message.statusCode &&\n                    HttpRedirectCodes.includes(response.message.statusCode) &&\n                    this._allowRedirects &&\n                    redirectsRemaining > 0) {\n                    const redirectUrl = response.message.headers['location'];\n                    if (!redirectUrl) {\n                        // if there's no location to redirect to, we won't\n                        break;\n                    }\n                    const parsedRedirectUrl = new URL(redirectUrl);\n                    if (parsedUrl.protocol === 'https:' &&\n                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&\n                        !this._allowRedirectDowngrade) {\n                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                    }\n                    // we need to finish reading the response before reassigning response\n                    // which will leak the open socket.\n                    yield response.readBody();\n                    // strip authorization header if redirected to a different hostname\n                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                        for (const header in headers) {\n                            // header names are case insensitive\n                            if (header.toLowerCase() === 'authorization') {\n                                delete headers[header];\n                            }\n                        }\n                    }\n                    // let's make the request with the new redirectUrl\n                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                    response = yield this.requestRaw(info, data);\n                    redirectsRemaining--;\n                }\n                if (!response.message.statusCode ||\n                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {\n                    // If not a retry code, return immediately instead of retrying\n                    return response;\n                }\n                numTries += 1;\n                if (numTries < maxTries) {\n                    yield response.readBody();\n                    yield this._performExponentialBackoff(numTries);\n                }\n            } while (numTries < maxTries);\n            return response;\n        });\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                function callbackForResult(err, res) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else if (!res) {\n                        // If `err` is not passed, then `res` must be passed.\n                        reject(new Error('Unknown error'));\n                    }\n                    else {\n                        resolve(res);\n                    }\n                }\n                this.requestRawWithCallback(info, data, callbackForResult);\n            });\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        if (typeof data === 'string') {\n            if (!info.options.headers) {\n                info.options.headers = {};\n            }\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        function handleResult(err, res) {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        }\n        const req = info.httpModule.request(info.options, (msg) => {\n            const res = new HttpClientResponse(msg);\n            handleResult(undefined, res);\n        });\n        let socket;\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error(`Request timeout: ${info.options.path}`));\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        const parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            for (const handler of this.handlers) {\n                handler.prepareRequest(info.options);\n            }\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        const proxyUrl = pm.getProxyUrl(parsedUrl);\n        const useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.\n        if (proxyUrl && proxyUrl.hostname) {\n            const agentOptions = {\n                maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {\n                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                })), { host: proxyUrl.hostname, port: proxyUrl.port })\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        return __awaiter(this, void 0, void 0, function* () {\n            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n            return new Promise(resolve => setTimeout(() => resolve(), ms));\n        });\n    }\n    _processResponse(res, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                const statusCode = res.message.statusCode || 0;\n                const response = {\n                    statusCode,\n                    result: null,\n                    headers: {}\n                };\n                // not found leads to null obj returned\n                if (statusCode === HttpCodes.NotFound) {\n                    resolve(response);\n                }\n                // get the result from the body\n                function dateTimeDeserializer(key, value) {\n                    if (typeof value === 'string') {\n                        const a = new Date(value);\n                        if (!isNaN(a.valueOf())) {\n                            return a;\n                        }\n                    }\n                    return value;\n                }\n                let obj;\n                let contents;\n                try {\n                    contents = yield res.readBody();\n                    if (contents && contents.length > 0) {\n                        if (options && options.deserializeDates) {\n                            obj = JSON.parse(contents, dateTimeDeserializer);\n                        }\n                        else {\n                            obj = JSON.parse(contents);\n                        }\n                        response.result = obj;\n                    }\n                    response.headers = res.message.headers;\n                }\n                catch (err) {\n                    // Invalid resource (contents not json);  leaving result obj null\n                }\n                // note that 3xx redirects are handled by the http layer.\n                if (statusCode > 299) {\n                    let msg;\n                    // if exception/error in body, attempt to get better error\n                    if (obj && obj.message) {\n                        msg = obj.message;\n                    }\n                    else if (contents && contents.length > 0) {\n                        // it may be the case that the exception is in the body message as string\n                        msg = contents;\n                    }\n                    else {\n                        msg = `Failed request: (${statusCode})`;\n                    }\n                    const err = new HttpClientError(msg, statusCode);\n                    err.result = response.result;\n                    reject(err);\n                }\n                else {\n                    resolve(response);\n                }\n            }));\n        });\n    }\n}\nexports.HttpClient = HttpClient;\nconst lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkBypass = exports.getProxyUrl = void 0;\nfunction getProxyUrl(reqUrl) {\n    const usingSsl = reqUrl.protocol === 'https:';\n    if (checkBypass(reqUrl)) {\n        return undefined;\n    }\n    const proxyVar = (() => {\n        if (usingSsl) {\n            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n        }\n        else {\n            return process.env['http_proxy'] || process.env['HTTP_PROXY'];\n        }\n    })();\n    if (proxyVar) {\n        return new URL(proxyVar);\n    }\n    else {\n        return undefined;\n    }\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    const upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (const upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperReqHosts.some(x => x === upperNoProxyItem)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\n//# sourceMappingURL=proxy.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Action = void 0;\nconst k8s = require(\"./imports/k8s\");\n/**\n * Utility class to implement the conversion between our API and the k8s action\n * structure. Used both for probes and handlers.\n *\n * @internal\n */\nclass Action {\n    static fromTcpSocket(container, options = {}) {\n        var _a, _b;\n        return {\n            port: k8s.IntOrString.fromNumber((_b = (_a = options.port) !== null && _a !== void 0 ? _a : container.port) !== null && _b !== void 0 ? _b : 80),\n            host: options.host,\n        };\n    }\n    static fromCommand(command) {\n        return { command };\n    }\n    static fromHttpGet(container, path, options = {}) {\n        var _a, _b;\n        return {\n            path,\n            port: k8s.IntOrString.fromNumber((_b = (_a = options.port) !== null && _a !== void 0 ? _a : container.port) !== null && _b !== void 0 ? _b : 80),\n        };\n    }\n}\nexports.Action = Action;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2FjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9fYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHFDQUFxQztBQUVyQzs7Ozs7R0FLRztBQUNILE1BQWEsTUFBTTtJQUVWLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBb0IsRUFBRSxVQUE0QyxFQUFFOztRQUM5RixPQUFPO1lBQ0wsSUFBSSxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsVUFBVSxhQUFDLE9BQU8sQ0FBQyxJQUFJLG1DQUFJLFNBQVMsQ0FBQyxJQUFJLG1DQUFJLEVBQUUsQ0FBQztZQUN0RSxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7U0FDbkIsQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQWlCO1FBQ3pDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFvQixFQUFFLElBQVksRUFBRSxVQUE2QixFQUFHOztRQUM1RixPQUFPO1lBQ0wsSUFBSTtZQUNKLElBQUksRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLFVBQVUsYUFBQyxPQUFPLENBQUMsSUFBSSxtQ0FBSSxTQUFTLENBQUMsSUFBSSxtQ0FBSSxFQUFFLENBQUM7U0FDdkUsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQW5CRCx3QkFtQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQgKiBhcyBrOHMgZnJvbSAnLi9pbXBvcnRzL2s4cyc7XG5cbi8qKlxuICogVXRpbGl0eSBjbGFzcyB0byBpbXBsZW1lbnQgdGhlIGNvbnZlcnNpb24gYmV0d2VlbiBvdXIgQVBJIGFuZCB0aGUgazhzIGFjdGlvblxuICogc3RydWN0dXJlLiBVc2VkIGJvdGggZm9yIHByb2JlcyBhbmQgaGFuZGxlcnMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBBY3Rpb24ge1xuXG4gIHB1YmxpYyBzdGF0aWMgZnJvbVRjcFNvY2tldChjb250YWluZXI6IENvbnRhaW5lciwgb3B0aW9uczogeyBwb3J0PzogbnVtYmVyOyBob3N0Pzogc3RyaW5nIH0gPSB7fSk6IGs4cy5UY3BTb2NrZXRBY3Rpb24ge1xuICAgIHJldHVybiB7XG4gICAgICBwb3J0OiBrOHMuSW50T3JTdHJpbmcuZnJvbU51bWJlcihvcHRpb25zLnBvcnQgPz8gY29udGFpbmVyLnBvcnQgPz8gODApLFxuICAgICAgaG9zdDogb3B0aW9ucy5ob3N0LFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZyb21Db21tYW5kKGNvbW1hbmQ6IHN0cmluZ1tdKTogazhzLkV4ZWNBY3Rpb24ge1xuICAgIHJldHVybiB7IGNvbW1hbmQgfTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUh0dHBHZXQoY29udGFpbmVyOiBDb250YWluZXIsIHBhdGg6IHN0cmluZywgb3B0aW9uczogeyBwb3J0PzogbnVtYmVyIH0gPSB7IH0pOiBrOHMuSHR0cEdldEFjdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBwb3J0OiBrOHMuSW50T3JTdHJpbmcuZnJvbU51bWJlcihvcHRpb25zLnBvcnQgPz8gY29udGFpbmVyLnBvcnQgPz8gODApLFxuICAgIH07XG4gIH1cbn0iXX0=","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NonApiResource = exports.ApiResource = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\n/**\n * Represents information about an API resource type.\n */\nclass ApiResource {\n    constructor(options) {\n        this.apiGroup = options.apiGroup;\n        this.resourceType = options.resourceType;\n    }\n    /**\n     * API resource information for a custom resource type.\n     */\n    static custom(options) {\n        return new ApiResource(options);\n    }\n    ;\n    asApiResource() {\n        return this;\n    }\n    asNonApiResource() {\n        return undefined;\n    }\n}\nexports.ApiResource = ApiResource;\n_a = JSII_RTTI_SYMBOL_1;\nApiResource[_a] = { fqn: \"cdk8s-plus-22.ApiResource\", version: \"2.0.0-rc.2\" };\n/**\n * API resource information for Binding.\n */\nApiResource.BINDINGS = new ApiResource({\n    apiGroup: '',\n    resourceType: 'bindings',\n});\n/**\n * API resource information for ComponentStatus.\n */\nApiResource.COMPONENT_STATUSES = new ApiResource({\n    apiGroup: '',\n    resourceType: 'componentstatuses',\n});\n/**\n * API resource information for ConfigMap.\n */\nApiResource.CONFIG_MAPS = new ApiResource({\n    apiGroup: '',\n    resourceType: 'configmaps',\n});\n/**\n * API resource information for Endpoints.\n */\nApiResource.ENDPOINTS = new ApiResource({\n    apiGroup: '',\n    resourceType: 'endpoints',\n});\n/**\n * API resource information for Event.\n */\nApiResource.EVENTS = new ApiResource({\n    apiGroup: '',\n    resourceType: 'events',\n});\n/**\n * API resource information for LimitRange.\n */\nApiResource.LIMIT_RANGES = new ApiResource({\n    apiGroup: '',\n    resourceType: 'limitranges',\n});\n/**\n * API resource information for Namespace.\n */\nApiResource.NAMESPACES = new ApiResource({\n    apiGroup: '',\n    resourceType: 'namespaces',\n});\n/**\n * API resource information for Node.\n */\nApiResource.NODES = new ApiResource({\n    apiGroup: '',\n    resourceType: 'nodes',\n});\n/**\n * API resource information for PersistentVolumeClaim.\n */\nApiResource.PERSISTENT_VOLUME_CLAIMS = new ApiResource({\n    apiGroup: '',\n    resourceType: 'persistentvolumeclaims',\n});\n/**\n * API resource information for PersistentVolume.\n */\nApiResource.PERSISTENT_VOLUMES = new ApiResource({\n    apiGroup: '',\n    resourceType: 'persistentvolumes',\n});\n/**\n * API resource information for Pod.\n */\nApiResource.PODS = new ApiResource({\n    apiGroup: '',\n    resourceType: 'pods',\n});\n/**\n * API resource information for PodTemplate.\n */\nApiResource.POD_TEMPLATES = new ApiResource({\n    apiGroup: '',\n    resourceType: 'podtemplates',\n});\n/**\n * API resource information for ReplicationController.\n */\nApiResource.REPLICATION_CONTROLLERS = new ApiResource({\n    apiGroup: '',\n    resourceType: 'replicationcontrollers',\n});\n/**\n * API resource information for ResourceQuota.\n */\nApiResource.RESOURCE_QUOTAS = new ApiResource({\n    apiGroup: '',\n    resourceType: 'resourcequotas',\n});\n/**\n * API resource information for Secret.\n */\nApiResource.SECRETS = new ApiResource({\n    apiGroup: '',\n    resourceType: 'secrets',\n});\n/**\n * API resource information for ServiceAccount.\n */\nApiResource.SERVICE_ACCOUNTS = new ApiResource({\n    apiGroup: '',\n    resourceType: 'serviceaccounts',\n});\n/**\n * API resource information for Service.\n */\nApiResource.SERVICES = new ApiResource({\n    apiGroup: '',\n    resourceType: 'services',\n});\n/**\n * API resource information for MutatingWebhookConfiguration.\n */\nApiResource.MUTATING_WEBHOOK_CONFIGURATIONS = new ApiResource({\n    apiGroup: 'admissionregistration.k8s.io',\n    resourceType: 'mutatingwebhookconfigurations',\n});\n/**\n * API resource information for ValidatingWebhookConfiguration.\n */\nApiResource.VALIDATING_WEBHOOK_CONFIGURATIONS = new ApiResource({\n    apiGroup: 'admissionregistration.k8s.io',\n    resourceType: 'validatingwebhookconfigurations',\n});\n/**\n * API resource information for CustomResourceDefinition.\n */\nApiResource.CUSTOM_RESOURCE_DEFINITIONS = new ApiResource({\n    apiGroup: 'apiextensions.k8s.io',\n    resourceType: 'customresourcedefinitions',\n});\n/**\n * API resource information for APIService.\n */\nApiResource.API_SERVICES = new ApiResource({\n    apiGroup: 'apiregistration.k8s.io',\n    resourceType: 'apiservices',\n});\n/**\n * API resource information for ControllerRevision.\n */\nApiResource.CONTROLLER_REVISIONS = new ApiResource({\n    apiGroup: 'apps',\n    resourceType: 'controllerrevisions',\n});\n/**\n * API resource information for DaemonSet.\n */\nApiResource.DAEMON_SETS = new ApiResource({\n    apiGroup: 'apps',\n    resourceType: 'daemonsets',\n});\n/**\n * API resource information for Deployment.\n */\nApiResource.DEPLOYMENTS = new ApiResource({\n    apiGroup: 'apps',\n    resourceType: 'deployments',\n});\n/**\n * API resource information for ReplicaSet.\n */\nApiResource.REPLICA_SETS = new ApiResource({\n    apiGroup: 'apps',\n    resourceType: 'replicasets',\n});\n/**\n * API resource information for StatefulSet.\n */\nApiResource.STATEFUL_SETS = new ApiResource({\n    apiGroup: 'apps',\n    resourceType: 'statefulsets',\n});\n/**\n * API resource information for TokenReview.\n */\nApiResource.TOKEN_REVIEWS = new ApiResource({\n    apiGroup: 'authentication.k8s.io',\n    resourceType: 'tokenreviews',\n});\n/**\n * API resource information for LocalSubjectAccessReview.\n */\nApiResource.LOCAL_SUBJECT_ACCESS_REVIEWS = new ApiResource({\n    apiGroup: 'authorization.k8s.io',\n    resourceType: 'localsubjectaccessreviews',\n});\n/**\n * API resource information for SelfSubjectAccessReview.\n */\nApiResource.SELF_SUBJECT_ACCESS_REVIEWS = new ApiResource({\n    apiGroup: 'authorization.k8s.io',\n    resourceType: 'selfsubjectaccessreviews',\n});\n/**\n * API resource information for SelfSubjectRulesReview.\n */\nApiResource.SELF_SUBJECT_RULES_REVIEWS = new ApiResource({\n    apiGroup: 'authorization.k8s.io',\n    resourceType: 'selfsubjectrulesreviews',\n});\n/**\n * API resource information for SubjectAccessReview.\n */\nApiResource.SUBJECT_ACCESS_REVIEWS = new ApiResource({\n    apiGroup: 'authorization.k8s.io',\n    resourceType: 'subjectaccessreviews',\n});\n/**\n * API resource information for HorizontalPodAutoscaler.\n */\nApiResource.HORIZONTAL_POD_AUTOSCALERS = new ApiResource({\n    apiGroup: 'autoscaling',\n    resourceType: 'horizontalpodautoscalers',\n});\n/**\n * API resource information for CronJob.\n */\nApiResource.CRON_JOBS = new ApiResource({\n    apiGroup: 'batch',\n    resourceType: 'cronjobs',\n});\n/**\n * API resource information for Job.\n */\nApiResource.JOBS = new ApiResource({\n    apiGroup: 'batch',\n    resourceType: 'jobs',\n});\n/**\n * API resource information for CertificateSigningRequest.\n */\nApiResource.CERTIFICATE_SIGNING_REQUESTS = new ApiResource({\n    apiGroup: 'certificates.k8s.io',\n    resourceType: 'certificatesigningrequests',\n});\n/**\n * API resource information for Lease.\n */\nApiResource.LEASES = new ApiResource({\n    apiGroup: 'coordination.k8s.io',\n    resourceType: 'leases',\n});\n/**\n * API resource information for EndpointSlice.\n */\nApiResource.ENDPOINT_SLICES = new ApiResource({\n    apiGroup: 'discovery.k8s.io',\n    resourceType: 'endpointslices',\n});\n/**\n * API resource information for FlowSchema.\n */\nApiResource.FLOW_SCHEMAS = new ApiResource({\n    apiGroup: 'flowcontrol.apiserver.k8s.io',\n    resourceType: 'flowschemas',\n});\n/**\n * API resource information for PriorityLevelConfiguration.\n */\nApiResource.PRIORITY_LEVEL_CONFIGURATIONS = new ApiResource({\n    apiGroup: 'flowcontrol.apiserver.k8s.io',\n    resourceType: 'prioritylevelconfigurations',\n});\n/**\n * API resource information for IngressClass.\n */\nApiResource.INGRESS_CLASSES = new ApiResource({\n    apiGroup: 'networking.k8s.io',\n    resourceType: 'ingressclasses',\n});\n/**\n * API resource information for Ingress.\n */\nApiResource.INGRESSES = new ApiResource({\n    apiGroup: 'networking.k8s.io',\n    resourceType: 'ingresses',\n});\n/**\n * API resource information for NetworkPolicy.\n */\nApiResource.NETWORK_POLICIES = new ApiResource({\n    apiGroup: 'networking.k8s.io',\n    resourceType: 'networkpolicies',\n});\n/**\n * API resource information for RuntimeClass.\n */\nApiResource.RUNTIME_CLASSES = new ApiResource({\n    apiGroup: 'node.k8s.io',\n    resourceType: 'runtimeclasses',\n});\n/**\n * API resource information for PodDisruptionBudget.\n */\nApiResource.POD_DISRUPTION_BUDGETS = new ApiResource({\n    apiGroup: 'policy',\n    resourceType: 'poddisruptionbudgets',\n});\n/**\n * API resource information for PodSecurityPolicy.\n */\nApiResource.POD_SECURITY_POLICIES = new ApiResource({\n    apiGroup: 'policy',\n    resourceType: 'podsecuritypolicies',\n});\n/**\n * API resource information for ClusterRoleBinding.\n */\nApiResource.CLUSTER_ROLE_BINDINGS = new ApiResource({\n    apiGroup: 'rbac.authorization.k8s.io',\n    resourceType: 'clusterrolebindings',\n});\n/**\n * API resource information for ClusterRole.\n */\nApiResource.CLUSTER_ROLES = new ApiResource({\n    apiGroup: 'rbac.authorization.k8s.io',\n    resourceType: 'clusterroles',\n});\n/**\n * API resource information for RoleBinding.\n */\nApiResource.ROLE_BINDINGS = new ApiResource({\n    apiGroup: 'rbac.authorization.k8s.io',\n    resourceType: 'rolebindings',\n});\n/**\n * API resource information for Role.\n */\nApiResource.ROLES = new ApiResource({\n    apiGroup: 'rbac.authorization.k8s.io',\n    resourceType: 'roles',\n});\n/**\n * API resource information for PriorityClass.\n */\nApiResource.PRIORITY_CLASSES = new ApiResource({\n    apiGroup: 'scheduling.k8s.io',\n    resourceType: 'priorityclasses',\n});\n/**\n * API resource information for CSIDriver.\n */\nApiResource.CSI_DRIVERS = new ApiResource({\n    apiGroup: 'storage.k8s.io',\n    resourceType: 'csidrivers',\n});\n/**\n * API resource information for CSINode.\n */\nApiResource.CSI_NODES = new ApiResource({\n    apiGroup: 'storage.k8s.io',\n    resourceType: 'csinodes',\n});\n/**\n * API resource information for CSIStorageCapacity.\n */\nApiResource.CSI_STORAGE_CAPACITIES = new ApiResource({\n    apiGroup: 'storage.k8s.io',\n    resourceType: 'csistoragecapacities',\n});\n/**\n * API resource information for StorageClass.\n */\nApiResource.STORAGE_CLASSES = new ApiResource({\n    apiGroup: 'storage.k8s.io',\n    resourceType: 'storageclasses',\n});\n/**\n * API resource information for VolumeAttachment.\n */\nApiResource.VOLUME_ATTACHMENTS = new ApiResource({\n    apiGroup: 'storage.k8s.io',\n    resourceType: 'volumeattachments',\n});\n/**\n * Factory for creating non api resources.\n */\nclass NonApiResource {\n    constructor(nonResourceUrl) {\n        this.nonResourceUrl = nonResourceUrl;\n    }\n    static of(url) {\n        return new NonApiResource(url);\n    }\n    ;\n    asApiResource() {\n        return undefined;\n    }\n    asNonApiResource() {\n        return this.nonResourceUrl;\n    }\n}\nexports.NonApiResource = NonApiResource;\n_b = JSII_RTTI_SYMBOL_1;\nNonApiResource[_b] = { fqn: \"cdk8s-plus-22.NonApiResource\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ResourcePermissions = exports.Resource = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst constructs_1 = require(\"constructs\");\n/**\n * Base class for all Kubernetes objects in stdk8s. Represents a single\n * resource.\n */\nclass Resource extends constructs_1.Construct {\n    constructor(scope, id) {\n        super(scope, id);\n        this.permissions = new ResourcePermissions(this);\n    }\n    get metadata() {\n        return this.apiObject.metadata;\n    }\n    /**\n     * The name of this API object.\n     */\n    get name() {\n        return this.apiObject.name;\n    }\n    /**\n     * The object's API version (e.g. \"authorization.k8s.io/v1\")\n     */\n    get apiVersion() {\n        return this.apiObject.apiVersion;\n    }\n    /**\n     * The group portion of the API version (e.g. \"authorization.k8s.io\").\n     */\n    get apiGroup() {\n        return this.apiObject.apiGroup;\n    }\n    /**\n     * The object kind (e.g. \"Deployment\").\n     */\n    get kind() {\n        return this.apiObject.kind;\n    }\n    get resourceName() {\n        return this.name;\n    }\n    asApiResource() {\n        return this;\n    }\n    asNonApiResource() {\n        return undefined;\n    }\n}\nexports.Resource = Resource;\n_a = JSII_RTTI_SYMBOL_1;\nResource[_a] = { fqn: \"cdk8s-plus-22.Resource\", version: \"2.0.0-rc.2\" };\n/**\n * Controls permissions for operations on resources.\n */\nclass ResourcePermissions {\n    constructor(instance) {\n        this.instance = instance;\n    }\n    /**\n     * Grants the list of subjects permissions to read this resource.\n     */\n    grantRead(...subjects) {\n        const subjectsAddress = utils_1.address(...subjects);\n        const role = new r.Role(this.instance, `Role${subjectsAddress}`, {\n            metadata: { namespace: this.instance.metadata.namespace },\n        });\n        role.allowRead(this.instance);\n        return role.bind(...subjects);\n    }\n    /**\n     * Grants the list of subjects permissions to read and write this resource.\n     */\n    grantReadWrite(...subjects) {\n        const subjectsAddress = utils_1.address(...subjects);\n        const role = new r.Role(this.instance, `Role${subjectsAddress}`, {\n            metadata: { namespace: this.instance.metadata.namespace },\n        });\n        role.allowReadWrite(this.instance);\n        return role.bind(...subjects);\n    }\n}\nexports.ResourcePermissions = ResourcePermissions;\n_b = JSII_RTTI_SYMBOL_1;\nResourcePermissions[_b] = { fqn: \"cdk8s-plus-22.ResourcePermissions\", version: \"2.0.0-rc.2\" };\n// meh, avoiding errors due to circular imports...\nconst r = require(\"./role\");\nconst utils_1 = require(\"./utils\");\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsMkNBQW1EO0FBdUNuRDs7O0dBR0c7QUFDSCxNQUFzQixRQUFTLFNBQVEsc0JBQVM7SUFXOUMsWUFBbUIsS0FBZ0IsRUFBRSxFQUFVO1FBQzdDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxJQUFXLFFBQVE7UUFDakIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsVUFBVTtRQUNuQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0lBQ25DLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQVcsWUFBWTtRQUNyQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVNLGFBQWE7UUFDbEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sZ0JBQWdCO1FBQ3JCLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7O0FBMURILDRCQTREQzs7O0FBRUQ7O0dBRUc7QUFDSCxNQUFhLG1CQUFtQjtJQUU5QixZQUErQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQUcsQ0FBQztJQUVyRDs7T0FFRztJQUNJLFNBQVMsQ0FBQyxHQUFHLFFBQXVCO1FBQ3pDLE1BQU0sZUFBZSxHQUFHLGVBQU8sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sZUFBZSxFQUFFLEVBQUU7WUFDL0QsUUFBUSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtTQUMxRCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxjQUFjLENBQUMsR0FBRyxRQUF1QjtRQUM5QyxNQUFNLGVBQWUsR0FBRyxlQUFPLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUM3QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxPQUFPLGVBQWUsRUFBRSxFQUFFO1lBQy9ELFFBQVEsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUU7U0FDMUQsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7QUExQkgsa0RBNEJDOzs7QUFFRCxrREFBa0Q7QUFDbEQsNEJBQTRCO0FBRTVCLG1DQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwaU9iamVjdE1ldGFkYXRhLCBBcGlPYmplY3QsIEFwaU9iamVjdE1ldGFkYXRhRGVmaW5pdGlvbiB9IGZyb20gJ2NkazhzJztcbmltcG9ydCB7IENvbnN0cnVjdCwgSUNvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgSUFwaVJlc291cmNlLCBJQXBpRW5kcG9pbnQgfSBmcm9tICcuL2FwaS1yZXNvdXJjZS5nZW5lcmF0ZWQnO1xuXG4vKipcbiAqIEluaXRpYWxpemF0aW9uIHByb3BlcnRpZXMgZm9yIHJlc291cmNlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZVByb3BzIHtcbiAgLyoqXG4gICAqIE1ldGFkYXRhIHRoYXQgYWxsIHBlcnNpc3RlZCByZXNvdXJjZXMgbXVzdCBoYXZlLCB3aGljaCBpbmNsdWRlcyBhbGwgb2JqZWN0c1xuICAgKiB1c2VycyBtdXN0IGNyZWF0ZS5cbiAgICovXG4gIHJlYWRvbmx5IG1ldGFkYXRhPzogQXBpT2JqZWN0TWV0YWRhdGE7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHJlc291cmNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElSZXNvdXJjZSBleHRlbmRzIElDb25zdHJ1Y3Qge1xuICAvKipcbiAgICogVGhlIEt1YmVybmV0ZXMgbmFtZSBvZiB0aGlzIHJlc291cmNlLlxuICAgKi9cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0J3MgQVBJIHZlcnNpb24gKGUuZy4gXCJhdXRob3JpemF0aW9uLms4cy5pby92MVwiKVxuICAgKi9cbiAgcmVhZG9ubHkgYXBpVmVyc2lvbjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZ3JvdXAgcG9ydGlvbiBvZiB0aGUgQVBJIHZlcnNpb24gKGUuZy4gXCJhdXRob3JpemF0aW9uLms4cy5pb1wiKVxuICAgKi9cbiAgcmVhZG9ubHkgYXBpR3JvdXA6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG9iamVjdCBraW5kIChlLmcuIFwiRGVwbG95bWVudFwiKS5cbiAgICovXG4gIHJlYWRvbmx5IGtpbmQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgS3ViZXJuZXRlcyBvYmplY3RzIGluIHN0ZGs4cy4gUmVwcmVzZW50cyBhIHNpbmdsZVxuICogcmVzb3VyY2UuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZXNvdXJjZSBleHRlbmRzIENvbnN0cnVjdCBpbXBsZW1lbnRzIElSZXNvdXJjZSwgSUFwaVJlc291cmNlLCBJQXBpRW5kcG9pbnQge1xuXG4gIC8qKlxuICAgKiBUaGUgdW5kZXJseWluZyBjZGs4cyBBUEkgb2JqZWN0LlxuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IHJlYWRvbmx5IGFwaU9iamVjdDogQXBpT2JqZWN0O1xuXG4gIHB1YmxpYyByZWFkb25seSBhYnN0cmFjdCByZXNvdXJjZVR5cGU6IHN0cmluZztcblxuICBwdWJsaWMgcmVhZG9ubHkgcGVybWlzc2lvbnM6IFJlc291cmNlUGVybWlzc2lvbnM7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgIHRoaXMucGVybWlzc2lvbnMgPSBuZXcgUmVzb3VyY2VQZXJtaXNzaW9ucyh0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbWV0YWRhdGEoKTogQXBpT2JqZWN0TWV0YWRhdGFEZWZpbml0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5hcGlPYmplY3QubWV0YWRhdGE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhpcyBBUEkgb2JqZWN0LlxuICAgKi9cbiAgcHVibGljIGdldCBuYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYXBpT2JqZWN0Lm5hbWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG9iamVjdCdzIEFQSSB2ZXJzaW9uIChlLmcuIFwiYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFcIilcbiAgICovXG4gIHB1YmxpYyBnZXQgYXBpVmVyc2lvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmFwaU9iamVjdC5hcGlWZXJzaW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBncm91cCBwb3J0aW9uIG9mIHRoZSBBUEkgdmVyc2lvbiAoZS5nLiBcImF1dGhvcml6YXRpb24uazhzLmlvXCIpLlxuICAgKi9cbiAgcHVibGljIGdldCBhcGlHcm91cCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmFwaU9iamVjdC5hcGlHcm91cDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IGtpbmQgKGUuZy4gXCJEZXBsb3ltZW50XCIpLlxuICAgKi9cbiAgcHVibGljIGdldCBraW5kKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYXBpT2JqZWN0LmtpbmQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHJlc291cmNlTmFtZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH1cblxuICBwdWJsaWMgYXNBcGlSZXNvdXJjZSgpOiBJQXBpUmVzb3VyY2UgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIGFzTm9uQXBpUmVzb3VyY2UoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbn1cblxuLyoqXG4gKiBDb250cm9scyBwZXJtaXNzaW9ucyBmb3Igb3BlcmF0aW9ucyBvbiByZXNvdXJjZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZVBlcm1pc3Npb25zIHtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVhZG9ubHkgaW5zdGFuY2U6IFJlc291cmNlKSB7fVxuXG4gIC8qKlxuICAgKiBHcmFudHMgdGhlIGxpc3Qgb2Ygc3ViamVjdHMgcGVybWlzc2lvbnMgdG8gcmVhZCB0aGlzIHJlc291cmNlLlxuICAgKi9cbiAgcHVibGljIGdyYW50UmVhZCguLi5zdWJqZWN0czogcmIuSVN1YmplY3RbXSk6IHJiLlJvbGVCaW5kaW5nIHtcbiAgICBjb25zdCBzdWJqZWN0c0FkZHJlc3MgPSBhZGRyZXNzKC4uLnN1YmplY3RzKTtcbiAgICBjb25zdCByb2xlID0gbmV3IHIuUm9sZSh0aGlzLmluc3RhbmNlLCBgUm9sZSR7c3ViamVjdHNBZGRyZXNzfWAsIHtcbiAgICAgIG1ldGFkYXRhOiB7IG5hbWVzcGFjZTogdGhpcy5pbnN0YW5jZS5tZXRhZGF0YS5uYW1lc3BhY2UgfSxcbiAgICB9KTtcbiAgICByb2xlLmFsbG93UmVhZCh0aGlzLmluc3RhbmNlKTtcbiAgICByZXR1cm4gcm9sZS5iaW5kKC4uLnN1YmplY3RzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHcmFudHMgdGhlIGxpc3Qgb2Ygc3ViamVjdHMgcGVybWlzc2lvbnMgdG8gcmVhZCBhbmQgd3JpdGUgdGhpcyByZXNvdXJjZS5cbiAgICovXG4gIHB1YmxpYyBncmFudFJlYWRXcml0ZSguLi5zdWJqZWN0czogcmIuSVN1YmplY3RbXSk6IHJiLlJvbGVCaW5kaW5nIHtcbiAgICBjb25zdCBzdWJqZWN0c0FkZHJlc3MgPSBhZGRyZXNzKC4uLnN1YmplY3RzKTtcbiAgICBjb25zdCByb2xlID0gbmV3IHIuUm9sZSh0aGlzLmluc3RhbmNlLCBgUm9sZSR7c3ViamVjdHNBZGRyZXNzfWAsIHtcbiAgICAgIG1ldGFkYXRhOiB7IG5hbWVzcGFjZTogdGhpcy5pbnN0YW5jZS5tZXRhZGF0YS5uYW1lc3BhY2UgfSxcbiAgICB9KTtcbiAgICByb2xlLmFsbG93UmVhZFdyaXRlKHRoaXMuaW5zdGFuY2UpO1xuICAgIHJldHVybiByb2xlLmJpbmQoLi4uc3ViamVjdHMpO1xuICB9XG5cbn1cblxuLy8gbWVoLCBhdm9pZGluZyBlcnJvcnMgZHVlIHRvIGNpcmN1bGFyIGltcG9ydHMuLi5cbmltcG9ydCAqIGFzIHIgZnJvbSAnLi9yb2xlJztcbmltcG9ydCAqIGFzIHJiIGZyb20gJy4vcm9sZS1iaW5kaW5nJztcbmltcG9ydCB7IGFkZHJlc3MgfSBmcm9tICcuL3V0aWxzJztcbiJdfQ==","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigMap = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst configmap = require(\"fs\");\nconst path = require(\"path\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst constructs_1 = require(\"constructs\");\nconst minimatch_1 = require(\"minimatch\");\nconst base = require(\"./base\");\nconst k8s = require(\"./imports/k8s\");\nconst utils_1 = require(\"./utils\");\nclass ImportedConfigMap extends constructs_1.Construct {\n    constructor(scope, id, name) {\n        super(scope, id);\n        this._name = name;\n    }\n    get name() {\n        return this._name;\n    }\n    get apiVersion() {\n        return k8s.KubeConfigMap.GVK.apiVersion;\n    }\n    get apiGroup() {\n        return '';\n    }\n    get kind() {\n        return k8s.KubeConfigMap.GVK.kind;\n    }\n}\n/**\n * ConfigMap holds configuration data for pods to consume.\n */\nclass ConfigMap extends base.Resource {\n    constructor(scope, id, props = {}) {\n        var _b, _c, _d;\n        super(scope, id);\n        this.resourceType = 'configmaps';\n        this._binaryData = {};\n        this._data = {};\n        this.immutable = (_b = props.immutable) !== null && _b !== void 0 ? _b : false;\n        this.apiObject = new k8s.KubeConfigMap(this, 'Resource', {\n            metadata: props.metadata,\n            // we need lazy here because we filter empty\n            data: cdk8s_1.Lazy.any({ produce: () => this.synthesizeData() }),\n            binaryData: cdk8s_1.Lazy.any({ produce: () => this.synthesizeBinaryData() }),\n            immutable: this.immutable,\n        });\n        for (const [k, v] of Object.entries((_c = props.data) !== null && _c !== void 0 ? _c : {})) {\n            this.addData(k, v);\n        }\n        for (const [k, v] of Object.entries((_d = props.binaryData) !== null && _d !== void 0 ? _d : {})) {\n            this.addBinaryData(k, v);\n        }\n    }\n    /**\n     * Represents a ConfigMap created elsewhere.\n     */\n    static fromConfigMapName(scope, id, name) {\n        return new ImportedConfigMap(scope, id, name);\n    }\n    /**\n     * Adds a data entry to the config map.\n     * @param key The key\n     * @param value The value\n     *\n     * @throws if there is either a `data` or `binaryData` entry with the same key\n     */\n    addData(key, value) {\n        this.verifyKeyAvailable(key);\n        this._data[key] = value;\n    }\n    /**\n     * The data associated with this config map.\n     *\n     * Returns an copy. To add data records, use `addData()` or `addBinaryData()`.\n     */\n    get data() {\n        return { ...this._data };\n    }\n    /**\n     * Adds a binary data entry to the config map. BinaryData can contain byte\n     * sequences that are not in the UTF-8 range.\n     * @param key The key\n     * @param value The value\n     *\n     * @throws if there is either a `data` or `binaryData` entry with the same key\n     */\n    addBinaryData(key, value) {\n        this.verifyKeyAvailable(key);\n        this._binaryData[key] = value;\n    }\n    /**\n     * The binary data associated with this config map.\n     *\n     * Returns a copy. To add data records, use `addBinaryData()` or `addData()`.\n     */\n    get binaryData() {\n        return { ...this._binaryData };\n    }\n    /**\n     * Adds a file to the ConfigMap.\n     * @param localFile The path to the local file\n     * @param key The ConfigMap key (default to the file name).\n     */\n    addFile(localFile, key) {\n        key = key !== null && key !== void 0 ? key : path.basename(localFile);\n        const value = configmap.readFileSync(localFile, 'utf-8');\n        this.addData(key, value);\n    }\n    /**\n     * Adds a directory to the ConfigMap.\n     * @param localDir A path to a local directory\n     * @param options Options\n     */\n    addDirectory(localDir, options = {}) {\n        var _b, _c;\n        const exclude = (_b = options.exclude) !== null && _b !== void 0 ? _b : [];\n        const shouldInclude = (file) => {\n            for (const pattern of exclude) {\n                const mm = new minimatch_1.Minimatch(pattern);\n                if (mm.match(file)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        const keyPrefix = (_c = options.keyPrefix) !== null && _c !== void 0 ? _c : '';\n        for (const file of configmap.readdirSync(localDir)) {\n            const filePath = path.join(localDir, file);\n            if (configmap.statSync(filePath).isDirectory()) {\n                continue;\n            }\n            if (!shouldInclude(file)) {\n                continue;\n            }\n            const relativeFilePath = keyPrefix + file;\n            this.addFile(filePath, relativeFilePath);\n        }\n    }\n    verifyKeyAvailable(key) {\n        if (key in this._data || key in this._binaryData) {\n            throw new Error(`unable to add a ConfigMap entry with key \"${key}\". It is already used`);\n        }\n    }\n    synthesizeData() {\n        return utils_1.undefinedIfEmpty(this._data);\n    }\n    synthesizeBinaryData() {\n        return utils_1.undefinedIfEmpty(this._binaryData);\n    }\n}\nexports.ConfigMap = ConfigMap;\n_a = JSII_RTTI_SYMBOL_1;\nConfigMap[_a] = { fqn: \"cdk8s-plus-22.ConfigMap\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a, _b, _c, _d, _e, _f;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Env = exports.extractContainerPorts = exports.EnvFrom = exports.Cpu = exports.MountPropagation = exports.Container = exports.ImagePullPolicy = exports.EnvValue = exports.ResourceFieldPaths = exports.EnvFieldPaths = exports.ContainerSecurityContext = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst k8s = require(\"./imports/k8s\");\nconst utils_1 = require(\"./utils\");\n/**\n * Container security attributes and settings.\n */\nclass ContainerSecurityContext {\n    constructor(props = {}) {\n        var _g, _h, _j;\n        this.ensureNonRoot = (_g = props.ensureNonRoot) !== null && _g !== void 0 ? _g : false;\n        this.privileged = (_h = props.privileged) !== null && _h !== void 0 ? _h : false;\n        this.readOnlyRootFilesystem = (_j = props.readOnlyRootFilesystem) !== null && _j !== void 0 ? _j : false;\n        this.user = props.user;\n        this.group = props.group;\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        return {\n            runAsGroup: this.group,\n            runAsUser: this.user,\n            runAsNonRoot: this.ensureNonRoot,\n            privileged: this.privileged,\n            readOnlyRootFilesystem: this.readOnlyRootFilesystem,\n        };\n    }\n}\nexports.ContainerSecurityContext = ContainerSecurityContext;\n_a = JSII_RTTI_SYMBOL_1;\nContainerSecurityContext[_a] = { fqn: \"cdk8s-plus-22.ContainerSecurityContext\", version: \"2.0.0-rc.2\" };\nvar EnvFieldPaths;\n(function (EnvFieldPaths) {\n    /**\n     * The name of the pod.\n     */\n    EnvFieldPaths[\"POD_NAME\"] = \"metadata.name\";\n    /**\n     * The namespace of the pod.\n     */\n    EnvFieldPaths[\"POD_NAMESPACE\"] = \"metadata.namespace\";\n    /**\n     * The uid of the pod.\n     */\n    EnvFieldPaths[\"POD_UID\"] = \"metadata.uid\";\n    /**\n     * The labels of the pod.\n     */\n    EnvFieldPaths[\"POD_LABEL\"] = \"metadata.labels\";\n    /**\n     * The annotations of the pod.\n     */\n    EnvFieldPaths[\"POD_ANNOTATION\"] = \"metadata.annotations\";\n    /**\n     * The ipAddress of the pod.\n     */\n    EnvFieldPaths[\"POD_IP\"] = \"status.podIP\";\n    /**\n     * The service account name of the pod.\n     */\n    EnvFieldPaths[\"SERVICE_ACCOUNT_NAME\"] = \"spec.serviceAccountName\";\n    /**\n     * The name of the node.\n     */\n    EnvFieldPaths[\"NODE_NAME\"] = \"spec.nodeName\";\n    /**\n     * The ipAddress of the node.\n     */\n    EnvFieldPaths[\"NODE_IP\"] = \"status.hostIP\";\n    /**\n     * The ipAddresess of the pod.\n     */\n    EnvFieldPaths[\"POD_IPS\"] = \"status.podIPs\";\n})(EnvFieldPaths = exports.EnvFieldPaths || (exports.EnvFieldPaths = {}));\nvar ResourceFieldPaths;\n(function (ResourceFieldPaths) {\n    /**\n     * CPU limit of the container.\n     */\n    ResourceFieldPaths[\"CPU_LIMIT\"] = \"limits.cpu\";\n    /**\n     * Memory limit of the container.\n     */\n    ResourceFieldPaths[\"MEMORY_LIMIT\"] = \"limits.memory\";\n    /**\n     * CPU request of the container.\n     */\n    ResourceFieldPaths[\"CPU_REQUEST\"] = \"requests.cpu\";\n    /**\n     * Memory request of the container.\n     */\n    ResourceFieldPaths[\"MEMORY_REQUEST\"] = \"requests.memory\";\n    /**\n     * Ephemeral storage limit of the container.\n     */\n    ResourceFieldPaths[\"STORAGE_LIMIT\"] = \"limits.ephemeral-storage\";\n    /**\n     * Ephemeral storage request of the container.\n     */\n    ResourceFieldPaths[\"STORAGE_REQUEST\"] = \"requests.ephemeral-storage\";\n})(ResourceFieldPaths = exports.ResourceFieldPaths || (exports.ResourceFieldPaths = {}));\n/**\n * Utility class for creating reading env values from various sources.\n */\nclass EnvValue {\n    constructor(value, valueFrom) {\n        this.value = value;\n        this.valueFrom = valueFrom;\n    }\n    /**\n     * Create a value by reading a specific key inside a config map.\n     *\n     * @param configMap - The config map.\n     * @param key - The key to extract the value from.\n     * @param options - Additional options.\n     */\n    static fromConfigMap(configMap, key, options = {}) {\n        const source = {\n            configMapKeyRef: {\n                name: configMap.name,\n                key,\n                optional: options.optional,\n            },\n        };\n        return new EnvValue(undefined, source);\n    }\n    /**\n     * Defines an environment value from a secret JSON value.\n     *\n     * @param secretValue The secret value (secrent + key)\n     * @param options Additional options\n     */\n    static fromSecretValue(secretValue, options = {}) {\n        const source = {\n            secretKeyRef: {\n                name: secretValue.secret.name,\n                key: secretValue.key,\n                optional: options.optional,\n            },\n        };\n        return new EnvValue(undefined, source);\n    }\n    /**\n     * Create a value from the given argument.\n     *\n     * @param value - The value.\n     */\n    static fromValue(value) {\n        return new EnvValue(value);\n    }\n    /**\n     *\n     * Create a value from a field reference.\n     *\n     * @param fieldPath: The field reference.\n     * @param options: Additional options.\n     */\n    static fromFieldRef(fieldPath, options = {}) {\n        let needsKey = false;\n        if (fieldPath === EnvFieldPaths.POD_LABEL || fieldPath === EnvFieldPaths.POD_ANNOTATION) {\n            needsKey = true;\n        }\n        if (needsKey && options.key === undefined) {\n            throw new Error(`${fieldPath} requires a key`);\n        }\n        const source = {\n            fieldRef: {\n                fieldPath: (`${fieldPath}` + (needsKey ? `['${options.key}']` : '')),\n                ...(options.apiVersion ? { apiVersion: options.apiVersion } : {}),\n            },\n        };\n        return new EnvValue(undefined, source);\n    }\n    /**\n     * Create a value from a resource.\n     *\n     * @param resource: Resource to select the value from.\n     * @param options: Additional options.\n     */\n    static fromResource(resource, options = {}) {\n        const source = {\n            resourceFieldRef: {\n                resource: `${resource}`,\n                ...(options.divisor ? { divisor: k8s.IntOrString.fromString(options.divisor) } : {}),\n                ...(options.container ? { containerName: options.container.name } : {}),\n            },\n        };\n        return new EnvValue(undefined, source);\n    }\n    /**\n     * Create a value from a key in the current process environment.\n     *\n     * @param key - The key to read.\n     * @param options - Additional options.\n     */\n    static fromProcess(key, options = {}) {\n        const value = process.env[key];\n        if (options.required && !value) {\n            throw new Error(`Missing ${key} env variable`);\n        }\n        return EnvValue.fromValue(value);\n    }\n}\nexports.EnvValue = EnvValue;\n_b = JSII_RTTI_SYMBOL_1;\nEnvValue[_b] = { fqn: \"cdk8s-plus-22.EnvValue\", version: \"2.0.0-rc.2\" };\nvar ImagePullPolicy;\n(function (ImagePullPolicy) {\n    /**\n     * Every time the kubelet launches a container, the kubelet queries the container image registry\n     * to resolve the name to an image digest. If the kubelet has a container image with that exact\n     * digest cached locally, the kubelet uses its cached image; otherwise, the kubelet downloads\n     * (pulls) the image with the resolved digest, and uses that image to launch the container.\n     *\n     * Default is Always if ImagePullPolicy is omitted and either the image tag is :latest or\n     * the image tag is omitted.\n     */\n    ImagePullPolicy[\"ALWAYS\"] = \"Always\";\n    /**\n     * The image is pulled only if it is not already present locally.\n     *\n     * Default is IfNotPresent if ImagePullPolicy is omitted and the image tag is present but\n     * not :latest\n     */\n    ImagePullPolicy[\"IF_NOT_PRESENT\"] = \"IfNotPresent\";\n    /**\n     * The image is assumed to exist locally. No attempt is made to pull the image.\n     */\n    ImagePullPolicy[\"NEVER\"] = \"Never\";\n})(ImagePullPolicy = exports.ImagePullPolicy || (exports.ImagePullPolicy = {}));\n/**\n * A single application container that you want to run within a pod.\n */\nclass Container {\n    constructor(props) {\n        var _g, _h, _j, _k, _l;\n        if (props instanceof Container) {\n            throw new Error('Attempted to construct a container from a Container object.');\n        }\n        this.name = (_g = props.name) !== null && _g !== void 0 ? _g : 'main';\n        this.image = props.image;\n        this.port = props.port;\n        this._command = props.command;\n        this._args = props.args;\n        this._readiness = props.readiness;\n        this._liveness = props.liveness;\n        this._startup = props.startup;\n        this._lifecycle = props.lifecycle;\n        this.resources = props.resources;\n        this.workingDir = props.workingDir;\n        this.mounts = (_h = props.volumeMounts) !== null && _h !== void 0 ? _h : [];\n        this.imagePullPolicy = (_j = props.imagePullPolicy) !== null && _j !== void 0 ? _j : ImagePullPolicy.ALWAYS;\n        this.securityContext = new ContainerSecurityContext(props.securityContext);\n        this.env = new Env((_k = props.envFrom) !== null && _k !== void 0 ? _k : [], (_l = props.envVariables) !== null && _l !== void 0 ? _l : {});\n    }\n    /**\n     * Entrypoint array (the command to execute when the container starts).\n     * @returns a copy of the entrypoint array, cannot be modified\n     */\n    get command() {\n        return this._command ? [...this._command] : undefined;\n    }\n    /**\n     * Arguments to the entrypoint.\n     *\n     * @returns a copy of the arguments array, cannot be modified.\n     */\n    get args() {\n        return this._args ? [...this._args] : undefined;\n    }\n    /**\n     * Mount a volume to a specific path so that it is accessible by the container.\n     * Every pod that is configured to use this container will autmoatically have access to the volume.\n     *\n     * @param path - The desired path in the container.\n     * @param storage - The storage to mount.\n     */\n    mount(path, storage, options = {}) {\n        this.mounts.push({ path, volume: storage.asVolume(), ...options });\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        var _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;\n        const volumeMounts = [];\n        for (const mount of this.mounts) {\n            volumeMounts.push({\n                name: mount.volume.name,\n                mountPath: mount.path,\n                readOnly: mount.readOnly,\n                mountPropagation: mount.propagation,\n                subPath: mount.subPath,\n                subPathExpr: mount.subPathExpr,\n            });\n        }\n        const ports = new Array();\n        if (this.port) {\n            ports.push({\n                containerPort: this.port,\n            });\n        }\n        // Resource requests and limits\n        const cpuLimit = (_j = (_h = (_g = this.resources) === null || _g === void 0 ? void 0 : _g.cpu) === null || _h === void 0 ? void 0 : _h.limit) === null || _j === void 0 ? void 0 : _j.amount;\n        const cpuRequest = (_m = (_l = (_k = this.resources) === null || _k === void 0 ? void 0 : _k.cpu) === null || _l === void 0 ? void 0 : _l.request) === null || _m === void 0 ? void 0 : _m.amount;\n        const memoryLimit = (_p = (_o = this.resources) === null || _o === void 0 ? void 0 : _o.memory) === null || _p === void 0 ? void 0 : _p.limit;\n        const memoryRequest = (_r = (_q = this.resources) === null || _q === void 0 ? void 0 : _q.memory) === null || _r === void 0 ? void 0 : _r.request;\n        const limits = {};\n        const requests = {};\n        if (cpuLimit) {\n            limits.cpu = k8s.Quantity.fromString(cpuLimit);\n        }\n        if (memoryLimit) {\n            limits.memory = k8s.Quantity.fromString(memoryLimit.toMebibytes().toString() + 'Mi');\n        }\n        if (cpuRequest) {\n            requests.cpu = k8s.Quantity.fromString(cpuRequest);\n        }\n        if (memoryRequest) {\n            requests.memory = k8s.Quantity.fromString(memoryRequest.toMebibytes().toString() + 'Mi');\n        }\n        let resourceRequirements = undefined;\n        if (Object.keys(limits).length > 0 || Object.keys(requests).length > 0) {\n            resourceRequirements = {\n                limits: limits,\n                requests: requests,\n            };\n        }\n        const env = this.env._toKube();\n        return {\n            name: this.name,\n            image: this.image,\n            imagePullPolicy: this.imagePullPolicy,\n            ports: utils_1.undefinedIfEmpty(ports),\n            volumeMounts: utils_1.undefinedIfEmpty(volumeMounts),\n            command: this.command,\n            args: this.args,\n            workingDir: this.workingDir,\n            env: env.variables,\n            envFrom: env.from,\n            readinessProbe: (_s = this._readiness) === null || _s === void 0 ? void 0 : _s._toKube(this),\n            livenessProbe: (_t = this._liveness) === null || _t === void 0 ? void 0 : _t._toKube(this),\n            startupProbe: (_u = this._startup) === null || _u === void 0 ? void 0 : _u._toKube(this),\n            lifecycle: this._lifecycle ? {\n                postStart: (_v = this._lifecycle.postStart) === null || _v === void 0 ? void 0 : _v._toKube(this),\n                preStop: (_w = this._lifecycle.preStop) === null || _w === void 0 ? void 0 : _w._toKube(this),\n            } : undefined,\n            resources: resourceRequirements,\n            securityContext: this.securityContext._toKube(),\n        };\n    }\n}\nexports.Container = Container;\n_c = JSII_RTTI_SYMBOL_1;\nContainer[_c] = { fqn: \"cdk8s-plus-22.Container\", version: \"2.0.0-rc.2\" };\nvar MountPropagation;\n(function (MountPropagation) {\n    /**\n     * This volume mount will not receive any subsequent mounts that are mounted\n     * to this volume or any of its subdirectories by the host. In similar\n     * fashion, no mounts created by the Container will be visible on the host.\n     *\n     * This is the default mode.\n     *\n     * This mode is equal to `private` mount propagation as described in the Linux\n     * kernel documentation\n     */\n    MountPropagation[\"NONE\"] = \"None\";\n    /**\n     * This volume mount will receive all subsequent mounts that are mounted to\n     * this volume or any of its subdirectories.\n     *\n     * In other words, if the host mounts anything inside the volume mount, the\n     * Container will see it mounted there.\n     *\n     * Similarly, if any Pod with Bidirectional mount propagation to the same\n     * volume mounts anything there, the Container with HostToContainer mount\n     * propagation will see it.\n     *\n     * This mode is equal to `rslave` mount propagation as described in the Linux\n     * kernel documentation\n     */\n    MountPropagation[\"HOST_TO_CONTAINER\"] = \"HostToContainer\";\n    /**\n     * This volume mount behaves the same the HostToContainer mount. In addition,\n     * all volume mounts created by the Container will be propagated back to the\n     * host and to all Containers of all Pods that use the same volume\n     *\n     * A typical use case for this mode is a Pod with a FlexVolume or CSI driver\n     * or a Pod that needs to mount something on the host using a hostPath volume.\n     *\n     * This mode is equal to `rshared` mount propagation as described in the Linux\n     * kernel documentation\n     *\n     * Caution: Bidirectional mount propagation can be dangerous. It can damage\n     * the host operating system and therefore it is allowed only in privileged\n     * Containers. Familiarity with Linux kernel behavior is strongly recommended.\n     * In addition, any volume mounts created by Containers in Pods must be\n     * destroyed (unmounted) by the Containers on termination.\n     *\n     */\n    MountPropagation[\"BIDIRECTIONAL\"] = \"Bidirectional\";\n})(MountPropagation = exports.MountPropagation || (exports.MountPropagation = {}));\n/**\n * Represents the amount of CPU.\n * The amount can be passed as millis or units.\n */\nclass Cpu {\n    constructor(amount) {\n        this.amount = amount;\n    }\n    static millis(amount) {\n        return new Cpu(amount + 'm');\n    }\n    static units(amount) {\n        return new Cpu(amount.toString());\n    }\n}\nexports.Cpu = Cpu;\n_d = JSII_RTTI_SYMBOL_1;\nCpu[_d] = { fqn: \"cdk8s-plus-22.Cpu\", version: \"2.0.0-rc.2\" };\n/**\n * A collection of env variables defined in other resources.\n */\nclass EnvFrom {\n    constructor(configMap, prefix, sec) {\n        this.configMap = configMap;\n        this.prefix = prefix;\n        this.sec = sec;\n    }\n    ;\n    /**\n     * @internal\n     */\n    _toKube() {\n        return {\n            configMapRef: this.configMap ? {\n                name: this.configMap.name,\n            } : undefined,\n            secretRef: this.sec ? {\n                name: this.sec.name,\n            } : undefined,\n            prefix: this.prefix,\n        };\n    }\n}\nexports.EnvFrom = EnvFrom;\n_e = JSII_RTTI_SYMBOL_1;\nEnvFrom[_e] = { fqn: \"cdk8s-plus-22.EnvFrom\", version: \"2.0.0-rc.2\" };\nfunction extractContainerPorts(selector) {\n    if (!selector) {\n        return [];\n    }\n    const ports = [];\n    // we don't use instanceof intentionally since it can create\n    // cyclic import problems.\n    const containers = selector.containers;\n    for (const con of containers !== null && containers !== void 0 ? containers : []) {\n        if (con.port) {\n            ports.push(con.port);\n        }\n    }\n    return ports;\n}\nexports.extractContainerPorts = extractContainerPorts;\n/**\n * Container environment variables.\n */\nclass Env {\n    constructor(sources, variables) {\n        this._sources = sources;\n        this._variables = variables;\n    }\n    /**\n     * Selects a ConfigMap to populate the environment variables with.\n     * The contents of the target ConfigMap's Data field will represent\n     * the key-value pairs as environment variables.\n     */\n    static fromConfigMap(configMap, prefix) {\n        return new EnvFrom(configMap, prefix, undefined);\n    }\n    /**\n     * Selects a Secret to populate the environment variables with.\n     * The contents of the target Secret's Data field will represent\n     * the key-value pairs as environment variables.\n     */\n    static fromSecret(secr) {\n        return new EnvFrom(undefined, undefined, secr);\n    }\n    /**\n     * Add a single variable by name and value.\n     * The variable value can come from various dynamic sources such a secrets of config maps.\n     * Use `EnvValue.fromXXX` to select sources.\n     */\n    addVariable(name, value) {\n        this._variables[name] = value;\n    }\n    /**\n     * The environment variables for this container.\n     * Returns a copy. To add environment variables use `container.env.addVariable()`.\n     */\n    get variables() {\n        return { ...this._variables };\n    }\n    /**\n     * Add a collection of variables by copying from another source.\n     * Use `Env.fromXXX` functions to select sources.\n     */\n    copyFrom(from) {\n        this._sources.push(from);\n    }\n    /**\n     * The list of sources used to populate the container environment,\n     * in addition to the `variables`.\n     *\n     * Returns a copy. To add a source use `container.env.copyFrom()`.\n     */\n    get sources() {\n        return [...this._sources];\n    }\n    renderEnv(env) {\n        const result = new Array();\n        for (const [name, v] of Object.entries(env)) {\n            result.push({\n                name,\n                value: v.value,\n                valueFrom: v.valueFrom,\n            });\n        }\n        return result;\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        return {\n            from: utils_1.undefinedIfEmpty(this._sources.map(s => s._toKube())),\n            variables: utils_1.undefinedIfEmpty(this.renderEnv(this._variables)),\n        };\n    }\n}\nexports.Env = Env;\n_f = JSII_RTTI_SYMBOL_1;\nEnv[_f] = { fqn: \"cdk8s-plus-22.Env\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLHFDQUFxQztBQUdyQyxtQ0FBMkM7QUErQzNDOztHQUVHO0FBQ0gsTUFBYSx3QkFBd0I7SUFRbkMsWUFBWSxRQUF1QyxFQUFFOztRQUNuRCxJQUFJLENBQUMsYUFBYSxTQUFHLEtBQUssQ0FBQyxhQUFhLG1DQUFJLEtBQUssQ0FBQztRQUNsRCxJQUFJLENBQUMsVUFBVSxTQUFHLEtBQUssQ0FBQyxVQUFVLG1DQUFJLEtBQUssQ0FBQztRQUM1QyxJQUFJLENBQUMsc0JBQXNCLFNBQUcsS0FBSyxDQUFDLHNCQUFzQixtQ0FBSSxLQUFLLENBQUM7UUFDcEUsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxPQUFPO1FBQ1osT0FBTztZQUNMLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSztZQUN0QixTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDcEIsWUFBWSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2hDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixzQkFBc0IsRUFBRSxJQUFJLENBQUMsc0JBQXNCO1NBQ3BELENBQUM7SUFDSixDQUFDOztBQTNCSCw0REE2QkM7OztBQUVELElBQVksYUFrRFg7QUFsREQsV0FBWSxhQUFhO0lBQ3ZCOztPQUVHO0lBQ0gsMkNBQTBCLENBQUE7SUFFMUI7O09BRUc7SUFDSCxxREFBb0MsQ0FBQTtJQUVwQzs7T0FFRztJQUNILHlDQUF3QixDQUFBO0lBRXhCOztPQUVHO0lBQ0gsOENBQTZCLENBQUE7SUFFN0I7O09BRUc7SUFDSCx3REFBdUMsQ0FBQTtJQUV2Qzs7T0FFRztJQUNILHdDQUF1QixDQUFBO0lBRXZCOztPQUVHO0lBQ0gsaUVBQWdELENBQUE7SUFFaEQ7O09BRUc7SUFDSCw0Q0FBMkIsQ0FBQTtJQUUzQjs7T0FFRztJQUNILDBDQUF5QixDQUFBO0lBRXpCOztPQUVHO0lBQ0gsMENBQXlCLENBQUE7QUFDM0IsQ0FBQyxFQWxEVyxhQUFhLEdBQWIscUJBQWEsS0FBYixxQkFBYSxRQWtEeEI7QUFFRCxJQUFZLGtCQThCWDtBQTlCRCxXQUFZLGtCQUFrQjtJQUM1Qjs7T0FFRztJQUNILDhDQUF3QixDQUFBO0lBRXhCOztPQUVHO0lBQ0gsb0RBQThCLENBQUE7SUFFOUI7O09BRUc7SUFDSCxrREFBNEIsQ0FBQTtJQUU1Qjs7T0FFRztJQUNILHdEQUFrQyxDQUFBO0lBRWxDOztPQUVHO0lBQ0gsZ0VBQTBDLENBQUE7SUFFMUM7O09BRUc7SUFDSCxvRUFBOEMsQ0FBQTtBQUNoRCxDQUFDLEVBOUJXLGtCQUFrQixHQUFsQiwwQkFBa0IsS0FBbEIsMEJBQWtCLFFBOEI3QjtBQXlFRDs7R0FFRztBQUNILE1BQWEsUUFBUTtJQStHbkIsWUFBb0MsS0FBVyxFQUFrQixTQUFlO1FBQTVDLFVBQUssR0FBTCxLQUFLLENBQU07UUFBa0IsY0FBUyxHQUFULFNBQVMsQ0FBTTtJQUFHLENBQUM7SUE3R3BGOzs7Ozs7T0FNRztJQUNJLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBK0IsRUFBRSxHQUFXLEVBQUUsVUFBd0MsRUFBRztRQUVuSCxNQUFNLE1BQU0sR0FBcUI7WUFDL0IsZUFBZSxFQUFFO2dCQUNmLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtnQkFDcEIsR0FBRztnQkFDSCxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7YUFDM0I7U0FDRixDQUFDO1FBQ0YsT0FBTyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLGVBQWUsQ0FBQyxXQUErQixFQUFFLFVBQXFDLEVBQUU7UUFDcEcsTUFBTSxNQUFNLEdBQXFCO1lBQy9CLFlBQVksRUFBRTtnQkFDWixJQUFJLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJO2dCQUM3QixHQUFHLEVBQUUsV0FBVyxDQUFDLEdBQUc7Z0JBQ3BCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUTthQUMzQjtTQUNGLENBQUM7UUFFRixPQUFPLElBQUksUUFBUSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBYTtRQUNuQyxPQUFPLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQXdCLEVBQUUsVUFBdUMsRUFBRTtRQUM1RixJQUFJLFFBQVEsR0FBWSxLQUFLLENBQUM7UUFFOUIsSUFBSSxTQUFTLEtBQUssYUFBYSxDQUFDLFNBQVMsSUFBSSxTQUFTLEtBQUssYUFBYSxDQUFDLGNBQWMsRUFBRTtZQUN2RixRQUFRLEdBQUcsSUFBSSxDQUFDO1NBQ2pCO1FBRUQsSUFBSSxRQUFRLElBQUksT0FBTyxDQUFDLEdBQUcsS0FBSyxTQUFTLEVBQUU7WUFDekMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLFNBQVMsaUJBQWlCLENBQUMsQ0FBQztTQUNoRDtRQUVELE1BQU0sTUFBTSxHQUFxQjtZQUMvQixRQUFRLEVBQUU7Z0JBQ1IsU0FBUyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNwRSxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7YUFDbEU7U0FDRixDQUFDO1FBRUYsT0FBTyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUE0QixFQUFFLFVBQXVDLEVBQUU7UUFDaEcsTUFBTSxNQUFNLEdBQXFCO1lBQy9CLGdCQUFnQixFQUFFO2dCQUNoQixRQUFRLEVBQUUsR0FBRyxRQUFRLEVBQUU7Z0JBQ3ZCLEdBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUNyRixHQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2FBQ3pFO1NBQ0YsQ0FBQztRQUVGLE9BQU8sSUFBSSxRQUFRLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBVyxFQUFFLFVBQXNDLEVBQUU7UUFFN0UsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUvQixJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLEdBQUcsZUFBZSxDQUFDLENBQUM7U0FDaEQ7UUFFRCxPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBTSxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7QUE3R0gsNEJBZ0hDOzs7QUFFRCxJQUFZLGVBd0JYO0FBeEJELFdBQVksZUFBZTtJQUN6Qjs7Ozs7Ozs7T0FRRztJQUNILG9DQUFpQixDQUFBO0lBRWpCOzs7OztPQUtHO0lBQ0gsa0RBQStCLENBQUE7SUFFL0I7O09BRUc7SUFDSCxrQ0FBZSxDQUFBO0FBQ2pCLENBQUMsRUF4QlcsZUFBZSxHQUFmLHVCQUFlLEtBQWYsdUJBQWUsUUF3QjFCO0FBcUtEOztHQUVHO0FBQ0gsTUFBYSxTQUFTO0lBdURwQixZQUFZLEtBQXFCOztRQUMvQixJQUFJLEtBQUssWUFBWSxTQUFTLEVBQUU7WUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO1NBQ2hGO1FBRUQsSUFBSSxDQUFDLElBQUksU0FBRyxLQUFLLENBQUMsSUFBSSxtQ0FBSSxNQUFNLENBQUM7UUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNsQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7UUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQzlCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNsQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQ25DLElBQUksQ0FBQyxNQUFNLFNBQUcsS0FBSyxDQUFDLFlBQVksbUNBQUksRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxlQUFlLFNBQUcsS0FBSyxDQUFDLGVBQWUsbUNBQUksZUFBZSxDQUFDLE1BQU0sQ0FBQztRQUN2RSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksd0JBQXdCLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFHLE9BQUMsS0FBSyxDQUFDLE9BQU8sbUNBQUksRUFBRSxRQUFFLEtBQUssQ0FBQyxZQUFZLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFXLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksS0FBSyxDQUFDLElBQVksRUFBRSxPQUF3QixFQUFFLFVBQXdCLEVBQUc7UUFDOUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxHQUFHLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTzs7UUFDWixNQUFNLFlBQVksR0FBc0IsRUFBRSxDQUFDO1FBRTNDLEtBQUssTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUMvQixZQUFZLENBQUMsSUFBSSxDQUFDO2dCQUNoQixJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJO2dCQUN2QixTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUk7Z0JBQ3JCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtnQkFDeEIsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLFdBQVc7Z0JBQ25DLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztnQkFDdEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO2FBQy9CLENBQUMsQ0FBQztTQUNKO1FBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQXFCLENBQUM7UUFFN0MsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDVCxhQUFhLEVBQUUsSUFBSSxDQUFDLElBQUk7YUFDekIsQ0FBQyxDQUFDO1NBQ0o7UUFFRCwrQkFBK0I7UUFDL0IsTUFBTSxRQUFRLHFCQUFHLElBQUksQ0FBQyxTQUFTLDBDQUFFLEdBQUcsMENBQUUsS0FBSywwQ0FBRSxNQUFNLENBQUM7UUFDcEQsTUFBTSxVQUFVLHFCQUFHLElBQUksQ0FBQyxTQUFTLDBDQUFFLEdBQUcsMENBQUUsT0FBTywwQ0FBRSxNQUFNLENBQUM7UUFDeEQsTUFBTSxXQUFXLGVBQUcsSUFBSSxDQUFDLFNBQVMsMENBQUUsTUFBTSwwQ0FBRSxLQUFLLENBQUM7UUFDbEQsTUFBTSxhQUFhLGVBQUcsSUFBSSxDQUFDLFNBQVMsMENBQUUsTUFBTSwwQ0FBRSxPQUFPLENBQUM7UUFFdEQsTUFBTSxNQUFNLEdBQW9DLEVBQUUsQ0FBQztRQUNuRCxNQUFNLFFBQVEsR0FBb0MsRUFBRSxDQUFDO1FBRXJELElBQUksUUFBUSxFQUFFO1lBQ1osTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNoRDtRQUNELElBQUksV0FBVyxFQUFFO1lBQ2YsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDdEY7UUFDRCxJQUFJLFVBQVUsRUFBRTtZQUNkLFFBQVEsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDcEQ7UUFDRCxJQUFJLGFBQWEsRUFBRTtZQUNqQixRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUMxRjtRQUVELElBQUksb0JBQW9CLEdBQXlDLFNBQVMsQ0FBQztRQUMzRSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEUsb0JBQW9CLEdBQUc7Z0JBQ3JCLE1BQU0sRUFBRSxNQUFNO2dCQUNkLFFBQVEsRUFBRSxRQUFRO2FBQ25CLENBQUM7U0FDSDtRQUVELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFL0IsT0FBTztZQUNMLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWU7WUFDckMsS0FBSyxFQUFFLHdCQUFnQixDQUFDLEtBQUssQ0FBQztZQUM5QixZQUFZLEVBQUUsd0JBQWdCLENBQUMsWUFBWSxDQUFDO1lBQzVDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztZQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsR0FBRyxFQUFFLEdBQUcsQ0FBQyxTQUFTO1lBQ2xCLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSTtZQUNqQixjQUFjLFFBQUUsSUFBSSxDQUFDLFVBQVUsMENBQUUsT0FBTyxDQUFDLElBQUksQ0FBQztZQUM5QyxhQUFhLFFBQUUsSUFBSSxDQUFDLFNBQVMsMENBQUUsT0FBTyxDQUFDLElBQUksQ0FBQztZQUM1QyxZQUFZLFFBQUUsSUFBSSxDQUFDLFFBQVEsMENBQUUsT0FBTyxDQUFDLElBQUksQ0FBQztZQUMxQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLFNBQVMsUUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsMENBQUUsT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDbkQsT0FBTyxRQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTywwQ0FBRSxPQUFPLENBQUMsSUFBSSxDQUFDO2FBQ2hELENBQUMsQ0FBQyxDQUFDLFNBQVM7WUFDYixTQUFTLEVBQUUsb0JBQW9CO1lBQy9CLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRTtTQUNoRCxDQUFDO0lBQ0osQ0FBQzs7QUF2TEgsOEJBd0xDOzs7QUE2REQsSUFBWSxnQkFnRFg7QUFoREQsV0FBWSxnQkFBZ0I7SUFDMUI7Ozs7Ozs7OztPQVNHO0lBQ0gsaUNBQWEsQ0FBQTtJQUViOzs7Ozs7Ozs7Ozs7O09BYUc7SUFDSCx5REFBcUMsQ0FBQTtJQUVyQzs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FpQkc7SUFDSCxtREFBK0IsQ0FBQTtBQUNqQyxDQUFDLEVBaERXLGdCQUFnQixHQUFoQix3QkFBZ0IsS0FBaEIsd0JBQWdCLFFBZ0QzQjtBQWtCRDs7O0dBR0c7QUFDSCxNQUFhLEdBQUc7SUFRZCxZQUFvQixNQUFjO1FBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFURCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQWM7UUFDMUIsT0FBTyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUNELE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBYztRQUN6QixPQUFPLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7O0FBTkgsa0JBV0M7OztBQVVEOztHQUVHO0FBQ0gsTUFBYSxPQUFPO0lBRWxCLFlBQ21CLFNBQWdDLEVBQ2hDLE1BQWUsRUFDZixHQUFvQjtRQUZwQixjQUFTLEdBQVQsU0FBUyxDQUF1QjtRQUNoQyxXQUFNLEdBQU4sTUFBTSxDQUFTO1FBQ2YsUUFBRyxHQUFILEdBQUcsQ0FBaUI7SUFBRyxDQUFDO0lBQUEsQ0FBQztJQUU1Qzs7T0FFRztJQUNJLE9BQU87UUFDWixPQUFPO1lBQ0wsWUFBWSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJO2FBQzFCLENBQUMsQ0FBQyxDQUFDLFNBQVM7WUFDYixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUk7YUFDcEIsQ0FBQyxDQUFDLENBQUMsU0FBUztZQUNiLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtTQUNwQixDQUFDO0lBQ0osQ0FBQzs7QUFwQkgsMEJBc0JDOzs7QUFFRCxTQUFnQixxQkFBcUIsQ0FBQyxRQUFjO0lBRWxELElBQUksQ0FBQyxRQUFRLEVBQUU7UUFBRSxPQUFPLEVBQUUsQ0FBQztLQUFFO0lBRTdCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUVqQiw0REFBNEQ7SUFDNUQsMEJBQTBCO0lBQzFCLE1BQU0sVUFBVSxHQUFpQixRQUFnQixDQUFDLFVBQVUsQ0FBQztJQUU3RCxLQUFLLE1BQU0sR0FBRyxJQUFJLFVBQVUsYUFBVixVQUFVLGNBQVYsVUFBVSxHQUFJLEVBQUUsRUFBRTtRQUNsQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUU7WUFDWixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0QjtLQUNGO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBakJELHNEQWlCQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxHQUFHO0lBdUJkLFlBQW1CLE9BQWtCLEVBQUUsU0FBdUM7UUFDNUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDOUIsQ0FBQztJQXhCRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUErQixFQUFFLE1BQWU7UUFDMUUsT0FBTyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFvQjtRQUMzQyxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQVVEOzs7O09BSUc7SUFDSSxXQUFXLENBQUMsSUFBWSxFQUFFLEtBQWU7UUFDOUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQVcsU0FBUztRQUNsQixPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFFBQVEsQ0FBQyxJQUFhO1FBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILElBQVcsT0FBTztRQUNoQixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVPLFNBQVMsQ0FBQyxHQUFpQztRQUNqRCxNQUFNLE1BQU0sR0FBRyxJQUFJLEtBQUssRUFBYyxDQUFDO1FBQ3ZDLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ1YsSUFBSTtnQkFDSixLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUs7Z0JBQ2QsU0FBUyxFQUFFLENBQUMsQ0FBQyxTQUFTO2FBQ3ZCLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTztRQUNaLE9BQU87WUFDTCxJQUFJLEVBQUUsd0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUMzRCxTQUFTLEVBQUUsd0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDN0QsQ0FBQztJQUNKLENBQUM7O0FBbkZILGtCQW9GQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpemUgYXMgY29udGFpbmVyIH0gZnJvbSAnY2RrOHMnO1xuaW1wb3J0ICogYXMgY29uZmlnbWFwIGZyb20gJy4vY29uZmlnLW1hcCc7XG5pbXBvcnQgKiBhcyBoYW5kbGVyIGZyb20gJy4vaGFuZGxlcic7XG5pbXBvcnQgKiBhcyBrOHMgZnJvbSAnLi9pbXBvcnRzL2s4cyc7XG5pbXBvcnQgKiBhcyBwcm9iZSBmcm9tICcuL3Byb2JlJztcbmltcG9ydCAqIGFzIHNlY3JldCBmcm9tICcuL3NlY3JldCc7XG5pbXBvcnQgeyB1bmRlZmluZWRJZkVtcHR5IH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgKiBhcyB2b2x1bWUgZnJvbSAnLi92b2x1bWUnO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGBDb250YWluZXJTZWN1cml0eUNvbnRleHRgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGFpbmVyU2VjdXJpdHlDb250ZXh0UHJvcHMge1xuXG4gIC8qKlxuICAgICogVGhlIFVJRCB0byBydW4gdGhlIGVudHJ5cG9pbnQgb2YgdGhlIGNvbnRhaW5lciBwcm9jZXNzLlxuICAgICpcbiAgICAqIEBkZWZhdWx0IC0gVXNlciBzcGVjaWZpZWQgaW4gaW1hZ2UgbWV0YWRhdGFcbiAgICAqL1xuICByZWFkb25seSB1c2VyPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgICogVGhlIEdJRCB0byBydW4gdGhlIGVudHJ5cG9pbnQgb2YgdGhlIGNvbnRhaW5lciBwcm9jZXNzLlxuICAgICpcbiAgICAqIEBkZWZhdWx0IC0gR3JvdXAgY29uZmlndXJlZCBieSBjb250YWluZXIgcnVudGltZVxuICAgICovXG4gIHJlYWRvbmx5IGdyb3VwPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIGNvbnRhaW5lciBtdXN0IHJ1biBhcyBhIG5vbi1yb290IHVzZXIuXG4gICAgKiBJZiB0cnVlLCB0aGUgS3ViZWxldCB3aWxsIHZhbGlkYXRlIHRoZSBpbWFnZSBhdCBydW50aW1lIHRvIGVuc3VyZSB0aGF0IGl0IGRvZXNcbiAgICAqIG5vdCBydW4gYXMgVUlEIDAgKHJvb3QpIGFuZCBmYWlsIHRvIHN0YXJ0IHRoZSBjb250YWluZXIgaWYgaXQgZG9lcy5cbiAgICAqXG4gICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICovXG4gIHJlYWRvbmx5IGVuc3VyZU5vblJvb3Q/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBSdW4gY29udGFpbmVyIGluIHByaXZpbGVnZWQgbW9kZS4gUHJvY2Vzc2VzIGluIHByaXZpbGVnZWQgY29udGFpbmVycyBhcmUgZXNzZW50aWFsbHkgZXF1aXZhbGVudCB0byByb290IG9uIHRoZSBob3N0LlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgcHJpdmlsZWdlZD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBjb250YWluZXIgaGFzIGEgcmVhZC1vbmx5IHJvb3QgZmlsZXN5c3RlbS5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IHJlYWRPbmx5Um9vdEZpbGVzeXN0ZW0/OiBib29sZWFuO1xuXG59XG5cbi8qKlxuICogQ29udGFpbmVyIHNlY3VyaXR5IGF0dHJpYnV0ZXMgYW5kIHNldHRpbmdzLlxuICovXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyU2VjdXJpdHlDb250ZXh0IHtcblxuICBwdWJsaWMgcmVhZG9ubHkgZW5zdXJlTm9uUm9vdDogYm9vbGVhbjtcbiAgcHVibGljIHJlYWRvbmx5IHByaXZpbGVnZWQ6IGJvb2xlYW47XG4gIHB1YmxpYyByZWFkb25seSByZWFkT25seVJvb3RGaWxlc3lzdGVtOiBib29sZWFuO1xuICBwdWJsaWMgcmVhZG9ubHkgdXNlcj86IG51bWJlcjtcbiAgcHVibGljIHJlYWRvbmx5IGdyb3VwPzogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBDb250YWluZXJTZWN1cml0eUNvbnRleHRQcm9wcyA9IHt9KSB7XG4gICAgdGhpcy5lbnN1cmVOb25Sb290ID0gcHJvcHMuZW5zdXJlTm9uUm9vdCA/PyBmYWxzZTtcbiAgICB0aGlzLnByaXZpbGVnZWQgPSBwcm9wcy5wcml2aWxlZ2VkID8/IGZhbHNlO1xuICAgIHRoaXMucmVhZE9ubHlSb290RmlsZXN5c3RlbSA9IHByb3BzLnJlYWRPbmx5Um9vdEZpbGVzeXN0ZW0gPz8gZmFsc2U7XG4gICAgdGhpcy51c2VyID0gcHJvcHMudXNlcjtcbiAgICB0aGlzLmdyb3VwID0gcHJvcHMuZ3JvdXA7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgX3RvS3ViZSgpOiBrOHMuU2VjdXJpdHlDb250ZXh0IHtcbiAgICByZXR1cm4ge1xuICAgICAgcnVuQXNHcm91cDogdGhpcy5ncm91cCxcbiAgICAgIHJ1bkFzVXNlcjogdGhpcy51c2VyLFxuICAgICAgcnVuQXNOb25Sb290OiB0aGlzLmVuc3VyZU5vblJvb3QsXG4gICAgICBwcml2aWxlZ2VkOiB0aGlzLnByaXZpbGVnZWQsXG4gICAgICByZWFkT25seVJvb3RGaWxlc3lzdGVtOiB0aGlzLnJlYWRPbmx5Um9vdEZpbGVzeXN0ZW0sXG4gICAgfTtcbiAgfVxuXG59XG5cbmV4cG9ydCBlbnVtIEVudkZpZWxkUGF0aHMge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIHBvZC5cbiAgICovXG4gIFBPRF9OQU1FID0gJ21ldGFkYXRhLm5hbWUnLFxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZXNwYWNlIG9mIHRoZSBwb2QuXG4gICAqL1xuICBQT0RfTkFNRVNQQUNFID0gJ21ldGFkYXRhLm5hbWVzcGFjZScsXG5cbiAgLyoqXG4gICAqIFRoZSB1aWQgb2YgdGhlIHBvZC5cbiAgICovXG4gIFBPRF9VSUQgPSAnbWV0YWRhdGEudWlkJyxcblxuICAvKipcbiAgICogVGhlIGxhYmVscyBvZiB0aGUgcG9kLlxuICAgKi9cbiAgUE9EX0xBQkVMID0gJ21ldGFkYXRhLmxhYmVscycsXG5cbiAgLyoqXG4gICAqIFRoZSBhbm5vdGF0aW9ucyBvZiB0aGUgcG9kLlxuICAgKi9cbiAgUE9EX0FOTk9UQVRJT04gPSAnbWV0YWRhdGEuYW5ub3RhdGlvbnMnLFxuXG4gIC8qKlxuICAgKiBUaGUgaXBBZGRyZXNzIG9mIHRoZSBwb2QuXG4gICAqL1xuICBQT0RfSVAgPSAnc3RhdHVzLnBvZElQJyxcblxuICAvKipcbiAgICogVGhlIHNlcnZpY2UgYWNjb3VudCBuYW1lIG9mIHRoZSBwb2QuXG4gICAqL1xuICBTRVJWSUNFX0FDQ09VTlRfTkFNRSA9ICdzcGVjLnNlcnZpY2VBY2NvdW50TmFtZScsXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBub2RlLlxuICAgKi9cbiAgTk9ERV9OQU1FID0gJ3NwZWMubm9kZU5hbWUnLFxuXG4gIC8qKlxuICAgKiBUaGUgaXBBZGRyZXNzIG9mIHRoZSBub2RlLlxuICAgKi9cbiAgTk9ERV9JUCA9ICdzdGF0dXMuaG9zdElQJyxcblxuICAvKipcbiAgICogVGhlIGlwQWRkcmVzZXNzIG9mIHRoZSBwb2QuXG4gICAqL1xuICBQT0RfSVBTID0gJ3N0YXR1cy5wb2RJUHMnLFxufVxuXG5leHBvcnQgZW51bSBSZXNvdXJjZUZpZWxkUGF0aHMge1xuICAvKipcbiAgICogQ1BVIGxpbWl0IG9mIHRoZSBjb250YWluZXIuXG4gICAqL1xuICBDUFVfTElNSVQgPSAnbGltaXRzLmNwdScsXG5cbiAgLyoqXG4gICAqIE1lbW9yeSBsaW1pdCBvZiB0aGUgY29udGFpbmVyLlxuICAgKi9cbiAgTUVNT1JZX0xJTUlUID0gJ2xpbWl0cy5tZW1vcnknLFxuXG4gIC8qKlxuICAgKiBDUFUgcmVxdWVzdCBvZiB0aGUgY29udGFpbmVyLlxuICAgKi9cbiAgQ1BVX1JFUVVFU1QgPSAncmVxdWVzdHMuY3B1JyxcblxuICAvKipcbiAgICogTWVtb3J5IHJlcXVlc3Qgb2YgdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIE1FTU9SWV9SRVFVRVNUID0gJ3JlcXVlc3RzLm1lbW9yeScsXG5cbiAgLyoqXG4gICAqIEVwaGVtZXJhbCBzdG9yYWdlIGxpbWl0IG9mIHRoZSBjb250YWluZXIuXG4gICAqL1xuICBTVE9SQUdFX0xJTUlUID0gJ2xpbWl0cy5lcGhlbWVyYWwtc3RvcmFnZScsXG5cbiAgLyoqXG4gICAqIEVwaGVtZXJhbCBzdG9yYWdlIHJlcXVlc3Qgb2YgdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIFNUT1JBR0VfUkVRVUVTVCA9ICdyZXF1ZXN0cy5lcGhlbWVyYWwtc3RvcmFnZScsXG59XG5cbi8qKlxuICogT3B0aW9ucyB0byBzcGVjaWZ5IGFuIGVudmlvbm1lbnQgdmFyaWFibGUgdmFsdWUgZnJvbSBhIENvbmZpZ01hcCBrZXkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRW52VmFsdWVGcm9tQ29uZmlnTWFwT3B0aW9ucyB7XG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hldGhlciB0aGUgQ29uZmlnTWFwIG9yIGl0cyBrZXkgbXVzdCBiZSBkZWZpbmVkLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgb3B0aW9uYWw/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIE9wdGlvbnMgdG8gc3BlY2lmeSBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZSB2YWx1ZSBmcm9tIGEgU2VjcmV0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVudlZhbHVlRnJvbVNlY3JldE9wdGlvbnMge1xuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoZXRoZXIgdGhlIFNlY3JldCBvciBpdHMga2V5IG11c3QgYmUgZGVmaW5lZC5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IG9wdGlvbmFsPzogYm9vbGVhbjtcblxufVxuXG4vKipcbiAqIE9wdGlvbnMgdG8gc3BlY2lmeSBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZSB2YWx1ZSBmcm9tIHRoZSBwcm9jZXNzIGVudmlyb25tZW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVudlZhbHVlRnJvbVByb2Nlc3NPcHRpb25zIHtcblxuICAvKipcbiAgICogU3BlY2lmeSB3aGV0aGVyIHRoZSBrZXkgbXVzdCBleGlzdCBpbiB0aGUgZW52aXJvbm1lbnQuXG4gICAqIElmIHRoaXMgaXMgc2V0IHRvIHRydWUsIGFuZCB0aGUga2V5IGRvZXMgbm90IGV4aXN0LCBhbiBlcnJvciB3aWxsIHRocm93bi5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IHJlcXVpcmVkPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBPcHRpb25zIHRvIHNwZWNpZnkgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUgdmFsdWUgZnJvbSBhIGZpZWxkIHJlZmVyZW5jZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFbnZWYWx1ZUZyb21GaWVsZFJlZk9wdGlvbnMge1xuICAvKipcbiAgICogVmVyc2lvbiBvZiB0aGUgc2NoZW1hIHRoZSBGaWVsZFBhdGggaXMgd3JpdHRlbiBpbiB0ZXJtcyBvZi5cbiAgICovXG4gIHJlYWRvbmx5IGFwaVZlcnNpb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBrZXkgdG8gc2VsZWN0IHRoZSBwb2QgbGFiZWwgb3IgYW5ub3RhdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IGtleT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBPcHRpb25zIHRvIHNwZWNpZnkgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUgdmFsdWUgZnJvbSBhIHJlc291cmNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVudlZhbHVlRnJvbVJlc291cmNlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVyIHRvIHNlbGVjdCB0aGUgdmFsdWUgZnJvbS5cbiAgICovXG4gIHJlYWRvbmx5IGNvbnRhaW5lcj86IENvbnRhaW5lcjtcblxuICAvKipcbiAgICogVGhlIG91dHB1dCBmb3JtYXQgb2YgdGhlIGV4cG9zZWQgcmVzb3VyY2UuXG4gICAqL1xuICByZWFkb25seSBkaXZpc29yPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFV0aWxpdHkgY2xhc3MgZm9yIGNyZWF0aW5nIHJlYWRpbmcgZW52IHZhbHVlcyBmcm9tIHZhcmlvdXMgc291cmNlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEVudlZhbHVlIHtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgdmFsdWUgYnkgcmVhZGluZyBhIHNwZWNpZmljIGtleSBpbnNpZGUgYSBjb25maWcgbWFwLlxuICAgKlxuICAgKiBAcGFyYW0gY29uZmlnTWFwIC0gVGhlIGNvbmZpZyBtYXAuXG4gICAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IHRvIGV4dHJhY3QgdGhlIHZhbHVlIGZyb20uXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tQ29uZmlnTWFwKGNvbmZpZ01hcDogY29uZmlnbWFwLklDb25maWdNYXAsIGtleTogc3RyaW5nLCBvcHRpb25zOiBFbnZWYWx1ZUZyb21Db25maWdNYXBPcHRpb25zID0geyB9KTogRW52VmFsdWUge1xuXG4gICAgY29uc3Qgc291cmNlOiBrOHMuRW52VmFyU291cmNlID0ge1xuICAgICAgY29uZmlnTWFwS2V5UmVmOiB7XG4gICAgICAgIG5hbWU6IGNvbmZpZ01hcC5uYW1lLFxuICAgICAgICBrZXksXG4gICAgICAgIG9wdGlvbmFsOiBvcHRpb25zLm9wdGlvbmFsLFxuICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBuZXcgRW52VmFsdWUodW5kZWZpbmVkLCBzb3VyY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZXMgYW4gZW52aXJvbm1lbnQgdmFsdWUgZnJvbSBhIHNlY3JldCBKU09OIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0gc2VjcmV0VmFsdWUgVGhlIHNlY3JldCB2YWx1ZSAoc2VjcmVudCArIGtleSlcbiAgICogQHBhcmFtIG9wdGlvbnMgQWRkaXRpb25hbCBvcHRpb25zXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21TZWNyZXRWYWx1ZShzZWNyZXRWYWx1ZTogc2VjcmV0LlNlY3JldFZhbHVlLCBvcHRpb25zOiBFbnZWYWx1ZUZyb21TZWNyZXRPcHRpb25zID0ge30pOiBFbnZWYWx1ZSB7XG4gICAgY29uc3Qgc291cmNlOiBrOHMuRW52VmFyU291cmNlID0ge1xuICAgICAgc2VjcmV0S2V5UmVmOiB7XG4gICAgICAgIG5hbWU6IHNlY3JldFZhbHVlLnNlY3JldC5uYW1lLFxuICAgICAgICBrZXk6IHNlY3JldFZhbHVlLmtleSxcbiAgICAgICAgb3B0aW9uYWw6IG9wdGlvbnMub3B0aW9uYWwsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IEVudlZhbHVlKHVuZGVmaW5lZCwgc291cmNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSB2YWx1ZSBmcm9tIHRoZSBnaXZlbiBhcmd1bWVudC5cbiAgICpcbiAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tVmFsdWUodmFsdWU6IHN0cmluZyk6IEVudlZhbHVlIHtcbiAgICByZXR1cm4gbmV3IEVudlZhbHVlKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBDcmVhdGUgYSB2YWx1ZSBmcm9tIGEgZmllbGQgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAcGFyYW0gZmllbGRQYXRoOiBUaGUgZmllbGQgcmVmZXJlbmNlLlxuICAgKiBAcGFyYW0gb3B0aW9uczogQWRkaXRpb25hbCBvcHRpb25zLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tRmllbGRSZWYoZmllbGRQYXRoOiBFbnZGaWVsZFBhdGhzLCBvcHRpb25zOiBFbnZWYWx1ZUZyb21GaWVsZFJlZk9wdGlvbnMgPSB7fSk6IEVudlZhbHVlIHtcbiAgICBsZXQgbmVlZHNLZXk6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGlmIChmaWVsZFBhdGggPT09IEVudkZpZWxkUGF0aHMuUE9EX0xBQkVMIHx8IGZpZWxkUGF0aCA9PT0gRW52RmllbGRQYXRocy5QT0RfQU5OT1RBVElPTikge1xuICAgICAgbmVlZHNLZXkgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChuZWVkc0tleSAmJiBvcHRpb25zLmtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZmllbGRQYXRofSByZXF1aXJlcyBhIGtleWApO1xuICAgIH1cblxuICAgIGNvbnN0IHNvdXJjZTogazhzLkVudlZhclNvdXJjZSA9IHtcbiAgICAgIGZpZWxkUmVmOiB7XG4gICAgICAgIGZpZWxkUGF0aDogKGAke2ZpZWxkUGF0aH1gICsgKG5lZWRzS2V5ID8gYFsnJHtvcHRpb25zLmtleX0nXWAgOiAnJykpLFxuICAgICAgICAuLi4ob3B0aW9ucy5hcGlWZXJzaW9uID8geyBhcGlWZXJzaW9uOiBvcHRpb25zLmFwaVZlcnNpb24gfSA6IHt9KSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgRW52VmFsdWUodW5kZWZpbmVkLCBzb3VyY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHZhbHVlIGZyb20gYSByZXNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIHJlc291cmNlOiBSZXNvdXJjZSB0byBzZWxlY3QgdGhlIHZhbHVlIGZyb20uXG4gICAqIEBwYXJhbSBvcHRpb25zOiBBZGRpdGlvbmFsIG9wdGlvbnMuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21SZXNvdXJjZShyZXNvdXJjZTogUmVzb3VyY2VGaWVsZFBhdGhzLCBvcHRpb25zOiBFbnZWYWx1ZUZyb21SZXNvdXJjZU9wdGlvbnMgPSB7fSk6IEVudlZhbHVlIHtcbiAgICBjb25zdCBzb3VyY2U6IGs4cy5FbnZWYXJTb3VyY2UgPSB7XG4gICAgICByZXNvdXJjZUZpZWxkUmVmOiB7XG4gICAgICAgIHJlc291cmNlOiBgJHtyZXNvdXJjZX1gLFxuICAgICAgICAuLi4gKG9wdGlvbnMuZGl2aXNvciA/IHsgZGl2aXNvcjogazhzLkludE9yU3RyaW5nLmZyb21TdHJpbmcob3B0aW9ucy5kaXZpc29yKSB9IDoge30pLFxuICAgICAgICAuLi4gKG9wdGlvbnMuY29udGFpbmVyID8geyBjb250YWluZXJOYW1lOiBvcHRpb25zLmNvbnRhaW5lci5uYW1lIH0gOiB7fSksXG4gICAgICB9LFxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IEVudlZhbHVlKHVuZGVmaW5lZCwgc291cmNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSB2YWx1ZSBmcm9tIGEga2V5IGluIHRoZSBjdXJyZW50IHByb2Nlc3MgZW52aXJvbm1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IHRvIHJlYWQuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tUHJvY2VzcyhrZXk6IHN0cmluZywgb3B0aW9uczogRW52VmFsdWVGcm9tUHJvY2Vzc09wdGlvbnMgPSB7fSk6IEVudlZhbHVlIHtcblxuICAgIGNvbnN0IHZhbHVlID0gcHJvY2Vzcy5lbnZba2V5XTtcblxuICAgIGlmIChvcHRpb25zLnJlcXVpcmVkICYmICF2YWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nICR7a2V5fSBlbnYgdmFyaWFibGVgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gRW52VmFsdWUuZnJvbVZhbHVlKHZhbHVlISk7XG4gIH1cblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB2YWx1ZT86IGFueSwgcHVibGljIHJlYWRvbmx5IHZhbHVlRnJvbT86IGFueSkge31cbn1cblxuZXhwb3J0IGVudW0gSW1hZ2VQdWxsUG9saWN5IHtcbiAgLyoqXG4gICAqIEV2ZXJ5IHRpbWUgdGhlIGt1YmVsZXQgbGF1bmNoZXMgYSBjb250YWluZXIsIHRoZSBrdWJlbGV0IHF1ZXJpZXMgdGhlIGNvbnRhaW5lciBpbWFnZSByZWdpc3RyeVxuICAgKiB0byByZXNvbHZlIHRoZSBuYW1lIHRvIGFuIGltYWdlIGRpZ2VzdC4gSWYgdGhlIGt1YmVsZXQgaGFzIGEgY29udGFpbmVyIGltYWdlIHdpdGggdGhhdCBleGFjdFxuICAgKiBkaWdlc3QgY2FjaGVkIGxvY2FsbHksIHRoZSBrdWJlbGV0IHVzZXMgaXRzIGNhY2hlZCBpbWFnZTsgb3RoZXJ3aXNlLCB0aGUga3ViZWxldCBkb3dubG9hZHNcbiAgICogKHB1bGxzKSB0aGUgaW1hZ2Ugd2l0aCB0aGUgcmVzb2x2ZWQgZGlnZXN0LCBhbmQgdXNlcyB0aGF0IGltYWdlIHRvIGxhdW5jaCB0aGUgY29udGFpbmVyLlxuICAgKlxuICAgKiBEZWZhdWx0IGlzIEFsd2F5cyBpZiBJbWFnZVB1bGxQb2xpY3kgaXMgb21pdHRlZCBhbmQgZWl0aGVyIHRoZSBpbWFnZSB0YWcgaXMgOmxhdGVzdCBvclxuICAgKiB0aGUgaW1hZ2UgdGFnIGlzIG9taXR0ZWQuXG4gICAqL1xuICBBTFdBWVMgPSAnQWx3YXlzJyxcblxuICAvKipcbiAgICogVGhlIGltYWdlIGlzIHB1bGxlZCBvbmx5IGlmIGl0IGlzIG5vdCBhbHJlYWR5IHByZXNlbnQgbG9jYWxseS5cbiAgICpcbiAgICogRGVmYXVsdCBpcyBJZk5vdFByZXNlbnQgaWYgSW1hZ2VQdWxsUG9saWN5IGlzIG9taXR0ZWQgYW5kIHRoZSBpbWFnZSB0YWcgaXMgcHJlc2VudCBidXRcbiAgICogbm90IDpsYXRlc3RcbiAgICovXG4gIElGX05PVF9QUkVTRU5UID0gJ0lmTm90UHJlc2VudCcsXG5cbiAgLyoqXG4gICAqIFRoZSBpbWFnZSBpcyBhc3N1bWVkIHRvIGV4aXN0IGxvY2FsbHkuIE5vIGF0dGVtcHQgaXMgbWFkZSB0byBwdWxsIHRoZSBpbWFnZS5cbiAgICovXG4gIE5FVkVSID0gJ05ldmVyJyxcbn1cblxuLyoqXG4gKiBDb250YWluZXIgbGlmZWN5Y2xlIHByb3BlcnRpZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGFpbmVyTGlmZWN5Y2xlIHtcblxuICAvKipcbiAgICogVGhpcyBob29rIGlzIGV4ZWN1dGVkIGltbWVkaWF0ZWx5IGFmdGVyIGEgY29udGFpbmVyIGlzIGNyZWF0ZWQuIEhvd2V2ZXIsXG4gICAqIHRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHRoZSBob29rIHdpbGwgZXhlY3V0ZSBiZWZvcmUgdGhlIGNvbnRhaW5lciBFTlRSWVBPSU5ULlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIHBvc3Qgc3RhcnQgaGFuZGxlci5cbiAgICovXG4gIHJlYWRvbmx5IHBvc3RTdGFydD86IGhhbmRsZXIuSGFuZGxlcjtcblxuICAvKipcbiAgICogVGhpcyBob29rIGlzIGNhbGxlZCBpbW1lZGlhdGVseSBiZWZvcmUgYSBjb250YWluZXIgaXMgdGVybWluYXRlZCBkdWUgdG8gYW4gQVBJIHJlcXVlc3Qgb3IgbWFuYWdlbWVudFxuICAgKiBldmVudCBzdWNoIGFzIGEgbGl2ZW5lc3Mvc3RhcnR1cCBwcm9iZSBmYWlsdXJlLCBwcmVlbXB0aW9uLCByZXNvdXJjZSBjb250ZW50aW9uIGFuZCBvdGhlcnMuXG4gICAqIEEgY2FsbCB0byB0aGUgUHJlU3RvcCBob29rIGZhaWxzIGlmIHRoZSBjb250YWluZXIgaXMgYWxyZWFkeSBpbiBhIHRlcm1pbmF0ZWQgb3IgY29tcGxldGVkIHN0YXRlXG4gICAqIGFuZCB0aGUgaG9vayBtdXN0IGNvbXBsZXRlIGJlZm9yZSB0aGUgVEVSTSBzaWduYWwgdG8gc3RvcCB0aGUgY29udGFpbmVyIGNhbiBiZSBzZW50LlxuICAgKiBUaGUgUG9kJ3MgdGVybWluYXRpb24gZ3JhY2UgcGVyaW9kIGNvdW50ZG93biBiZWdpbnMgYmVmb3JlIHRoZSBQcmVTdG9wIGhvb2sgaXMgZXhlY3V0ZWQsXG4gICAqIHNvIHJlZ2FyZGxlc3Mgb2YgdGhlIG91dGNvbWUgb2YgdGhlIGhhbmRsZXIsIHRoZSBjb250YWluZXIgd2lsbCBldmVudHVhbGx5IHRlcm1pbmF0ZVxuICAgKiB3aXRoaW4gdGhlIFBvZCdzIHRlcm1pbmF0aW9uIGdyYWNlIHBlcmlvZC4gTm8gcGFyYW1ldGVycyBhcmUgcGFzc2VkIHRvIHRoZSBoYW5kbGVyLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL3dvcmtsb2Fkcy9wb2RzL3BvZC1saWZlY3ljbGUvI3BvZC10ZXJtaW5hdGlvblxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIHByZSBzdG9wIGhhbmRsZXIuXG4gICAqL1xuICByZWFkb25seSBwcmVTdG9wPzogaGFuZGxlci5IYW5kbGVyO1xuXG59XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgY3JlYXRpbmcgYSBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGFpbmVyUHJvcHMge1xuXG4gIC8qKlxuICAgKiBEb2NrZXIgaW1hZ2UgbmFtZS5cbiAgICovXG4gIHJlYWRvbmx5IGltYWdlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGNvbnRhaW5lciBzcGVjaWZpZWQgYXMgYSBETlNfTEFCRUwuIEVhY2ggY29udGFpbmVyIGluIGEgcG9kIG11c3QgaGF2ZSBhIHVuaXF1ZSBuYW1lIChETlNfTEFCRUwpLiBDYW5ub3QgYmUgdXBkYXRlZC5cbiAgICpcbiAgICogQGRlZmF1bHQgJ21haW4nXG4gICAqL1xuICByZWFkb25seSBuYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcG9ydCB0byBleHBvc2Ugb24gdGhlIHBvZCdzIElQIGFkZHJlc3MuIFRoaXMgbXVzdCBiZSBhIHZhbGlkIHBvcnQgbnVtYmVyLCAwIDwgeCA8IDY1NTM2LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIHBvcnQgaXMgZXhwb3NlZC5cbiAgICovXG4gIHJlYWRvbmx5IHBvcnQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEVudHJ5cG9pbnQgYXJyYXkuIE5vdCBleGVjdXRlZCB3aXRoaW4gYSBzaGVsbC4gVGhlIGRvY2tlciBpbWFnZSdzIEVOVFJZUE9JTlQgaXMgdXNlZCBpZiB0aGlzIGlzIG5vdCBwcm92aWRlZC4gVmFyaWFibGUgcmVmZXJlbmNlcyAkKFZBUl9OQU1FKSBhcmUgZXhwYW5kZWQgdXNpbmcgdGhlIGNvbnRhaW5lcidzIGVudmlyb25tZW50LlxuICAgKiBJZiBhIHZhcmlhYmxlIGNhbm5vdCBiZSByZXNvbHZlZCwgdGhlIHJlZmVyZW5jZSBpbiB0aGUgaW5wdXQgc3RyaW5nIHdpbGwgYmUgdW5jaGFuZ2VkLiBUaGUgJChWQVJfTkFNRSkgc3ludGF4IGNhbiBiZSBlc2NhcGVkIHdpdGggYSBkb3VibGUgJCQsIGllOiAkJChWQVJfTkFNRSkuXG4gICAqIEVzY2FwZWQgcmVmZXJlbmNlcyB3aWxsIG5ldmVyIGJlIGV4cGFuZGVkLCByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIHZhcmlhYmxlIGV4aXN0cyBvciBub3QuIENhbm5vdCBiZSB1cGRhdGVkLlxuICAgKiBNb3JlIGluZm86IGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL3Rhc2tzL2luamVjdC1kYXRhLWFwcGxpY2F0aW9uL2RlZmluZS1jb21tYW5kLWFyZ3VtZW50LWNvbnRhaW5lci8jcnVubmluZy1hLWNvbW1hbmQtaW4tYS1zaGVsbFxuICAgKlxuICAgKiBAZGVmYXVsdCAtIFRoZSBkb2NrZXIgaW1hZ2UncyBFTlRSWVBPSU5ULlxuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZD86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBBcmd1bWVudHMgdG8gdGhlIGVudHJ5cG9pbnQuIFRoZSBkb2NrZXIgaW1hZ2UncyBDTUQgaXMgdXNlZCBpZiBgY29tbWFuZGAgaXNcbiAgICogbm90IHByb3ZpZGVkLlxuICAgKlxuICAgKiBWYXJpYWJsZSByZWZlcmVuY2VzICQoVkFSX05BTUUpIGFyZSBleHBhbmRlZCB1c2luZyB0aGUgY29udGFpbmVyJ3NcbiAgICogZW52aXJvbm1lbnQuIElmIGEgdmFyaWFibGUgY2Fubm90IGJlIHJlc29sdmVkLCB0aGUgcmVmZXJlbmNlIGluIHRoZSBpbnB1dFxuICAgKiBzdHJpbmcgd2lsbCBiZSB1bmNoYW5nZWQuIFRoZSAkKFZBUl9OQU1FKSBzeW50YXggY2FuIGJlIGVzY2FwZWQgd2l0aCBhXG4gICAqIGRvdWJsZSAkJCwgaWU6ICQkKFZBUl9OQU1FKS4gRXNjYXBlZCByZWZlcmVuY2VzIHdpbGwgbmV2ZXIgYmUgZXhwYW5kZWQsXG4gICAqIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGUgdmFyaWFibGUgZXhpc3RzIG9yIG5vdC5cbiAgICpcbiAgICogQ2Fubm90IGJlIHVwZGF0ZWQuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvdGFza3MvaW5qZWN0LWRhdGEtYXBwbGljYXRpb24vZGVmaW5lLWNvbW1hbmQtYXJndW1lbnQtY29udGFpbmVyLyNydW5uaW5nLWEtY29tbWFuZC1pbi1hLXNoZWxsXG4gICAqIEBkZWZhdWx0IFtdXG4gICAqL1xuICByZWFkb25seSBhcmdzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIENvbnRhaW5lcidzIHdvcmtpbmcgZGlyZWN0b3J5LiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgY29udGFpbmVyIHJ1bnRpbWUncyBkZWZhdWx0IHdpbGwgYmUgdXNlZCwgd2hpY2ggbWlnaHQgYmUgY29uZmlndXJlZCBpbiB0aGUgY29udGFpbmVyIGltYWdlLiBDYW5ub3QgYmUgdXBkYXRlZC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBUaGUgY29udGFpbmVyIHJ1bnRpbWUncyBkZWZhdWx0LlxuICAgKi9cbiAgcmVhZG9ubHkgd29ya2luZ0Rpcj86IHN0cmluZztcblxuICAvKipcbiAgICogRW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIHNldCBpbiB0aGUgY29udGFpbmVyLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAgICovXG4gIHJlYWRvbmx5IGVudlZhcmlhYmxlcz86IHsgW25hbWU6IHN0cmluZ106IEVudlZhbHVlIH07XG5cbiAgLyoqXG4gICAqIExpc3Qgb2Ygc291cmNlcyB0byBwb3B1bGF0ZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgaW4gdGhlIGNvbnRhaW5lci5cbiAgICogV2hlbiBhIGtleSBleGlzdHMgaW4gbXVsdGlwbGUgc291cmNlcywgdGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aFxuICAgKiB0aGUgbGFzdCBzb3VyY2Ugd2lsbCB0YWtlIHByZWNlZGVuY2UuIFZhbHVlcyBkZWZpbmVkIGJ5IHRoZSBgZW52VmFyaWFibGVzYCBwcm9wZXJ0eVxuICAgKiB3aXRoIGEgZHVwbGljYXRlIGtleSB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBObyBzb3VyY2VzLlxuICAgKi9cbiAgcmVhZG9ubHkgZW52RnJvbT86IEVudkZyb21bXTtcblxuICAvKipcbiAgICogUG9kIHZvbHVtZXMgdG8gbW91bnQgaW50byB0aGUgY29udGFpbmVyJ3MgZmlsZXN5c3RlbS4gQ2Fubm90IGJlIHVwZGF0ZWQuXG4gICAqL1xuICByZWFkb25seSB2b2x1bWVNb3VudHM/OiBWb2x1bWVNb3VudFtdO1xuXG4gIC8qKlxuICAgKiBJbWFnZSBwdWxsIHBvbGljeSBmb3IgdGhpcyBjb250YWluZXJcbiAgICogQGRlZmF1bHQgSW1hZ2VQdWxsUG9saWN5LkFMV0FZU1xuICAgKi9cbiAgcmVhZG9ubHkgaW1hZ2VQdWxsUG9saWN5PzogSW1hZ2VQdWxsUG9saWN5O1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZW4gdGhlIGNvbnRhaW5lciBpcyByZWFkeSB0byBzZXJ2ZSB0cmFmZmljLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIG5vIHJlYWRpbmVzcyBwcm9iZSBpcyBkZWZpbmVkXG4gICAqL1xuICByZWFkb25seSByZWFkaW5lc3M/OiBwcm9iZS5Qcm9iZTtcblxuICAvKipcbiAgICogUGVyaW9kaWMgcHJvYmUgb2YgY29udGFpbmVyIGxpdmVuZXNzLiBDb250YWluZXIgd2lsbCBiZSByZXN0YXJ0ZWQgaWYgdGhlIHByb2JlIGZhaWxzLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIG5vIGxpdmVuZXNzIHByb2JlIGlzIGRlZmluZWRcbiAgICovXG4gIHJlYWRvbmx5IGxpdmVuZXNzPzogcHJvYmUuUHJvYmU7XG5cbiAgLyoqXG4gICAqIFN0YXJ0dXBQcm9iZSBpbmRpY2F0ZXMgdGhhdCB0aGUgUG9kIGhhcyBzdWNjZXNzZnVsbHkgaW5pdGlhbGl6ZWQuXG4gICAqIElmIHNwZWNpZmllZCwgbm8gb3RoZXIgcHJvYmVzIGFyZSBleGVjdXRlZCB1bnRpbCB0aGlzIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHlcbiAgICpcbiAgICogQGRlZmF1bHQgLSBubyBzdGFydHVwIHByb2JlIGlzIGRlZmluZWQuXG4gICAqL1xuICByZWFkb25seSBzdGFydHVwPzogcHJvYmUuUHJvYmU7XG5cbiAgLyoqXG4gICAqIERlc2NyaWJlcyBhY3Rpb25zIHRoYXQgdGhlIG1hbmFnZW1lbnQgc3lzdGVtIHNob3VsZCB0YWtlIGluIHJlc3BvbnNlIHRvIGNvbnRhaW5lciBsaWZlY3ljbGUgZXZlbnRzLlxuICAgKi9cbiAgcmVhZG9ubHkgbGlmZWN5Y2xlPzogQ29udGFpbmVyTGlmZWN5Y2xlO1xuXG4gIC8qKlxuICAgKiBDb21wdXRlIHJlc291cmNlcyAoQ1BVIGFuZCBtZW1vcnkgcmVxdWVzdHMgYW5kIGxpbWl0cykgcmVxdWlyZWQgYnkgdGhlIGNvbnRhaW5lclxuICAgKiBAc2VlIGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL2NvbmZpZ3VyYXRpb24vbWFuYWdlLXJlc291cmNlcy1jb250YWluZXJzL1xuICAgKi9cbiAgcmVhZG9ubHkgcmVzb3VyY2VzPzogQ29udGFpbmVyUmVzb3VyY2VzO1xuXG4gIC8qKlxuICAgKiBTZWN1cml0eUNvbnRleHQgZGVmaW5lcyB0aGUgc2VjdXJpdHkgb3B0aW9ucyB0aGUgY29udGFpbmVyIHNob3VsZCBiZSBydW4gd2l0aC5cbiAgICogSWYgc2V0LCB0aGUgZmllbGRzIG92ZXJyaWRlIGVxdWl2YWxlbnQgZmllbGRzIG9mIHRoZSBwb2QncyBzZWN1cml0eSBjb250ZXh0LlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL3Rhc2tzL2NvbmZpZ3VyZS1wb2QtY29udGFpbmVyL3NlY3VyaXR5LWNvbnRleHQvXG4gICAqIEBkZWZhdWx0XG4gICAqXG4gICAqICAgZW5zdXJlTm9uUm9vdDogZmFsc2VcbiAgICogICBwcml2aWxlZ2VkOiBmYWxzZVxuICAgKiAgIHJlYWRPbmx5Um9vdEZpbGVzeXN0ZW06IGZhbHNlXG4gICAqL1xuICByZWFkb25seSBzZWN1cml0eUNvbnRleHQ/OiBDb250YWluZXJTZWN1cml0eUNvbnRleHRQcm9wcztcbn1cblxuLyoqXG4gKiBBIHNpbmdsZSBhcHBsaWNhdGlvbiBjb250YWluZXIgdGhhdCB5b3Ugd2FudCB0byBydW4gd2l0aGluIGEgcG9kLlxuICovXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyIHtcblxuICAvKipcbiAgICogVGhlIHBvcnQgdGhpcyBjb250YWluZXIgZXhwb3Nlcy5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBwb3J0PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBWb2x1bWUgbW91bnRzIGNvbmZpZ3VyZWQgZm9yIHRoaXMgY29udGFpbmVyLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IG1vdW50czogVm9sdW1lTW91bnRbXTtcblxuICAvKipcbiAgICogSW1hZ2UgcHVsbCBwb2xpY3kgZm9yIHRoaXMgY29udGFpbmVyXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgaW1hZ2VQdWxsUG9saWN5OiBJbWFnZVB1bGxQb2xpY3k7XG5cbiAgLyoqXG4gICAqIFRoZSBjb250YWluZXIgaW1hZ2UuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgaW1hZ2U6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB3b3JraW5nIGRpcmVjdG9yeSBpbnNpZGUgdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSB3b3JraW5nRGlyPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb21wdXRlIHJlc291cmNlcyAoQ1BVIGFuZCBtZW1vcnkgcmVxdWVzdHMgYW5kIGxpbWl0cykgcmVxdWlyZWQgYnkgdGhlIGNvbnRhaW5lclxuICAgKiBAc2VlIGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL2NvbmZpZ3VyYXRpb24vbWFuYWdlLXJlc291cmNlcy1jb250YWluZXJzL1xuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHJlc291cmNlcz86IENvbnRhaW5lclJlc291cmNlcztcblxuICAvKipcbiAgICogVGhlIHNlY3VyaXR5IGNvbnRleHQgb2YgdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBzZWN1cml0eUNvbnRleHQ6IENvbnRhaW5lclNlY3VyaXR5Q29udGV4dDtcblxuICAvKipcbiAgICogVGhlIGVudmlyb25tZW50IG9mIHRoZSBjb250YWluZXIuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgZW52OiBFbnY7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfY29tbWFuZD86IHJlYWRvbmx5IHN0cmluZ1tdO1xuICBwcml2YXRlIHJlYWRvbmx5IF9hcmdzPzogcmVhZG9ubHkgc3RyaW5nW107XG4gIHByaXZhdGUgcmVhZG9ubHkgX3JlYWRpbmVzcz86IHByb2JlLlByb2JlO1xuICBwcml2YXRlIHJlYWRvbmx5IF9saXZlbmVzcz86IHByb2JlLlByb2JlO1xuICBwcml2YXRlIHJlYWRvbmx5IF9zdGFydHVwPzogcHJvYmUuUHJvYmU7XG4gIHByaXZhdGUgcmVhZG9ubHkgX2xpZmVjeWNsZT86IENvbnRhaW5lckxpZmVjeWNsZTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogQ29udGFpbmVyUHJvcHMpIHtcbiAgICBpZiAocHJvcHMgaW5zdGFuY2VvZiBDb250YWluZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGVkIHRvIGNvbnN0cnVjdCBhIGNvbnRhaW5lciBmcm9tIGEgQ29udGFpbmVyIG9iamVjdC4nKTtcbiAgICB9XG5cbiAgICB0aGlzLm5hbWUgPSBwcm9wcy5uYW1lID8/ICdtYWluJztcbiAgICB0aGlzLmltYWdlID0gcHJvcHMuaW1hZ2U7XG4gICAgdGhpcy5wb3J0ID0gcHJvcHMucG9ydDtcbiAgICB0aGlzLl9jb21tYW5kID0gcHJvcHMuY29tbWFuZDtcbiAgICB0aGlzLl9hcmdzID0gcHJvcHMuYXJncztcbiAgICB0aGlzLl9yZWFkaW5lc3MgPSBwcm9wcy5yZWFkaW5lc3M7XG4gICAgdGhpcy5fbGl2ZW5lc3MgPSBwcm9wcy5saXZlbmVzcztcbiAgICB0aGlzLl9zdGFydHVwID0gcHJvcHMuc3RhcnR1cDtcbiAgICB0aGlzLl9saWZlY3ljbGUgPSBwcm9wcy5saWZlY3ljbGU7XG4gICAgdGhpcy5yZXNvdXJjZXMgPSBwcm9wcy5yZXNvdXJjZXM7XG4gICAgdGhpcy53b3JraW5nRGlyID0gcHJvcHMud29ya2luZ0RpcjtcbiAgICB0aGlzLm1vdW50cyA9IHByb3BzLnZvbHVtZU1vdW50cyA/PyBbXTtcbiAgICB0aGlzLmltYWdlUHVsbFBvbGljeSA9IHByb3BzLmltYWdlUHVsbFBvbGljeSA/PyBJbWFnZVB1bGxQb2xpY3kuQUxXQVlTO1xuICAgIHRoaXMuc2VjdXJpdHlDb250ZXh0ID0gbmV3IENvbnRhaW5lclNlY3VyaXR5Q29udGV4dChwcm9wcy5zZWN1cml0eUNvbnRleHQpO1xuICAgIHRoaXMuZW52ID0gbmV3IEVudihwcm9wcy5lbnZGcm9tID8/IFtdLCBwcm9wcy5lbnZWYXJpYWJsZXMgPz8ge30pO1xuICB9XG5cbiAgLyoqXG4gICAqIEVudHJ5cG9pbnQgYXJyYXkgKHRoZSBjb21tYW5kIHRvIGV4ZWN1dGUgd2hlbiB0aGUgY29udGFpbmVyIHN0YXJ0cykuXG4gICAqIEByZXR1cm5zIGEgY29weSBvZiB0aGUgZW50cnlwb2ludCBhcnJheSwgY2Fubm90IGJlIG1vZGlmaWVkXG4gICAqL1xuICBwdWJsaWMgZ2V0IGNvbW1hbmQoKTogc3RyaW5nW10gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9jb21tYW5kID8gWy4uLnRoaXMuX2NvbW1hbmRdIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEFyZ3VtZW50cyB0byB0aGUgZW50cnlwb2ludC5cbiAgICpcbiAgICogQHJldHVybnMgYSBjb3B5IG9mIHRoZSBhcmd1bWVudHMgYXJyYXksIGNhbm5vdCBiZSBtb2RpZmllZC5cbiAgICovXG4gIHB1YmxpYyBnZXQgYXJncygpOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX2FyZ3MgPyBbLi4udGhpcy5fYXJnc10gOiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogTW91bnQgYSB2b2x1bWUgdG8gYSBzcGVjaWZpYyBwYXRoIHNvIHRoYXQgaXQgaXMgYWNjZXNzaWJsZSBieSB0aGUgY29udGFpbmVyLlxuICAgKiBFdmVyeSBwb2QgdGhhdCBpcyBjb25maWd1cmVkIHRvIHVzZSB0aGlzIGNvbnRhaW5lciB3aWxsIGF1dG1vYXRpY2FsbHkgaGF2ZSBhY2Nlc3MgdG8gdGhlIHZvbHVtZS5cbiAgICpcbiAgICogQHBhcmFtIHBhdGggLSBUaGUgZGVzaXJlZCBwYXRoIGluIHRoZSBjb250YWluZXIuXG4gICAqIEBwYXJhbSBzdG9yYWdlIC0gVGhlIHN0b3JhZ2UgdG8gbW91bnQuXG4gICAqL1xuICBwdWJsaWMgbW91bnQocGF0aDogc3RyaW5nLCBzdG9yYWdlOiB2b2x1bWUuSVN0b3JhZ2UsIG9wdGlvbnM6IE1vdW50T3B0aW9ucyA9IHsgfSkge1xuICAgIHRoaXMubW91bnRzLnB1c2goeyBwYXRoLCB2b2x1bWU6IHN0b3JhZ2UuYXNWb2x1bWUoKSwgLi4ub3B0aW9ucyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHB1YmxpYyBfdG9LdWJlKCk6IGs4cy5Db250YWluZXIge1xuICAgIGNvbnN0IHZvbHVtZU1vdW50czogazhzLlZvbHVtZU1vdW50W10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgbW91bnQgb2YgdGhpcy5tb3VudHMpIHtcbiAgICAgIHZvbHVtZU1vdW50cy5wdXNoKHtcbiAgICAgICAgbmFtZTogbW91bnQudm9sdW1lLm5hbWUsXG4gICAgICAgIG1vdW50UGF0aDogbW91bnQucGF0aCxcbiAgICAgICAgcmVhZE9ubHk6IG1vdW50LnJlYWRPbmx5LFxuICAgICAgICBtb3VudFByb3BhZ2F0aW9uOiBtb3VudC5wcm9wYWdhdGlvbixcbiAgICAgICAgc3ViUGF0aDogbW91bnQuc3ViUGF0aCxcbiAgICAgICAgc3ViUGF0aEV4cHI6IG1vdW50LnN1YlBhdGhFeHByLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgcG9ydHMgPSBuZXcgQXJyYXk8azhzLkNvbnRhaW5lclBvcnQ+KCk7XG5cbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBwb3J0cy5wdXNoKHtcbiAgICAgICAgY29udGFpbmVyUG9ydDogdGhpcy5wb3J0LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmVzb3VyY2UgcmVxdWVzdHMgYW5kIGxpbWl0c1xuICAgIGNvbnN0IGNwdUxpbWl0ID0gdGhpcy5yZXNvdXJjZXM/LmNwdT8ubGltaXQ/LmFtb3VudDtcbiAgICBjb25zdCBjcHVSZXF1ZXN0ID0gdGhpcy5yZXNvdXJjZXM/LmNwdT8ucmVxdWVzdD8uYW1vdW50O1xuICAgIGNvbnN0IG1lbW9yeUxpbWl0ID0gdGhpcy5yZXNvdXJjZXM/Lm1lbW9yeT8ubGltaXQ7XG4gICAgY29uc3QgbWVtb3J5UmVxdWVzdCA9IHRoaXMucmVzb3VyY2VzPy5tZW1vcnk/LnJlcXVlc3Q7XG5cbiAgICBjb25zdCBsaW1pdHM6IHsgW2tleTogc3RyaW5nXTogazhzLlF1YW50aXR5IH0gPSB7fTtcbiAgICBjb25zdCByZXF1ZXN0czogeyBba2V5OiBzdHJpbmddOiBrOHMuUXVhbnRpdHkgfSA9IHt9O1xuXG4gICAgaWYgKGNwdUxpbWl0KSB7XG4gICAgICBsaW1pdHMuY3B1ID0gazhzLlF1YW50aXR5LmZyb21TdHJpbmcoY3B1TGltaXQpO1xuICAgIH1cbiAgICBpZiAobWVtb3J5TGltaXQpIHtcbiAgICAgIGxpbWl0cy5tZW1vcnkgPSBrOHMuUXVhbnRpdHkuZnJvbVN0cmluZyhtZW1vcnlMaW1pdC50b01lYmlieXRlcygpLnRvU3RyaW5nKCkgKyAnTWknKTtcbiAgICB9XG4gICAgaWYgKGNwdVJlcXVlc3QpIHtcbiAgICAgIHJlcXVlc3RzLmNwdSA9IGs4cy5RdWFudGl0eS5mcm9tU3RyaW5nKGNwdVJlcXVlc3QpO1xuICAgIH1cbiAgICBpZiAobWVtb3J5UmVxdWVzdCkge1xuICAgICAgcmVxdWVzdHMubWVtb3J5ID0gazhzLlF1YW50aXR5LmZyb21TdHJpbmcobWVtb3J5UmVxdWVzdC50b01lYmlieXRlcygpLnRvU3RyaW5nKCkgKyAnTWknKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzb3VyY2VSZXF1aXJlbWVudHM6IGs4cy5SZXNvdXJjZVJlcXVpcmVtZW50cyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoT2JqZWN0LmtleXMobGltaXRzKS5sZW5ndGggPiAwIHx8IE9iamVjdC5rZXlzKHJlcXVlc3RzKS5sZW5ndGggPiAwKSB7XG4gICAgICByZXNvdXJjZVJlcXVpcmVtZW50cyA9IHtcbiAgICAgICAgbGltaXRzOiBsaW1pdHMsXG4gICAgICAgIHJlcXVlc3RzOiByZXF1ZXN0cyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgZW52ID0gdGhpcy5lbnYuX3RvS3ViZSgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIGltYWdlOiB0aGlzLmltYWdlLFxuICAgICAgaW1hZ2VQdWxsUG9saWN5OiB0aGlzLmltYWdlUHVsbFBvbGljeSxcbiAgICAgIHBvcnRzOiB1bmRlZmluZWRJZkVtcHR5KHBvcnRzKSxcbiAgICAgIHZvbHVtZU1vdW50czogdW5kZWZpbmVkSWZFbXB0eSh2b2x1bWVNb3VudHMpLFxuICAgICAgY29tbWFuZDogdGhpcy5jb21tYW5kLFxuICAgICAgYXJnczogdGhpcy5hcmdzLFxuICAgICAgd29ya2luZ0RpcjogdGhpcy53b3JraW5nRGlyLFxuICAgICAgZW52OiBlbnYudmFyaWFibGVzLFxuICAgICAgZW52RnJvbTogZW52LmZyb20sXG4gICAgICByZWFkaW5lc3NQcm9iZTogdGhpcy5fcmVhZGluZXNzPy5fdG9LdWJlKHRoaXMpLFxuICAgICAgbGl2ZW5lc3NQcm9iZTogdGhpcy5fbGl2ZW5lc3M/Ll90b0t1YmUodGhpcyksXG4gICAgICBzdGFydHVwUHJvYmU6IHRoaXMuX3N0YXJ0dXA/Ll90b0t1YmUodGhpcyksXG4gICAgICBsaWZlY3ljbGU6IHRoaXMuX2xpZmVjeWNsZSA/IHtcbiAgICAgICAgcG9zdFN0YXJ0OiB0aGlzLl9saWZlY3ljbGUucG9zdFN0YXJ0Py5fdG9LdWJlKHRoaXMpLFxuICAgICAgICBwcmVTdG9wOiB0aGlzLl9saWZlY3ljbGUucHJlU3RvcD8uX3RvS3ViZSh0aGlzKSxcbiAgICAgIH0gOiB1bmRlZmluZWQsXG4gICAgICByZXNvdXJjZXM6IHJlc291cmNlUmVxdWlyZW1lbnRzLFxuICAgICAgc2VjdXJpdHlDb250ZXh0OiB0aGlzLnNlY3VyaXR5Q29udGV4dC5fdG9LdWJlKCksXG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIG1vdW50cy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNb3VudE9wdGlvbnMge1xuICAvKipcbiAgICogRGV0ZXJtaW5lcyBob3cgbW91bnRzIGFyZSBwcm9wYWdhdGVkIGZyb20gdGhlIGhvc3QgdG8gY29udGFpbmVyIGFuZCB0aGVcbiAgICogb3RoZXIgd2F5IGFyb3VuZC4gV2hlbiBub3Qgc2V0LCBNb3VudFByb3BhZ2F0aW9uTm9uZSBpcyB1c2VkLlxuICAgKlxuICAgKiBNb3VudCBwcm9wYWdhdGlvbiBhbGxvd3MgZm9yIHNoYXJpbmcgdm9sdW1lcyBtb3VudGVkIGJ5IGEgQ29udGFpbmVyIHRvXG4gICAqIG90aGVyIENvbnRhaW5lcnMgaW4gdGhlIHNhbWUgUG9kLCBvciBldmVuIHRvIG90aGVyIFBvZHMgb24gdGhlIHNhbWUgbm9kZS5cbiAgICpcbiAgICogQGRlZmF1bHQgTW91bnRQcm9wYWdhdGlvbi5OT05FXG4gICAqL1xuICByZWFkb25seSBwcm9wYWdhdGlvbj86IE1vdW50UHJvcGFnYXRpb247XG5cbiAgLyoqXG4gICAqIE1vdW50ZWQgcmVhZC1vbmx5IGlmIHRydWUsIHJlYWQtd3JpdGUgb3RoZXJ3aXNlIChmYWxzZSBvciB1bnNwZWNpZmllZCkuXG4gICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgcmVhZE9ubHk/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBQYXRoIHdpdGhpbiB0aGUgdm9sdW1lIGZyb20gd2hpY2ggdGhlIGNvbnRhaW5lcidzIHZvbHVtZSBzaG91bGQgYmUgbW91bnRlZC4pLlxuICAgKlxuICAgKiBAZGVmYXVsdCBcIlwiIHRoZSB2b2x1bWUncyByb290XG4gICAqL1xuICByZWFkb25seSBzdWJQYXRoPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBFeHBhbmRlZCBwYXRoIHdpdGhpbiB0aGUgdm9sdW1lIGZyb20gd2hpY2ggdGhlIGNvbnRhaW5lcidzIHZvbHVtZSBzaG91bGQgYmVcbiAgICogbW91bnRlZC4gQmVoYXZlcyBzaW1pbGFybHkgdG8gU3ViUGF0aCBidXQgZW52aXJvbm1lbnQgdmFyaWFibGUgcmVmZXJlbmNlc1xuICAgKiAkKFZBUl9OQU1FKSBhcmUgZXhwYW5kZWQgdXNpbmcgdGhlIGNvbnRhaW5lcidzIGVudmlyb25tZW50LiBEZWZhdWx0cyB0byBcIlwiXG4gICAqICh2b2x1bWUncyByb290KS5cbiAgICpcbiAgICogYHN1YlBhdGhFeHByYCBhbmQgYHN1YlBhdGhgIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IFwiXCIgdm9sdW1lJ3Mgcm9vdC5cbiAgICovXG4gIHJlYWRvbmx5IHN1YlBhdGhFeHByPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIE1vdW50IGEgdm9sdW1lIGZyb20gdGhlIHBvZCB0byB0aGUgY29udGFpbmVyLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFZvbHVtZU1vdW50IGV4dGVuZHMgTW91bnRPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSB2b2x1bWUgdG8gbW91bnQuXG4gICAqL1xuICByZWFkb25seSB2b2x1bWU6IHZvbHVtZS5Wb2x1bWU7XG5cbiAgLyoqXG4gICAqIFBhdGggd2l0aGluIHRoZSBjb250YWluZXIgYXQgd2hpY2ggdGhlIHZvbHVtZSBzaG91bGQgYmUgbW91bnRlZC4gTXVzdCBub3RcbiAgICogY29udGFpbiAnOicuXG4gICAqL1xuICByZWFkb25seSBwYXRoOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBlbnVtIE1vdW50UHJvcGFnYXRpb24ge1xuICAvKipcbiAgICogVGhpcyB2b2x1bWUgbW91bnQgd2lsbCBub3QgcmVjZWl2ZSBhbnkgc3Vic2VxdWVudCBtb3VudHMgdGhhdCBhcmUgbW91bnRlZFxuICAgKiB0byB0aGlzIHZvbHVtZSBvciBhbnkgb2YgaXRzIHN1YmRpcmVjdG9yaWVzIGJ5IHRoZSBob3N0LiBJbiBzaW1pbGFyXG4gICAqIGZhc2hpb24sIG5vIG1vdW50cyBjcmVhdGVkIGJ5IHRoZSBDb250YWluZXIgd2lsbCBiZSB2aXNpYmxlIG9uIHRoZSBob3N0LlxuICAgKlxuICAgKiBUaGlzIGlzIHRoZSBkZWZhdWx0IG1vZGUuXG4gICAqXG4gICAqIFRoaXMgbW9kZSBpcyBlcXVhbCB0byBgcHJpdmF0ZWAgbW91bnQgcHJvcGFnYXRpb24gYXMgZGVzY3JpYmVkIGluIHRoZSBMaW51eFxuICAgKiBrZXJuZWwgZG9jdW1lbnRhdGlvblxuICAgKi9cbiAgTk9ORSA9ICdOb25lJyxcblxuICAvKipcbiAgICogVGhpcyB2b2x1bWUgbW91bnQgd2lsbCByZWNlaXZlIGFsbCBzdWJzZXF1ZW50IG1vdW50cyB0aGF0IGFyZSBtb3VudGVkIHRvXG4gICAqIHRoaXMgdm9sdW1lIG9yIGFueSBvZiBpdHMgc3ViZGlyZWN0b3JpZXMuXG4gICAqXG4gICAqIEluIG90aGVyIHdvcmRzLCBpZiB0aGUgaG9zdCBtb3VudHMgYW55dGhpbmcgaW5zaWRlIHRoZSB2b2x1bWUgbW91bnQsIHRoZVxuICAgKiBDb250YWluZXIgd2lsbCBzZWUgaXQgbW91bnRlZCB0aGVyZS5cbiAgICpcbiAgICogU2ltaWxhcmx5LCBpZiBhbnkgUG9kIHdpdGggQmlkaXJlY3Rpb25hbCBtb3VudCBwcm9wYWdhdGlvbiB0byB0aGUgc2FtZVxuICAgKiB2b2x1bWUgbW91bnRzIGFueXRoaW5nIHRoZXJlLCB0aGUgQ29udGFpbmVyIHdpdGggSG9zdFRvQ29udGFpbmVyIG1vdW50XG4gICAqIHByb3BhZ2F0aW9uIHdpbGwgc2VlIGl0LlxuICAgKlxuICAgKiBUaGlzIG1vZGUgaXMgZXF1YWwgdG8gYHJzbGF2ZWAgbW91bnQgcHJvcGFnYXRpb24gYXMgZGVzY3JpYmVkIGluIHRoZSBMaW51eFxuICAgKiBrZXJuZWwgZG9jdW1lbnRhdGlvblxuICAgKi9cbiAgSE9TVF9UT19DT05UQUlORVIgPSAnSG9zdFRvQ29udGFpbmVyJyxcblxuICAvKipcbiAgICogVGhpcyB2b2x1bWUgbW91bnQgYmVoYXZlcyB0aGUgc2FtZSB0aGUgSG9zdFRvQ29udGFpbmVyIG1vdW50LiBJbiBhZGRpdGlvbixcbiAgICogYWxsIHZvbHVtZSBtb3VudHMgY3JlYXRlZCBieSB0aGUgQ29udGFpbmVyIHdpbGwgYmUgcHJvcGFnYXRlZCBiYWNrIHRvIHRoZVxuICAgKiBob3N0IGFuZCB0byBhbGwgQ29udGFpbmVycyBvZiBhbGwgUG9kcyB0aGF0IHVzZSB0aGUgc2FtZSB2b2x1bWVcbiAgICpcbiAgICogQSB0eXBpY2FsIHVzZSBjYXNlIGZvciB0aGlzIG1vZGUgaXMgYSBQb2Qgd2l0aCBhIEZsZXhWb2x1bWUgb3IgQ1NJIGRyaXZlclxuICAgKiBvciBhIFBvZCB0aGF0IG5lZWRzIHRvIG1vdW50IHNvbWV0aGluZyBvbiB0aGUgaG9zdCB1c2luZyBhIGhvc3RQYXRoIHZvbHVtZS5cbiAgICpcbiAgICogVGhpcyBtb2RlIGlzIGVxdWFsIHRvIGByc2hhcmVkYCBtb3VudCBwcm9wYWdhdGlvbiBhcyBkZXNjcmliZWQgaW4gdGhlIExpbnV4XG4gICAqIGtlcm5lbCBkb2N1bWVudGF0aW9uXG4gICAqXG4gICAqIENhdXRpb246IEJpZGlyZWN0aW9uYWwgbW91bnQgcHJvcGFnYXRpb24gY2FuIGJlIGRhbmdlcm91cy4gSXQgY2FuIGRhbWFnZVxuICAgKiB0aGUgaG9zdCBvcGVyYXRpbmcgc3lzdGVtIGFuZCB0aGVyZWZvcmUgaXQgaXMgYWxsb3dlZCBvbmx5IGluIHByaXZpbGVnZWRcbiAgICogQ29udGFpbmVycy4gRmFtaWxpYXJpdHkgd2l0aCBMaW51eCBrZXJuZWwgYmVoYXZpb3IgaXMgc3Ryb25nbHkgcmVjb21tZW5kZWQuXG4gICAqIEluIGFkZGl0aW9uLCBhbnkgdm9sdW1lIG1vdW50cyBjcmVhdGVkIGJ5IENvbnRhaW5lcnMgaW4gUG9kcyBtdXN0IGJlXG4gICAqIGRlc3Ryb3llZCAodW5tb3VudGVkKSBieSB0aGUgQ29udGFpbmVycyBvbiB0ZXJtaW5hdGlvbi5cbiAgICpcbiAgICovXG4gIEJJRElSRUNUSU9OQUwgPSAnQmlkaXJlY3Rpb25hbCcsXG59XG5cbi8qKlxuICogQ1BVIGFuZCBtZW1vcnkgY29tcHV0ZSByZXNvdXJjZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb250YWluZXJSZXNvdXJjZXMge1xuICByZWFkb25seSBjcHU6IENwdVJlc291cmNlcztcbiAgcmVhZG9ubHkgbWVtb3J5OiBNZW1vcnlSZXNvdXJjZXM7XG59XG5cbi8qKlxuICogQ1BVIHJlcXVlc3QgYW5kIGxpbWl0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ3B1UmVzb3VyY2VzIHtcbiAgcmVhZG9ubHkgcmVxdWVzdDogQ3B1O1xuICByZWFkb25seSBsaW1pdDogQ3B1O1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGFtb3VudCBvZiBDUFUuXG4gKiBUaGUgYW1vdW50IGNhbiBiZSBwYXNzZWQgYXMgbWlsbGlzIG9yIHVuaXRzLlxuICovXG5leHBvcnQgY2xhc3MgQ3B1IHtcbiAgc3RhdGljIG1pbGxpcyhhbW91bnQ6IG51bWJlcik6IENwdSB7XG4gICAgcmV0dXJuIG5ldyBDcHUoYW1vdW50ICsgJ20nKTtcbiAgfVxuICBzdGF0aWMgdW5pdHMoYW1vdW50OiBudW1iZXIpOiBDcHUge1xuICAgIHJldHVybiBuZXcgQ3B1KGFtb3VudC50b1N0cmluZygpKTtcbiAgfVxuICBhbW91bnQ6IHN0cmluZztcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihhbW91bnQ6IHN0cmluZykge1xuICAgIHRoaXMuYW1vdW50ID0gYW1vdW50O1xuICB9XG59XG5cbi8qKlxuICogTWVtb3J5IHJlcXVlc3QgYW5kIGxpbWl0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWVtb3J5UmVzb3VyY2VzIHtcbiAgcmVhZG9ubHkgcmVxdWVzdDogY29udGFpbmVyO1xuICByZWFkb25seSBsaW1pdDogY29udGFpbmVyO1xufVxuXG4vKipcbiAqIEEgY29sbGVjdGlvbiBvZiBlbnYgdmFyaWFibGVzIGRlZmluZWQgaW4gb3RoZXIgcmVzb3VyY2VzLlxuICovXG5leHBvcnQgY2xhc3MgRW52RnJvbSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb25maWdNYXA/OiBjb25maWdtYXAuSUNvbmZpZ01hcCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByZWZpeD86IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlYz86IHNlY3JldC5JU2VjcmV0KSB7fTtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgX3RvS3ViZSgpOiBrOHMuRW52RnJvbVNvdXJjZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbmZpZ01hcFJlZjogdGhpcy5jb25maWdNYXAgPyB7XG4gICAgICAgIG5hbWU6IHRoaXMuY29uZmlnTWFwLm5hbWUsXG4gICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgc2VjcmV0UmVmOiB0aGlzLnNlYyA/IHtcbiAgICAgICAgbmFtZTogdGhpcy5zZWMubmFtZSxcbiAgICAgIH0gOiB1bmRlZmluZWQsXG4gICAgICBwcmVmaXg6IHRoaXMucHJlZml4LFxuICAgIH07XG4gIH1cblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdENvbnRhaW5lclBvcnRzKHNlbGVjdG9yPzogYW55KTogbnVtYmVyW10ge1xuXG4gIGlmICghc2VsZWN0b3IpIHsgcmV0dXJuIFtdOyB9XG5cbiAgY29uc3QgcG9ydHMgPSBbXTtcblxuICAvLyB3ZSBkb24ndCB1c2UgaW5zdGFuY2VvZiBpbnRlbnRpb25hbGx5IHNpbmNlIGl0IGNhbiBjcmVhdGVcbiAgLy8gY3ljbGljIGltcG9ydCBwcm9ibGVtcy5cbiAgY29uc3QgY29udGFpbmVyczogQ29udGFpbmVyW10gPSAoc2VsZWN0b3IgYXMgYW55KS5jb250YWluZXJzO1xuXG4gIGZvciAoY29uc3QgY29uIG9mIGNvbnRhaW5lcnMgPz8gW10pIHtcbiAgICBpZiAoY29uLnBvcnQpIHtcbiAgICAgIHBvcnRzLnB1c2goY29uLnBvcnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwb3J0cztcbn1cblxuLyoqXG4gKiBDb250YWluZXIgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICovXG5leHBvcnQgY2xhc3MgRW52IHtcblxuICAvKipcbiAgICogU2VsZWN0cyBhIENvbmZpZ01hcCB0byBwb3B1bGF0ZSB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIHdpdGguXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgdGFyZ2V0IENvbmZpZ01hcCdzIERhdGEgZmllbGQgd2lsbCByZXByZXNlbnRcbiAgICogdGhlIGtleS12YWx1ZSBwYWlycyBhcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21Db25maWdNYXAoY29uZmlnTWFwOiBjb25maWdtYXAuSUNvbmZpZ01hcCwgcHJlZml4Pzogc3RyaW5nKTogRW52RnJvbSB7XG4gICAgcmV0dXJuIG5ldyBFbnZGcm9tKGNvbmZpZ01hcCwgcHJlZml4LCB1bmRlZmluZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdHMgYSBTZWNyZXQgdG8gcG9wdWxhdGUgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyB3aXRoLlxuICAgKiBUaGUgY29udGVudHMgb2YgdGhlIHRhcmdldCBTZWNyZXQncyBEYXRhIGZpZWxkIHdpbGwgcmVwcmVzZW50XG4gICAqIHRoZSBrZXktdmFsdWUgcGFpcnMgYXMgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tU2VjcmV0KHNlY3I6IHNlY3JldC5JU2VjcmV0KTogRW52RnJvbSB7XG4gICAgcmV0dXJuIG5ldyBFbnZGcm9tKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBzZWNyKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgX3NvdXJjZXM6IEVudkZyb21bXTtcbiAgcHJpdmF0ZSByZWFkb25seSBfdmFyaWFibGVzOiB7IFtrZXk6IHN0cmluZ106IEVudlZhbHVlIH07XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNvdXJjZXM6IEVudkZyb21bXSwgdmFyaWFibGVzOiB7IFtuYW1lOiBzdHJpbmddOiBFbnZWYWx1ZSB9KSB7XG4gICAgdGhpcy5fc291cmNlcyA9IHNvdXJjZXM7XG4gICAgdGhpcy5fdmFyaWFibGVzID0gdmFyaWFibGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHNpbmdsZSB2YXJpYWJsZSBieSBuYW1lIGFuZCB2YWx1ZS5cbiAgICogVGhlIHZhcmlhYmxlIHZhbHVlIGNhbiBjb21lIGZyb20gdmFyaW91cyBkeW5hbWljIHNvdXJjZXMgc3VjaCBhIHNlY3JldHMgb2YgY29uZmlnIG1hcHMuXG4gICAqIFVzZSBgRW52VmFsdWUuZnJvbVhYWGAgdG8gc2VsZWN0IHNvdXJjZXMuXG4gICAqL1xuICBwdWJsaWMgYWRkVmFyaWFibGUobmFtZTogc3RyaW5nLCB2YWx1ZTogRW52VmFsdWUpIHtcbiAgICB0aGlzLl92YXJpYWJsZXNbbmFtZV0gPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciB0aGlzIGNvbnRhaW5lci5cbiAgICogUmV0dXJucyBhIGNvcHkuIFRvIGFkZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgdXNlIGBjb250YWluZXIuZW52LmFkZFZhcmlhYmxlKClgLlxuICAgKi9cbiAgcHVibGljIGdldCB2YXJpYWJsZXMoKTogeyBbbmFtZTogc3RyaW5nXTogRW52VmFsdWUgfSB7XG4gICAgcmV0dXJuIHsgLi4udGhpcy5fdmFyaWFibGVzIH07XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgY29sbGVjdGlvbiBvZiB2YXJpYWJsZXMgYnkgY29weWluZyBmcm9tIGFub3RoZXIgc291cmNlLlxuICAgKiBVc2UgYEVudi5mcm9tWFhYYCBmdW5jdGlvbnMgdG8gc2VsZWN0IHNvdXJjZXMuXG4gICAqL1xuICBwdWJsaWMgY29weUZyb20oZnJvbTogRW52RnJvbSkge1xuICAgIHRoaXMuX3NvdXJjZXMucHVzaChmcm9tKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBzb3VyY2VzIHVzZWQgdG8gcG9wdWxhdGUgdGhlIGNvbnRhaW5lciBlbnZpcm9ubWVudCxcbiAgICogaW4gYWRkaXRpb24gdG8gdGhlIGB2YXJpYWJsZXNgLlxuICAgKlxuICAgKiBSZXR1cm5zIGEgY29weS4gVG8gYWRkIGEgc291cmNlIHVzZSBgY29udGFpbmVyLmVudi5jb3B5RnJvbSgpYC5cbiAgICovXG4gIHB1YmxpYyBnZXQgc291cmNlcygpOiBFbnZGcm9tW10ge1xuICAgIHJldHVybiBbLi4udGhpcy5fc291cmNlc107XG4gIH1cblxuICBwcml2YXRlIHJlbmRlckVudihlbnY6IHsgW25hbWU6IHN0cmluZ106IEVudlZhbHVlIH0pOiBrOHMuRW52VmFyW10ge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheTxrOHMuRW52VmFyPigpO1xuICAgIGZvciAoY29uc3QgW25hbWUsIHZdIG9mIE9iamVjdC5lbnRyaWVzKGVudikpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdmFsdWU6IHYudmFsdWUsXG4gICAgICAgIHZhbHVlRnJvbTogdi52YWx1ZUZyb20sXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHB1YmxpYyBfdG9LdWJlKCk6IHsgdmFyaWFibGVzPzogazhzLkVudlZhcltdOyBmcm9tPzogazhzLkVudkZyb21Tb3VyY2VbXSB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgZnJvbTogdW5kZWZpbmVkSWZFbXB0eSh0aGlzLl9zb3VyY2VzLm1hcChzID0+IHMuX3RvS3ViZSgpKSksXG4gICAgICB2YXJpYWJsZXM6IHVuZGVmaW5lZElmRW1wdHkodGhpcy5yZW5kZXJFbnYodGhpcy5fdmFyaWFibGVzKSksXG4gICAgfTtcbiAgfVxufVxuIl19","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DaemonSet = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst k8s = require(\"./imports/k8s\");\nconst workload = require(\"./workload\");\n/**\n * A DaemonSet ensures that all (or some) Nodes run a copy of a Pod.\n * As nodes are added to the cluster, Pods are added to them.\n * As nodes are removed from the cluster, those Pods are garbage collected.\n * Deleting a DaemonSet will clean up the Pods it created.\n *\n * Some typical uses of a DaemonSet are:\n *\n * - running a cluster storage daemon on every node\n * - running a logs collection daemon on every node\n * - running a node monitoring daemon on every node\n *\n * In a simple case, one DaemonSet, covering all nodes, would be used for each type of daemon.\n * A more complex setup might use multiple DaemonSets for a single type of daemon,\n * but with different flags and/or different memory and cpu requests for different hardware types.\n */\nclass DaemonSet extends workload.Workload {\n    constructor(scope, id, props = {}) {\n        var _b;\n        super(scope, id, props);\n        this.resourceType = 'daemonsets';\n        this.apiObject = new k8s.KubeDaemonSet(this, 'Resource', {\n            metadata: props.metadata,\n            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),\n        });\n        this.minReadySeconds = (_b = props.minReadySeconds) !== null && _b !== void 0 ? _b : 0;\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        return {\n            minReadySeconds: this.minReadySeconds,\n            template: {\n                metadata: this.podMetadata.toJson(),\n                spec: this._toPodSpec(),\n            },\n            selector: this._toLabelSelector(),\n        };\n    }\n}\nexports.DaemonSet = DaemonSet;\n_a = JSII_RTTI_SYMBOL_1;\nDaemonSet[_a] = { fqn: \"cdk8s-plus-22.DaemonSet\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFlbW9uLXNldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kYWVtb24tc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsaUNBQXdDO0FBRXhDLHFDQUFxQztBQUNyQyx1Q0FBdUM7QUFpQnZDOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE1BQWEsU0FBVSxTQUFRLFFBQVEsQ0FBQyxRQUFRO0lBVzlDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBd0IsRUFBRTs7UUFDbEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFMVixpQkFBWSxHQUFHLFlBQVksQ0FBQztRQU8xQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3ZELFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixJQUFJLEVBQUUsWUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztTQUNsRCxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsZUFBZSxTQUFHLEtBQUssQ0FBQyxlQUFlLG1DQUFJLENBQUMsQ0FBQztJQUVwRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxPQUFPO1FBQ1osT0FBTztZQUNMLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZTtZQUNyQyxRQUFRLEVBQUU7Z0JBQ1IsUUFBUSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO2dCQUNuQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRTthQUN4QjtZQUNELFFBQVEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7U0FDbEMsQ0FBQztJQUNKLENBQUM7O0FBbkNILDhCQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwaU9iamVjdCwgTGF6eSB9IGZyb20gJ2NkazhzJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgazhzIGZyb20gJy4vaW1wb3J0cy9rOHMnO1xuaW1wb3J0ICogYXMgd29ya2xvYWQgZnJvbSAnLi93b3JrbG9hZCc7XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgYERhZW1vblNldGAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGFlbW9uU2V0UHJvcHMgZXh0ZW5kcyB3b3JrbG9hZC5Xb3JrbG9hZFByb3BzIHtcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygc2Vjb25kcyBmb3Igd2hpY2ggYSBuZXdseSBjcmVhdGVkIHBvZCBzaG91bGRcbiAgICogYmUgcmVhZHkgd2l0aG91dCBhbnkgb2YgaXRzIGNvbnRhaW5lciBjcmFzaGluZywgZm9yIGl0IHRvIGJlIGNvbnNpZGVyZWQgYXZhaWxhYmxlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICByZWFkb25seSBtaW5SZWFkeVNlY29uZHM/OiBudW1iZXI7XG5cbn1cblxuLyoqXG4gKiBBIERhZW1vblNldCBlbnN1cmVzIHRoYXQgYWxsIChvciBzb21lKSBOb2RlcyBydW4gYSBjb3B5IG9mIGEgUG9kLlxuICogQXMgbm9kZXMgYXJlIGFkZGVkIHRvIHRoZSBjbHVzdGVyLCBQb2RzIGFyZSBhZGRlZCB0byB0aGVtLlxuICogQXMgbm9kZXMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgY2x1c3RlciwgdGhvc2UgUG9kcyBhcmUgZ2FyYmFnZSBjb2xsZWN0ZWQuXG4gKiBEZWxldGluZyBhIERhZW1vblNldCB3aWxsIGNsZWFuIHVwIHRoZSBQb2RzIGl0IGNyZWF0ZWQuXG4gKlxuICogU29tZSB0eXBpY2FsIHVzZXMgb2YgYSBEYWVtb25TZXQgYXJlOlxuICpcbiAqIC0gcnVubmluZyBhIGNsdXN0ZXIgc3RvcmFnZSBkYWVtb24gb24gZXZlcnkgbm9kZVxuICogLSBydW5uaW5nIGEgbG9ncyBjb2xsZWN0aW9uIGRhZW1vbiBvbiBldmVyeSBub2RlXG4gKiAtIHJ1bm5pbmcgYSBub2RlIG1vbml0b3JpbmcgZGFlbW9uIG9uIGV2ZXJ5IG5vZGVcbiAqXG4gKiBJbiBhIHNpbXBsZSBjYXNlLCBvbmUgRGFlbW9uU2V0LCBjb3ZlcmluZyBhbGwgbm9kZXMsIHdvdWxkIGJlIHVzZWQgZm9yIGVhY2ggdHlwZSBvZiBkYWVtb24uXG4gKiBBIG1vcmUgY29tcGxleCBzZXR1cCBtaWdodCB1c2UgbXVsdGlwbGUgRGFlbW9uU2V0cyBmb3IgYSBzaW5nbGUgdHlwZSBvZiBkYWVtb24sXG4gKiBidXQgd2l0aCBkaWZmZXJlbnQgZmxhZ3MgYW5kL29yIGRpZmZlcmVudCBtZW1vcnkgYW5kIGNwdSByZXF1ZXN0cyBmb3IgZGlmZmVyZW50IGhhcmR3YXJlIHR5cGVzLlxuICovXG5leHBvcnQgY2xhc3MgRGFlbW9uU2V0IGV4dGVuZHMgd29ya2xvYWQuV29ya2xvYWQge1xuXG4gIC8qKlxuICAgKiBAc2VlIGJhc2UuUmVzb3VyY2UuYXBpT2JqZWN0XG4gICAqL1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgYXBpT2JqZWN0OiBBcGlPYmplY3Q7XG5cbiAgcHVibGljIHJlYWRvbmx5IHJlc291cmNlVHlwZSA9ICdkYWVtb25zZXRzJztcblxuICBwdWJsaWMgcmVhZG9ubHkgbWluUmVhZHlTZWNvbmRzOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IERhZW1vblNldFByb3BzID0ge30pIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIHRoaXMuYXBpT2JqZWN0ID0gbmV3IGs4cy5LdWJlRGFlbW9uU2V0KHRoaXMsICdSZXNvdXJjZScsIHtcbiAgICAgIG1ldGFkYXRhOiBwcm9wcy5tZXRhZGF0YSxcbiAgICAgIHNwZWM6IExhenkuYW55KHsgcHJvZHVjZTogKCkgPT4gdGhpcy5fdG9LdWJlKCkgfSksXG4gICAgfSk7XG5cbiAgICB0aGlzLm1pblJlYWR5U2Vjb25kcyA9IHByb3BzLm1pblJlYWR5U2Vjb25kcyA/PyAwO1xuXG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgX3RvS3ViZSgpOiBrOHMuRGFlbW9uU2V0U3BlYyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1pblJlYWR5U2Vjb25kczogdGhpcy5taW5SZWFkeVNlY29uZHMsXG4gICAgICB0ZW1wbGF0ZToge1xuICAgICAgICBtZXRhZGF0YTogdGhpcy5wb2RNZXRhZGF0YS50b0pzb24oKSxcbiAgICAgICAgc3BlYzogdGhpcy5fdG9Qb2RTcGVjKCksXG4gICAgICB9LFxuICAgICAgc2VsZWN0b3I6IHRoaXMuX3RvTGFiZWxTZWxlY3RvcigpLFxuICAgIH07XG4gIH1cblxufSJdfQ==","\"use strict\";\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeploymentStrategy = exports.PercentOrAbsolute = exports.Deployment = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst container = require(\"./container\");\nconst k8s = require(\"./imports/k8s\");\nconst service = require(\"./service\");\nconst workload = require(\"./workload\");\n/**\n*\n* A Deployment provides declarative updates for Pods and ReplicaSets.\n*\n* You describe a desired state in a Deployment, and the Deployment Controller changes the actual\n* state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove\n* existing Deployments and adopt all their resources with new Deployments.\n*\n* > Note: Do not manage ReplicaSets owned by a Deployment. Consider opening an issue in the main Kubernetes repository if your use case is not covered below.\n*\n* Use Case\n* ---------\n*\n* The following are typical use cases for Deployments:\n*\n* - Create a Deployment to rollout a ReplicaSet. The ReplicaSet creates Pods in the background.\n*   Check the status of the rollout to see if it succeeds or not.\n* - Declare the new state of the Pods by updating the PodTemplateSpec of the Deployment.\n*   A new ReplicaSet is created and the Deployment manages moving the Pods from the old ReplicaSet to the new one at a controlled rate.\n*   Each new ReplicaSet updates the revision of the Deployment.\n* - Rollback to an earlier Deployment revision if the current state of the Deployment is not stable.\n*   Each rollback updates the revision of the Deployment.\n* - Scale up the Deployment to facilitate more load.\n* - Pause the Deployment to apply multiple fixes to its PodTemplateSpec and then resume it to start a new rollout.\n* - Use the status of the Deployment as an indicator that a rollout has stuck.\n* - Clean up older ReplicaSets that you don't need anymore.\n*\n**/\nclass Deployment extends workload.Workload {\n    constructor(scope, id, props = {}) {\n        var _d, _e, _f, _g;\n        super(scope, id, props);\n        this.resourceType = 'deployments';\n        this.apiObject = new k8s.KubeDeployment(this, 'Resource', {\n            metadata: props.metadata,\n            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),\n        });\n        this.minReady = (_d = props.minReady) !== null && _d !== void 0 ? _d : cdk8s_1.Duration.seconds(0);\n        this.progressDeadline = (_e = props.progressDeadline) !== null && _e !== void 0 ? _e : cdk8s_1.Duration.seconds(600);\n        if (this.progressDeadline.toSeconds() <= this.minReady.toSeconds()) {\n            throw new Error(`'progressDeadline' (${this.progressDeadline.toSeconds()}s) must be greater than 'minReady' (${this.minReady.toSeconds()}s)`);\n        }\n        this.replicas = (_f = props.replicas) !== null && _f !== void 0 ? _f : 1;\n        this.strategy = (_g = props.strategy) !== null && _g !== void 0 ? _g : DeploymentStrategy.rollingUpdate();\n    }\n    /**\n     * Expose a deployment via a service.\n     *\n     * This is equivalent to running `kubectl expose deployment <deployment-name>`.\n     *\n     * @param options Options to determine details of the service and port exposed.\n     */\n    exposeViaService(options = {}) {\n        var _d, _e, _f;\n        const ports = (_d = options.ports) !== null && _d !== void 0 ? _d : this.extractPorts();\n        if (ports.length === 0) {\n            throw new Error(`Unable to expose deployment ${this.name} via a service: `\n                + 'Deployment port cannot be determined.'\n                + 'Either pass \\'ports\\', or configure ports on the containers of the deployment');\n        }\n        return new service.Service(this, `${(_e = options.name) !== null && _e !== void 0 ? _e : ''}Service`, {\n            selector: this,\n            ports,\n            metadata: options.name ? { name: options.name } : undefined,\n            type: (_f = options.serviceType) !== null && _f !== void 0 ? _f : service.ServiceType.CLUSTER_IP,\n        });\n    }\n    /**\n     * Expose a deployment via an ingress.\n     *\n     * This will first expose the deployment with a service, and then expose the service via an ingress.\n     *\n     * @param path The ingress path to register under.\n     * @param options Additional options.\n     */\n    exposeViaIngress(path, options = {}) {\n        const ser = this.exposeViaService(options);\n        return ser.exposeViaIngress(path, options);\n    }\n    extractPorts() {\n        return container.extractContainerPorts(this).map(port => ({ targetPort: port, port }));\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        return {\n            replicas: this.replicas,\n            minReadySeconds: this.minReady.toSeconds(),\n            progressDeadlineSeconds: this.progressDeadline.toSeconds(),\n            template: {\n                metadata: this.podMetadata.toJson(),\n                spec: this._toPodSpec(),\n            },\n            selector: this._toLabelSelector(),\n            strategy: this.strategy._toKube(),\n        };\n    }\n}\nexports.Deployment = Deployment;\n_a = JSII_RTTI_SYMBOL_1;\nDeployment[_a] = { fqn: \"cdk8s-plus-22.Deployment\", version: \"2.0.0-rc.2\" };\n/**\n * Union like class repsenting either a ration in\n * percents or an absolute number.\n */\nclass PercentOrAbsolute {\n    constructor(value) {\n        this.value = value;\n    }\n    /**\n     * Percent ratio.\n     */\n    static percent(percent) {\n        return new PercentOrAbsolute(`${percent}%`);\n    }\n    /**\n     * Absolute number.\n     */\n    static absolute(num) {\n        return new PercentOrAbsolute(num);\n    }\n    isZero() {\n        return this.value === PercentOrAbsolute.absolute(0).value || this.value === PercentOrAbsolute.percent(0).value;\n    }\n}\nexports.PercentOrAbsolute = PercentOrAbsolute;\n_b = JSII_RTTI_SYMBOL_1;\nPercentOrAbsolute[_b] = { fqn: \"cdk8s-plus-22.PercentOrAbsolute\", version: \"2.0.0-rc.2\" };\n/**\n * Deployment strategies.\n */\nclass DeploymentStrategy {\n    constructor(strategy) {\n        this.strategy = strategy;\n    }\n    /**\n     * All existing Pods are killed before new ones are created.\n     *\n     * @see https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#recreate-deployment\n     */\n    static recreate() {\n        return new DeploymentStrategy({\n            type: 'Recreate',\n        });\n    }\n    static rollingUpdate(options = {}) {\n        var _d, _e;\n        const maxSurge = (_d = options.maxSurge) !== null && _d !== void 0 ? _d : PercentOrAbsolute.percent(25);\n        const maxUnavailable = (_e = options.maxUnavailable) !== null && _e !== void 0 ? _e : PercentOrAbsolute.percent(25);\n        if (maxSurge.isZero() && maxUnavailable.isZero()) {\n            throw new Error('\\'maxSurge\\' and \\'maxUnavailable\\' cannot be both zero');\n        }\n        return new DeploymentStrategy({\n            type: 'RollingUpdate',\n            rollingUpdate: { maxSurge, maxUnavailable },\n        });\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        return this.strategy;\n    }\n}\nexports.DeploymentStrategy = DeploymentStrategy;\n_c = JSII_RTTI_SYMBOL_1;\nDeploymentStrategy[_c] = { fqn: \"cdk8s-plus-22.DeploymentStrategy\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95bWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kZXBsb3ltZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsaUNBQWtEO0FBRWxELHlDQUF5QztBQUN6QyxxQ0FBcUM7QUFFckMscUNBQXFDO0FBQ3JDLHVDQUF1QztBQWdGdkM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTJCRztBQUNILE1BQWEsVUFBVyxTQUFRLFFBQVEsQ0FBQyxRQUFRO0lBOEIvQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLFFBQXlCLEVBQUU7O1FBQ25FLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBSFYsaUJBQVksR0FBRyxhQUFhLENBQUM7UUFLM0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUN4RCxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsSUFBSSxFQUFFLFlBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7U0FDbEQsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFFBQVEsU0FBRyxLQUFLLENBQUMsUUFBUSxtQ0FBSSxnQkFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsZ0JBQWdCLFNBQUcsS0FBSyxDQUFDLGdCQUFnQixtQ0FBSSxnQkFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV4RSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ2xFLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsdUNBQXVDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQy9JO1FBRUQsSUFBSSxDQUFDLFFBQVEsU0FBRyxLQUFLLENBQUMsUUFBUSxtQ0FBSSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLFFBQVEsU0FBRyxLQUFLLENBQUMsUUFBUSxtQ0FBSSxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2RSxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksZ0JBQWdCLENBQUMsVUFBNkMsRUFBRTs7UUFDckUsTUFBTSxLQUFLLFNBQUcsT0FBTyxDQUFDLEtBQUssbUNBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ25ELElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsSUFBSSxDQUFDLElBQUksa0JBQWtCO2tCQUN0RSx1Q0FBdUM7a0JBQ3ZDLCtFQUErRSxDQUFDLENBQUM7U0FDdEY7UUFDRCxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxNQUFBLE9BQU8sQ0FBQyxJQUFJLG1DQUFJLEVBQUUsU0FBUyxFQUFFO1lBQy9ELFFBQVEsRUFBRSxJQUFJO1lBQ2QsS0FBSztZQUNMLFFBQVEsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVM7WUFDM0QsSUFBSSxRQUFFLE9BQU8sQ0FBQyxXQUFXLG1DQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsVUFBVTtTQUM1RCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLGdCQUFnQixDQUFDLElBQVksRUFBRSxVQUE2QyxFQUFFO1FBQ25GLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQyxPQUFPLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVPLFlBQVk7UUFDbEIsT0FBTyxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFFRDs7T0FFRztJQUNJLE9BQU87UUFDWixPQUFPO1lBQ0wsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLGVBQWUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtZQUMxQyx1QkFBdUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFO1lBQzFELFFBQVEsRUFBRTtnQkFDUixRQUFRLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7Z0JBQ25DLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFO2FBQ3hCO1lBQ0QsUUFBUSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNqQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7U0FDbEMsQ0FBQztJQUNKLENBQUM7O0FBdkdILGdDQXlHQzs7O0FBdUNEOzs7R0FHRztBQUNILE1BQWEsaUJBQWlCO0lBZ0I1QixZQUFvQyxLQUFVO1FBQVYsVUFBSyxHQUFMLEtBQUssQ0FBSztJQUFHLENBQUM7SUFkbEQ7O09BRUc7SUFDSSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWU7UUFDbkMsT0FBTyxJQUFJLGlCQUFpQixDQUFDLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQVc7UUFDaEMsT0FBTyxJQUFJLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFJTSxNQUFNO1FBQ1gsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ2pILENBQUM7O0FBcEJILDhDQXNCQzs7O0FBRUQ7O0dBRUc7QUFDSCxNQUFhLGtCQUFrQjtJQTRCN0IsWUFBcUMsUUFBZ0M7UUFBaEMsYUFBUSxHQUFSLFFBQVEsQ0FBd0I7SUFBRyxDQUFDO0lBMUJ6RTs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLFFBQVE7UUFDcEIsT0FBTyxJQUFJLGtCQUFrQixDQUFDO1lBQzVCLElBQUksRUFBRSxVQUFVO1NBQ2pCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQWtELEVBQUU7O1FBRTlFLE1BQU0sUUFBUSxTQUFHLE9BQU8sQ0FBQyxRQUFRLG1DQUFJLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuRSxNQUFNLGNBQWMsU0FBRyxPQUFPLENBQUMsY0FBYyxtQ0FBSSxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFL0UsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFLElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ2hELE1BQU0sSUFBSSxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQztTQUM1RTtRQUVELE9BQU8sSUFBSSxrQkFBa0IsQ0FBQztZQUM1QixJQUFJLEVBQUUsZUFBZTtZQUNyQixhQUFhLEVBQUUsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFO1NBQzVDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFJRDs7T0FFRztJQUNJLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQzs7QUFuQ0gsZ0RBcUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBpT2JqZWN0LCBMYXp5LCBEdXJhdGlvbiB9IGZyb20gJ2NkazhzJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgY29udGFpbmVyIGZyb20gJy4vY29udGFpbmVyJztcbmltcG9ydCAqIGFzIGs4cyBmcm9tICcuL2ltcG9ydHMvazhzJztcbmltcG9ydCAqIGFzIGluZ3Jlc3MgZnJvbSAnLi9pbmdyZXNzJztcbmltcG9ydCAqIGFzIHNlcnZpY2UgZnJvbSAnLi9zZXJ2aWNlJztcbmltcG9ydCAqIGFzIHdvcmtsb2FkIGZyb20gJy4vd29ya2xvYWQnO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGBEZXBsb3ltZW50YC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZXBsb3ltZW50UHJvcHMgZXh0ZW5kcyB3b3JrbG9hZC5Xb3JrbG9hZFByb3BzIHtcblxuICAvKipcbiAgICogTnVtYmVyIG9mIGRlc2lyZWQgcG9kcy5cbiAgICpcbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgcmVhZG9ubHkgcmVwbGljYXM/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgc3RyYXRlZ3kgdXNlZCB0byByZXBsYWNlIG9sZCBQb2RzIGJ5IG5ldyBvbmVzLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIFJvbGxpbmdVcGRhdGUgd2l0aCBtYXhTdXJnZSBhbmQgbWF4VW5hdmFpbGFibGUgc2V0IHRvIDI1JS5cbiAgICovXG4gIHJlYWRvbmx5IHN0cmF0ZWd5PzogRGVwbG95bWVudFN0cmF0ZWd5O1xuXG4gIC8qKlxuICAgKiBNaW5pbXVtIGR1cmF0aW9uIGZvciB3aGljaCBhIG5ld2x5IGNyZWF0ZWQgcG9kIHNob3VsZCBiZSByZWFkeSB3aXRob3V0XG4gICAqIGFueSBvZiBpdHMgY29udGFpbmVyIGNyYXNoaW5nLCBmb3IgaXQgdG8gYmUgY29uc2lkZXJlZCBhdmFpbGFibGUuXG4gICAqXG4gICAqIFplcm8gbWVhbnMgdGhlIHBvZCB3aWxsIGJlIGNvbnNpZGVyZWQgYXZhaWxhYmxlIGFzIHNvb24gYXMgaXQgaXMgcmVhZHkuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2RlcGxveW1lbnQvI21pbi1yZWFkeS1zZWNvbmRzXG4gICAqIEBkZWZhdWx0IER1cmF0aW9uLnNlY29uZHMoMClcbiAgICovXG4gIHJlYWRvbmx5IG1pblJlYWR5PzogRHVyYXRpb247XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGR1cmF0aW9uIGZvciBhIGRlcGxveW1lbnQgdG8gbWFrZSBwcm9ncmVzcyBiZWZvcmUgaXRcbiAgICogaXMgY29uc2lkZXJlZCB0byBiZSBmYWlsZWQuIFRoZSBkZXBsb3ltZW50IGNvbnRyb2xsZXIgd2lsbCBjb250aW51ZVxuICAgKiB0byBwcm9jZXNzIGZhaWxlZCBkZXBsb3ltZW50cyBhbmQgYSBjb25kaXRpb24gd2l0aCBhIFByb2dyZXNzRGVhZGxpbmVFeGNlZWRlZFxuICAgKiByZWFzb24gd2lsbCBiZSBzdXJmYWNlZCBpbiB0aGUgZGVwbG95bWVudCBzdGF0dXMuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBwcm9ncmVzcyB3aWxsIG5vdCBiZSBlc3RpbWF0ZWQgZHVyaW5nIHRoZSB0aW1lIGEgZGVwbG95bWVudCBpcyBwYXVzZWQuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2RlcGxveW1lbnQvI3Byb2dyZXNzLWRlYWRsaW5lLXNlY29uZHNcbiAgICogQGRlZmF1bHQgRHVyYXRpb24uc2Vjb25kcyg2MDApXG4gICAqL1xuICByZWFkb25seSBwcm9ncmVzc0RlYWRsaW5lPzogRHVyYXRpb247XG5cbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciBgRGVwbG95bWVudC5leHBvc2VWaWFTZXJ2aWNlYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZXBsb3ltZW50RXhwb3NlVmlhU2VydmljZU9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIHBvcnRzIHRoYXQgdGhlIHNlcnZpY2Ugc2hvdWxkIGJpbmQgdG8uXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gZXh0cmFjdGVkIGZyb20gdGhlIGRlcGxveW1lbnQuXG4gICAqL1xuICByZWFkb25seSBwb3J0cz86IHNlcnZpY2UuU2VydmljZVBvcnRbXTtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV4cG9zZWQgc2VydmljZS5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBDbHVzdGVySVAuXG4gICAqL1xuICByZWFkb25seSBzZXJ2aWNlVHlwZT86IHNlcnZpY2UuU2VydmljZVR5cGU7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIGV4cG9zZS5cbiAgICogSWYgeW91J2QgbGlrZSB0byBleHBvc2UgdGhlIGRlcGxveW1lbnQgbXVsdGlwbGUgdGltZXMsXG4gICAqIHlvdSBtdXN0IGV4cGxpY2l0bHkgc2V0IGEgbmFtZSBzdGFydGluZyBmcm9tIHRoZSBzZWNvbmQgZXhwb3NlIGNhbGwuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gYXV0byBnZW5lcmF0ZWQuXG4gICAqL1xuICByZWFkb25seSBuYW1lPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGV4cG9zaW5nIGEgZGVwbG95bWVudCB2aWEgYW4gaW5ncmVzcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFeHBvc2VEZXBsb3ltZW50VmlhSW5ncmVzc09wdGlvbnMgZXh0ZW5kcyBEZXBsb3ltZW50RXhwb3NlVmlhU2VydmljZU9wdGlvbnMsIHNlcnZpY2UuRXhwb3NlU2VydmljZVZpYUluZ3Jlc3NPcHRpb25zIHt9XG5cbi8qKlxuKlxuKiBBIERlcGxveW1lbnQgcHJvdmlkZXMgZGVjbGFyYXRpdmUgdXBkYXRlcyBmb3IgUG9kcyBhbmQgUmVwbGljYVNldHMuXG4qXG4qIFlvdSBkZXNjcmliZSBhIGRlc2lyZWQgc3RhdGUgaW4gYSBEZXBsb3ltZW50LCBhbmQgdGhlIERlcGxveW1lbnQgQ29udHJvbGxlciBjaGFuZ2VzIHRoZSBhY3R1YWxcbiogc3RhdGUgdG8gdGhlIGRlc2lyZWQgc3RhdGUgYXQgYSBjb250cm9sbGVkIHJhdGUuIFlvdSBjYW4gZGVmaW5lIERlcGxveW1lbnRzIHRvIGNyZWF0ZSBuZXcgUmVwbGljYVNldHMsIG9yIHRvIHJlbW92ZVxuKiBleGlzdGluZyBEZXBsb3ltZW50cyBhbmQgYWRvcHQgYWxsIHRoZWlyIHJlc291cmNlcyB3aXRoIG5ldyBEZXBsb3ltZW50cy5cbipcbiogPiBOb3RlOiBEbyBub3QgbWFuYWdlIFJlcGxpY2FTZXRzIG93bmVkIGJ5IGEgRGVwbG95bWVudC4gQ29uc2lkZXIgb3BlbmluZyBhbiBpc3N1ZSBpbiB0aGUgbWFpbiBLdWJlcm5ldGVzIHJlcG9zaXRvcnkgaWYgeW91ciB1c2UgY2FzZSBpcyBub3QgY292ZXJlZCBiZWxvdy5cbipcbiogVXNlIENhc2VcbiogLS0tLS0tLS0tXG4qXG4qIFRoZSBmb2xsb3dpbmcgYXJlIHR5cGljYWwgdXNlIGNhc2VzIGZvciBEZXBsb3ltZW50czpcbipcbiogLSBDcmVhdGUgYSBEZXBsb3ltZW50IHRvIHJvbGxvdXQgYSBSZXBsaWNhU2V0LiBUaGUgUmVwbGljYVNldCBjcmVhdGVzIFBvZHMgaW4gdGhlIGJhY2tncm91bmQuXG4qICAgQ2hlY2sgdGhlIHN0YXR1cyBvZiB0aGUgcm9sbG91dCB0byBzZWUgaWYgaXQgc3VjY2VlZHMgb3Igbm90LlxuKiAtIERlY2xhcmUgdGhlIG5ldyBzdGF0ZSBvZiB0aGUgUG9kcyBieSB1cGRhdGluZyB0aGUgUG9kVGVtcGxhdGVTcGVjIG9mIHRoZSBEZXBsb3ltZW50LlxuKiAgIEEgbmV3IFJlcGxpY2FTZXQgaXMgY3JlYXRlZCBhbmQgdGhlIERlcGxveW1lbnQgbWFuYWdlcyBtb3ZpbmcgdGhlIFBvZHMgZnJvbSB0aGUgb2xkIFJlcGxpY2FTZXQgdG8gdGhlIG5ldyBvbmUgYXQgYSBjb250cm9sbGVkIHJhdGUuXG4qICAgRWFjaCBuZXcgUmVwbGljYVNldCB1cGRhdGVzIHRoZSByZXZpc2lvbiBvZiB0aGUgRGVwbG95bWVudC5cbiogLSBSb2xsYmFjayB0byBhbiBlYXJsaWVyIERlcGxveW1lbnQgcmV2aXNpb24gaWYgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIERlcGxveW1lbnQgaXMgbm90IHN0YWJsZS5cbiogICBFYWNoIHJvbGxiYWNrIHVwZGF0ZXMgdGhlIHJldmlzaW9uIG9mIHRoZSBEZXBsb3ltZW50LlxuKiAtIFNjYWxlIHVwIHRoZSBEZXBsb3ltZW50IHRvIGZhY2lsaXRhdGUgbW9yZSBsb2FkLlxuKiAtIFBhdXNlIHRoZSBEZXBsb3ltZW50IHRvIGFwcGx5IG11bHRpcGxlIGZpeGVzIHRvIGl0cyBQb2RUZW1wbGF0ZVNwZWMgYW5kIHRoZW4gcmVzdW1lIGl0IHRvIHN0YXJ0IGEgbmV3IHJvbGxvdXQuXG4qIC0gVXNlIHRoZSBzdGF0dXMgb2YgdGhlIERlcGxveW1lbnQgYXMgYW4gaW5kaWNhdG9yIHRoYXQgYSByb2xsb3V0IGhhcyBzdHVjay5cbiogLSBDbGVhbiB1cCBvbGRlciBSZXBsaWNhU2V0cyB0aGF0IHlvdSBkb24ndCBuZWVkIGFueW1vcmUuXG4qXG4qKi9cbmV4cG9ydCBjbGFzcyBEZXBsb3ltZW50IGV4dGVuZHMgd29ya2xvYWQuV29ya2xvYWQge1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgZGVzaXJlZCBwb2RzLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHJlcGxpY2FzOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE1pbmltdW0gZHVyYXRpb24gZm9yIHdoaWNoIGEgbmV3bHkgY3JlYXRlZCBwb2Qgc2hvdWxkIGJlIHJlYWR5IHdpdGhvdXRcbiAgICogYW55IG9mIGl0cyBjb250YWluZXIgY3Jhc2hpbmcsIGZvciBpdCB0byBiZSBjb25zaWRlcmVkIGF2YWlsYWJsZS5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBtaW5SZWFkeTogRHVyYXRpb247XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGR1cmF0aW9uIGZvciBhIGRlcGxveW1lbnQgdG8gbWFrZSBwcm9ncmVzcyBiZWZvcmUgaXQgaXMgY29uc2lkZXJlZCB0byBiZSBmYWlsZWQuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgcHJvZ3Jlc3NEZWFkbGluZTogRHVyYXRpb247XG5cbiAgLypcbiAgICogVGhlIHVwZ3JhZGUgc3RyYXRlZ3kgb2YgdGhpcyBkZXBsb3ltZW50LlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHN0cmF0ZWd5OiBEZXBsb3ltZW50U3RyYXRlZ3k7XG5cbiAgLyoqXG4gICAqIEBzZWUgYmFzZS5SZXNvdXJjZS5hcGlPYmplY3RcbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBhcGlPYmplY3Q6IEFwaU9iamVjdDtcblxuICBwdWJsaWMgcmVhZG9ubHkgcmVzb3VyY2VUeXBlID0gJ2RlcGxveW1lbnRzJztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRGVwbG95bWVudFByb3BzID0ge30pIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIHRoaXMuYXBpT2JqZWN0ID0gbmV3IGs4cy5LdWJlRGVwbG95bWVudCh0aGlzLCAnUmVzb3VyY2UnLCB7XG4gICAgICBtZXRhZGF0YTogcHJvcHMubWV0YWRhdGEsXG4gICAgICBzcGVjOiBMYXp5LmFueSh7IHByb2R1Y2U6ICgpID0+IHRoaXMuX3RvS3ViZSgpIH0pLFxuICAgIH0pO1xuXG4gICAgdGhpcy5taW5SZWFkeSA9IHByb3BzLm1pblJlYWR5ID8/IER1cmF0aW9uLnNlY29uZHMoMCk7XG4gICAgdGhpcy5wcm9ncmVzc0RlYWRsaW5lID0gcHJvcHMucHJvZ3Jlc3NEZWFkbGluZSA/PyBEdXJhdGlvbi5zZWNvbmRzKDYwMCk7XG5cbiAgICBpZiAodGhpcy5wcm9ncmVzc0RlYWRsaW5lLnRvU2Vjb25kcygpIDw9IHRoaXMubWluUmVhZHkudG9TZWNvbmRzKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJ3Byb2dyZXNzRGVhZGxpbmUnICgke3RoaXMucHJvZ3Jlc3NEZWFkbGluZS50b1NlY29uZHMoKX1zKSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAnbWluUmVhZHknICgke3RoaXMubWluUmVhZHkudG9TZWNvbmRzKCl9cylgKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlcGxpY2FzID0gcHJvcHMucmVwbGljYXMgPz8gMTtcbiAgICB0aGlzLnN0cmF0ZWd5ID0gcHJvcHMuc3RyYXRlZ3kgPz8gRGVwbG95bWVudFN0cmF0ZWd5LnJvbGxpbmdVcGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBvc2UgYSBkZXBsb3ltZW50IHZpYSBhIHNlcnZpY2UuXG4gICAqXG4gICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byBydW5uaW5nIGBrdWJlY3RsIGV4cG9zZSBkZXBsb3ltZW50IDxkZXBsb3ltZW50LW5hbWU+YC5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyB0byBkZXRlcm1pbmUgZGV0YWlscyBvZiB0aGUgc2VydmljZSBhbmQgcG9ydCBleHBvc2VkLlxuICAgKi9cbiAgcHVibGljIGV4cG9zZVZpYVNlcnZpY2Uob3B0aW9uczogRGVwbG95bWVudEV4cG9zZVZpYVNlcnZpY2VPcHRpb25zID0ge30pOiBzZXJ2aWNlLlNlcnZpY2Uge1xuICAgIGNvbnN0IHBvcnRzID0gb3B0aW9ucy5wb3J0cyA/PyB0aGlzLmV4dHJhY3RQb3J0cygpO1xuICAgIGlmIChwb3J0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGV4cG9zZSBkZXBsb3ltZW50ICR7dGhpcy5uYW1lfSB2aWEgYSBzZXJ2aWNlOiBgXG4gICAgICAgICsgJ0RlcGxveW1lbnQgcG9ydCBjYW5ub3QgYmUgZGV0ZXJtaW5lZC4nXG4gICAgICAgICsgJ0VpdGhlciBwYXNzIFxcJ3BvcnRzXFwnLCBvciBjb25maWd1cmUgcG9ydHMgb24gdGhlIGNvbnRhaW5lcnMgb2YgdGhlIGRlcGxveW1lbnQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBzZXJ2aWNlLlNlcnZpY2UodGhpcywgYCR7b3B0aW9ucy5uYW1lID8/ICcnfVNlcnZpY2VgLCB7XG4gICAgICBzZWxlY3RvcjogdGhpcyxcbiAgICAgIHBvcnRzLFxuICAgICAgbWV0YWRhdGE6IG9wdGlvbnMubmFtZSA/IHsgbmFtZTogb3B0aW9ucy5uYW1lIH0gOiB1bmRlZmluZWQsXG4gICAgICB0eXBlOiBvcHRpb25zLnNlcnZpY2VUeXBlID8/IHNlcnZpY2UuU2VydmljZVR5cGUuQ0xVU1RFUl9JUCxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBvc2UgYSBkZXBsb3ltZW50IHZpYSBhbiBpbmdyZXNzLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgZmlyc3QgZXhwb3NlIHRoZSBkZXBsb3ltZW50IHdpdGggYSBzZXJ2aWNlLCBhbmQgdGhlbiBleHBvc2UgdGhlIHNlcnZpY2UgdmlhIGFuIGluZ3Jlc3MuXG4gICAqXG4gICAqIEBwYXJhbSBwYXRoIFRoZSBpbmdyZXNzIHBhdGggdG8gcmVnaXN0ZXIgdW5kZXIuXG4gICAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9ucy5cbiAgICovXG4gIHB1YmxpYyBleHBvc2VWaWFJbmdyZXNzKHBhdGg6IHN0cmluZywgb3B0aW9uczogRXhwb3NlRGVwbG95bWVudFZpYUluZ3Jlc3NPcHRpb25zID0ge30pOiBpbmdyZXNzLkluZ3Jlc3Mge1xuICAgIGNvbnN0IHNlciA9IHRoaXMuZXhwb3NlVmlhU2VydmljZShvcHRpb25zKTtcbiAgICByZXR1cm4gc2VyLmV4cG9zZVZpYUluZ3Jlc3MocGF0aCwgb3B0aW9ucyk7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RQb3J0cygpOiBzZXJ2aWNlLlNlcnZpY2VQb3J0W10ge1xuICAgIHJldHVybiBjb250YWluZXIuZXh0cmFjdENvbnRhaW5lclBvcnRzKHRoaXMpLm1hcChwb3J0ID0+ICh7IHRhcmdldFBvcnQ6IHBvcnQsIHBvcnQgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIF90b0t1YmUoKTogazhzLkRlcGxveW1lbnRTcGVjIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVwbGljYXM6IHRoaXMucmVwbGljYXMsXG4gICAgICBtaW5SZWFkeVNlY29uZHM6IHRoaXMubWluUmVhZHkudG9TZWNvbmRzKCksXG4gICAgICBwcm9ncmVzc0RlYWRsaW5lU2Vjb25kczogdGhpcy5wcm9ncmVzc0RlYWRsaW5lLnRvU2Vjb25kcygpLFxuICAgICAgdGVtcGxhdGU6IHtcbiAgICAgICAgbWV0YWRhdGE6IHRoaXMucG9kTWV0YWRhdGEudG9Kc29uKCksXG4gICAgICAgIHNwZWM6IHRoaXMuX3RvUG9kU3BlYygpLFxuICAgICAgfSxcbiAgICAgIHNlbGVjdG9yOiB0aGlzLl90b0xhYmVsU2VsZWN0b3IoKSxcbiAgICAgIHN0cmF0ZWd5OiB0aGlzLnN0cmF0ZWd5Ll90b0t1YmUoKSxcbiAgICB9O1xuICB9XG5cbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciBgRGVwbG95bWVudFN0cmF0ZWd5LnJvbGxpbmdVcGRhdGVgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIERlcGxveW1lbnRTdHJhdGVneVJvbGxpbmdVcGRhdGVPcHRpb25zIHtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHBvZHMgdGhhdCBjYW4gYmUgc2NoZWR1bGVkIGFib3ZlIHRoZSBkZXNpcmVkIG51bWJlciBvZiBwb2RzLlxuICAgKiBWYWx1ZSBjYW4gYmUgYW4gYWJzb2x1dGUgbnVtYmVyIChleDogNSkgb3IgYSBwZXJjZW50YWdlIG9mIGRlc2lyZWQgcG9kcyAoZXg6IDEwJSkuXG4gICAqIEFic29sdXRlIG51bWJlciBpcyBjYWxjdWxhdGVkIGZyb20gcGVyY2VudGFnZSBieSByb3VuZGluZyB1cC5cbiAgICogVGhpcyBjYW4gbm90IGJlIDAgaWYgYG1heFVuYXZhaWxhYmxlYCBpcyAwLlxuICAgKlxuICAgKiBFeGFtcGxlOiB3aGVuIHRoaXMgaXMgc2V0IHRvIDMwJSwgdGhlIG5ldyBSZXBsaWNhU2V0IGNhbiBiZSBzY2FsZWQgdXAgaW1tZWRpYXRlbHkgd2hlbiB0aGUgcm9sbGluZyB1cGRhdGVcbiAgICogc3RhcnRzLCBzdWNoIHRoYXQgdGhlIHRvdGFsIG51bWJlciBvZiBvbGQgYW5kIG5ldyBwb2RzIGRvIG5vdCBleGNlZWQgMTMwJSBvZiBkZXNpcmVkIHBvZHMuXG4gICAqIE9uY2Ugb2xkIHBvZHMgaGF2ZSBiZWVuIGtpbGxlZCwgbmV3IFJlcGxpY2FTZXQgY2FuIGJlIHNjYWxlZCB1cCBmdXJ0aGVyLCBlbnN1cmluZyB0aGF0XG4gICAqIHRvdGFsIG51bWJlciBvZiBwb2RzIHJ1bm5pbmcgYXQgYW55IHRpbWUgZHVyaW5nIHRoZSB1cGRhdGUgaXMgYXQgbW9zdCAxMzAlIG9mIGRlc2lyZWQgcG9kcy5cbiAgICpcbiAgICogQGRlZmF1bHQgJzI1JSdcbiAgICovXG4gIHJlYWRvbmx5IG1heFN1cmdlPzogUGVyY2VudE9yQWJzb2x1dGU7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBwb2RzIHRoYXQgY2FuIGJlIHVuYXZhaWxhYmxlIGR1cmluZyB0aGUgdXBkYXRlLlxuICAgKiBWYWx1ZSBjYW4gYmUgYW4gYWJzb2x1dGUgbnVtYmVyIChleDogNSkgb3IgYSBwZXJjZW50YWdlIG9mIGRlc2lyZWQgcG9kcyAoZXg6IDEwJSkuXG4gICAqIEFic29sdXRlIG51bWJlciBpcyBjYWxjdWxhdGVkIGZyb20gcGVyY2VudGFnZSBieSByb3VuZGluZyBkb3duLlxuICAgKiBUaGlzIGNhbiBub3QgYmUgMCBpZiBgbWF4U3VyZ2VgIGlzIDAuXG4gICAqXG4gICAqIEV4YW1wbGU6IHdoZW4gdGhpcyBpcyBzZXQgdG8gMzAlLCB0aGUgb2xkIFJlcGxpY2FTZXQgY2FuIGJlIHNjYWxlZCBkb3duIHRvIDcwJSBvZiBkZXNpcmVkXG4gICAqIHBvZHMgaW1tZWRpYXRlbHkgd2hlbiB0aGUgcm9sbGluZyB1cGRhdGUgc3RhcnRzLiBPbmNlIG5ldyBwb2RzIGFyZSByZWFkeSwgb2xkIFJlcGxpY2FTZXQgY2FuXG4gICAqIGJlIHNjYWxlZCBkb3duIGZ1cnRoZXIsIGZvbGxvd2VkIGJ5IHNjYWxpbmcgdXAgdGhlIG5ldyBSZXBsaWNhU2V0LCBlbnN1cmluZyB0aGF0IHRoZSB0b3RhbFxuICAgKiBudW1iZXIgb2YgcG9kcyBhdmFpbGFibGUgYXQgYWxsIHRpbWVzIGR1cmluZyB0aGUgdXBkYXRlIGlzIGF0IGxlYXN0IDcwJSBvZiBkZXNpcmVkIHBvZHMuXG4gICAqXG4gICAqIEBkZWZhdWx0ICcyNSUnXG4gICAqL1xuICByZWFkb25seSBtYXhVbmF2YWlsYWJsZT86IFBlcmNlbnRPckFic29sdXRlO1xuXG59XG5cbi8qKlxuICogVW5pb24gbGlrZSBjbGFzcyByZXBzZW50aW5nIGVpdGhlciBhIHJhdGlvbiBpblxuICogcGVyY2VudHMgb3IgYW4gYWJzb2x1dGUgbnVtYmVyLlxuICovXG5leHBvcnQgY2xhc3MgUGVyY2VudE9yQWJzb2x1dGUge1xuXG4gIC8qKlxuICAgKiBQZXJjZW50IHJhdGlvLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBwZXJjZW50KHBlcmNlbnQ6IG51bWJlcik6IFBlcmNlbnRPckFic29sdXRlIHtcbiAgICByZXR1cm4gbmV3IFBlcmNlbnRPckFic29sdXRlKGAke3BlcmNlbnR9JWApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFic29sdXRlIG51bWJlci5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgYWJzb2x1dGUobnVtOiBudW1iZXIpOiBQZXJjZW50T3JBYnNvbHV0ZSB7XG4gICAgcmV0dXJuIG5ldyBQZXJjZW50T3JBYnNvbHV0ZShudW0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgdmFsdWU6IGFueSkge31cblxuICBwdWJsaWMgaXNaZXJvKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnZhbHVlID09PSBQZXJjZW50T3JBYnNvbHV0ZS5hYnNvbHV0ZSgwKS52YWx1ZSB8fCB0aGlzLnZhbHVlID09PSBQZXJjZW50T3JBYnNvbHV0ZS5wZXJjZW50KDApLnZhbHVlO1xuICB9XG5cbn1cblxuLyoqXG4gKiBEZXBsb3ltZW50IHN0cmF0ZWdpZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZXBsb3ltZW50U3RyYXRlZ3kge1xuXG4gIC8qKlxuICAgKiBBbGwgZXhpc3RpbmcgUG9kcyBhcmUga2lsbGVkIGJlZm9yZSBuZXcgb25lcyBhcmUgY3JlYXRlZC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy93b3JrbG9hZHMvY29udHJvbGxlcnMvZGVwbG95bWVudC8jcmVjcmVhdGUtZGVwbG95bWVudFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWNyZWF0ZSgpOiBEZXBsb3ltZW50U3RyYXRlZ3kge1xuICAgIHJldHVybiBuZXcgRGVwbG95bWVudFN0cmF0ZWd5KHtcbiAgICAgIHR5cGU6ICdSZWNyZWF0ZScsXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHJvbGxpbmdVcGRhdGUob3B0aW9uczogRGVwbG95bWVudFN0cmF0ZWd5Um9sbGluZ1VwZGF0ZU9wdGlvbnMgPSB7fSk6IERlcGxveW1lbnRTdHJhdGVneSB7XG5cbiAgICBjb25zdCBtYXhTdXJnZSA9IG9wdGlvbnMubWF4U3VyZ2UgPz8gUGVyY2VudE9yQWJzb2x1dGUucGVyY2VudCgyNSk7XG4gICAgY29uc3QgbWF4VW5hdmFpbGFibGUgPSBvcHRpb25zLm1heFVuYXZhaWxhYmxlID8/IFBlcmNlbnRPckFic29sdXRlLnBlcmNlbnQoMjUpO1xuXG4gICAgaWYgKG1heFN1cmdlLmlzWmVybygpICYmIG1heFVuYXZhaWxhYmxlLmlzWmVybygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1xcJ21heFN1cmdlXFwnIGFuZCBcXCdtYXhVbmF2YWlsYWJsZVxcJyBjYW5ub3QgYmUgYm90aCB6ZXJvJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEZXBsb3ltZW50U3RyYXRlZ3koe1xuICAgICAgdHlwZTogJ1JvbGxpbmdVcGRhdGUnLFxuICAgICAgcm9sbGluZ1VwZGF0ZTogeyBtYXhTdXJnZSwgbWF4VW5hdmFpbGFibGUgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzdHJhdGVneTogazhzLkRlcGxveW1lbnRTdHJhdGVneSkge31cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgX3RvS3ViZSgpOiBrOHMuRGVwbG95bWVudFN0cmF0ZWd5IHtcbiAgICByZXR1cm4gdGhpcy5zdHJhdGVneTtcbiAgfVxuXG59Il19","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Handler = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst _action = require(\"./_action\");\n/**\n * Defines a specific action that should be taken.\n */\nclass Handler {\n    constructor(tcpSocketOptions, commandOptions, httpGetOptions) {\n        this.tcpSocketOptions = tcpSocketOptions;\n        this.commandOptions = commandOptions;\n        this.httpGetOptions = httpGetOptions;\n    }\n    /**\n     * Defines a handler based on an HTTP GET request to the IP address of the container.\n     *\n     * @param path The URL path to hit\n     * @param options Options\n     */\n    static fromHttpGet(path, options = {}) {\n        return new Handler(undefined, undefined, { path, ...options });\n    }\n    /**\n     * Defines a handler based on a command which is executed within the container.\n     *\n     * @param command The command to execute\n     */\n    static fromCommand(command) {\n        return new Handler(undefined, { command }, undefined);\n    }\n    /**\n     * Defines a handler based opening a connection to a TCP socket on the container.\n     *\n     * @param options Options\n     */\n    static fromTcpSocket(options = {}) {\n        return new Handler(options, undefined, undefined);\n    }\n    /**\n     * @internal\n     */\n    _toKube(cont) {\n        const exec = this.commandOptions ? _action.Action.fromCommand(this.commandOptions.command) : undefined;\n        const httpGet = this.httpGetOptions ? _action.Action.fromHttpGet(cont, this.httpGetOptions.path, this.httpGetOptions) : undefined;\n        const tcpSocket = this.tcpSocketOptions ? _action.Action.fromTcpSocket(cont, this.tcpSocketOptions) : undefined;\n        return { exec, httpGet, tcpSocket };\n    }\n}\nexports.Handler = Handler;\n_a = JSII_RTTI_SYMBOL_1;\nHandler[_a] = { fqn: \"cdk8s-plus-22.Handler\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEscUNBQXFDO0FBc0NyQzs7R0FFRztBQUNILE1BQWEsT0FBTztJQThCbEIsWUFDbUIsZ0JBQThDLEVBQzlDLGNBQXNDLEVBQ3RDLGNBQTZEO1FBRjdELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBOEI7UUFDOUMsbUJBQWMsR0FBZCxjQUFjLENBQXdCO1FBQ3RDLG1CQUFjLEdBQWQsY0FBYyxDQUErQztJQUFHLENBQUM7SUEvQnBGOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFZLEVBQUUsVUFBcUMsRUFBRTtRQUM3RSxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFpQjtRQUN6QyxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLGFBQWEsQ0FBQyxVQUF1QyxFQUFFO1FBQ25FLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBT0Q7O09BRUc7SUFDSSxPQUFPLENBQUMsSUFBeUI7UUFFdEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3ZHLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNsSSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBRWhILE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDO0lBQ3RDLENBQUM7O0FBN0NILDBCQStDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF9hY3Rpb24gZnJvbSAnLi9fYWN0aW9uJztcbmltcG9ydCAqIGFzIGNvbnRhaW5lciBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQgKiBhcyBrOHMgZnJvbSAnLi9pbXBvcnRzL2s4cyc7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYEhhbmRsZXIuZnJvbVRjcFNvY2tldGAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSGFuZGxlckZyb21UY3BTb2NrZXRPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBUQ1AgcG9ydCB0byBjb25uZWN0IHRvIG9uIHRoZSBjb250YWluZXIuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gZGVmYXVsdHMgdG8gYGNvbnRhaW5lci5wb3J0YC5cbiAgICovXG4gIHJlYWRvbmx5IHBvcnQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBob3N0IG5hbWUgdG8gY29ubmVjdCB0byBvbiB0aGUgY29udGFpbmVyLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGRlZmF1bHRzIHRvIHRoZSBwb2QgSVBcbiAgICovXG4gIHJlYWRvbmx5IGhvc3Q/OiBzdHJpbmc7XG5cbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciBgSGFuZGxlci5mcm9tSHR0cEdldGAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSGFuZGxlckZyb21IdHRwR2V0T3B0aW9ucyB7XG5cbiAgLyoqXG4gICAqIFRoZSBUQ1AgcG9ydCB0byB1c2Ugd2hlbiBzZW5kaW5nIHRoZSBHRVQgcmVxdWVzdC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBkZWZhdWx0cyB0byBgY29udGFpbmVyLnBvcnRgLlxuICAgKi9cbiAgcmVhZG9ubHkgcG9ydD86IG51bWJlcjtcblxufVxuXG4vKipcbiAqIERlZmluZXMgYSBzcGVjaWZpYyBhY3Rpb24gdGhhdCBzaG91bGQgYmUgdGFrZW4uXG4gKi9cbmV4cG9ydCBjbGFzcyBIYW5kbGVyIHtcblxuICAvKipcbiAgICogRGVmaW5lcyBhIGhhbmRsZXIgYmFzZWQgb24gYW4gSFRUUCBHRVQgcmVxdWVzdCB0byB0aGUgSVAgYWRkcmVzcyBvZiB0aGUgY29udGFpbmVyLlxuICAgKlxuICAgKiBAcGFyYW0gcGF0aCBUaGUgVVJMIHBhdGggdG8gaGl0XG4gICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUh0dHBHZXQocGF0aDogc3RyaW5nLCBvcHRpb25zOiBIYW5kbGVyRnJvbUh0dHBHZXRPcHRpb25zID0ge30pOiBIYW5kbGVyIHtcbiAgICByZXR1cm4gbmV3IEhhbmRsZXIodW5kZWZpbmVkLCB1bmRlZmluZWQsIHsgcGF0aCwgLi4ub3B0aW9ucyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIGEgaGFuZGxlciBiYXNlZCBvbiBhIGNvbW1hbmQgd2hpY2ggaXMgZXhlY3V0ZWQgd2l0aGluIHRoZSBjb250YWluZXIuXG4gICAqXG4gICAqIEBwYXJhbSBjb21tYW5kIFRoZSBjb21tYW5kIHRvIGV4ZWN1dGVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUNvbW1hbmQoY29tbWFuZDogc3RyaW5nW10pOiBIYW5kbGVyIHtcbiAgICByZXR1cm4gbmV3IEhhbmRsZXIodW5kZWZpbmVkLCB7IGNvbW1hbmQgfSwgdW5kZWZpbmVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIGEgaGFuZGxlciBiYXNlZCBvcGVuaW5nIGEgY29ubmVjdGlvbiB0byBhIFRDUCBzb2NrZXQgb24gdGhlIGNvbnRhaW5lci5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uc1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tVGNwU29ja2V0KG9wdGlvbnM6IEhhbmRsZXJGcm9tVGNwU29ja2V0T3B0aW9ucyA9IHt9KTogSGFuZGxlciB7XG4gICAgcmV0dXJuIG5ldyBIYW5kbGVyKG9wdGlvbnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgfVxuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSB0Y3BTb2NrZXRPcHRpb25zPzogSGFuZGxlckZyb21UY3BTb2NrZXRPcHRpb25zLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29tbWFuZE9wdGlvbnM/OiB7IGNvbW1hbmQ6IHN0cmluZ1tdIH0sXG4gICAgcHJpdmF0ZSByZWFkb25seSBodHRwR2V0T3B0aW9ucz86IHsgcGF0aDogc3RyaW5nIH0gJiBIYW5kbGVyRnJvbUh0dHBHZXRPcHRpb25zKSB7fVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHB1YmxpYyBfdG9LdWJlKGNvbnQ6IGNvbnRhaW5lci5Db250YWluZXIpOiBrOHMuSGFuZGxlciB7XG5cbiAgICBjb25zdCBleGVjID0gdGhpcy5jb21tYW5kT3B0aW9ucyA/IF9hY3Rpb24uQWN0aW9uLmZyb21Db21tYW5kKHRoaXMuY29tbWFuZE9wdGlvbnMuY29tbWFuZCkgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgaHR0cEdldCA9IHRoaXMuaHR0cEdldE9wdGlvbnMgPyBfYWN0aW9uLkFjdGlvbi5mcm9tSHR0cEdldChjb250LCB0aGlzLmh0dHBHZXRPcHRpb25zLnBhdGgsIHRoaXMuaHR0cEdldE9wdGlvbnMpIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHRjcFNvY2tldCA9IHRoaXMudGNwU29ja2V0T3B0aW9ucyA/IF9hY3Rpb24uQWN0aW9uLmZyb21UY3BTb2NrZXQoY29udCwgdGhpcy50Y3BTb2NrZXRPcHRpb25zKSA6IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiB7IGV4ZWMsIGh0dHBHZXQsIHRjcFNvY2tldCB9O1xuICB9XG5cbn0iXX0=","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toJson_ExternalDocumentation = exports.toJson_ServiceAccountTokenProjection = exports.toJson_SecretProjection = exports.toJson_DownwardApiProjection = exports.toJson_ConfigMapProjection = exports.toJson_HttpHeader = exports.toJson_SecretKeySelector = exports.toJson_ResourceFieldSelector = exports.toJson_ObjectFieldSelector = exports.toJson_ConfigMapKeySelector = exports.toJson_NodeSelectorRequirement = exports.toJson_CustomResourceSubresourceScale = exports.toJson_JsonSchemaProps = exports.toJson_IpBlock = exports.toJson_HttpIngressPath = exports.toJson_ServiceBackendPort = exports.toJson_QueuingConfigurationV1Beta1 = exports.toJson_UserSubjectV1Beta1 = exports.toJson_ServiceAccountSubjectV1Beta1 = exports.toJson_GroupSubjectV1Beta1 = exports.toJson_VolumeProjection = exports.toJson_PersistentVolumeClaimTemplate = exports.toJson_DownwardApiVolumeFile = exports.toJson_KeyToPath = exports.toJson_Capabilities = exports.toJson_TcpSocketAction = exports.toJson_HttpGetAction = exports.toJson_ExecAction = exports.toJson_Handler = exports.toJson_SecretEnvSource = exports.toJson_ConfigMapEnvSource = exports.toJson_EnvVarSource = exports.toJson_PodAffinityTerm = exports.toJson_WeightedPodAffinityTerm = exports.toJson_PreferredSchedulingTerm = exports.toJson_NodeSelectorTerm = exports.toJson_MetricIdentifierV2Beta2 = exports.toJson_MetricTargetV2Beta2 = exports.toJson_HpaScalingPolicyV2Beta2 = exports.toJson_CustomResourceSubresources = exports.toJson_CustomResourceValidation = exports.toJson_CustomResourceColumnDefinition = exports.toJson_WebhookConversion = exports.toJson_VolumeNodeResources = exports.toJson_IdRangeV1Beta1 = exports.toJson_NetworkPolicyPeer = exports.toJson_NetworkPolicyPort = exports.toJson_HttpIngressRuleValue = exports.toJson_IngressServiceBackend = exports.toJson_LimitResponseV1Beta1 = exports.toJson_SubjectV1Beta1 = exports.toJson_ResourcePolicyRuleV1Beta1 = exports.toJson_NonResourcePolicyRuleV1Beta1 = exports.toJson_ForZoneV1Beta1 = exports.toJson_ForZone = exports.toJson_ClientIpConfig = exports.toJson_ScopedResourceSelectorRequirement = exports.toJson_StorageOsVolumeSource = exports.toJson_SecretVolumeSource = exports.toJson_ScaleIoVolumeSource = exports.toJson_RbdVolumeSource = exports.toJson_ProjectedVolumeSource = exports.toJson_PersistentVolumeClaimVolumeSource = exports.toJson_IscsiVolumeSource = exports.toJson_GlusterfsVolumeSource = exports.toJson_GitRepoVolumeSource = exports.toJson_FlexVolumeSource = exports.toJson_EphemeralVolumeSource = exports.toJson_EmptyDirVolumeSource = exports.toJson_DownwardApiVolumeSource = exports.toJson_CsiVolumeSource = exports.toJson_ConfigMapVolumeSource = exports.toJson_CinderVolumeSource = exports.toJson_CephFsVolumeSource = exports.toJson_AzureFileVolumeSource = exports.toJson_WindowsSecurityContextOptions = exports.toJson_Sysctl = exports.toJson_SeccompProfile = exports.toJson_SeLinuxOptions = exports.toJson_PodDnsConfigOption = exports.toJson_VolumeMount = exports.toJson_VolumeDevice = exports.toJson_SecurityContext = exports.toJson_ContainerPort = exports.toJson_Probe = exports.toJson_Lifecycle = exports.toJson_EnvFromSource = exports.toJson_EnvVar = exports.toJson_PodAntiAffinity = exports.toJson_PodAffinity = exports.toJson_NodeAffinity = exports.toJson_NodeSelector = exports.toJson_SecretReference = exports.toJson_ConfigMapNodeConfigSource = exports.toJson_ResourceMetricSourceV2Beta2 = exports.toJson_PodsMetricSourceV2Beta2 = exports.toJson_ObjectMetricSourceV2Beta2 = exports.toJson_ExternalMetricSourceV2Beta2 = exports.toJson_ContainerResourceMetricSourceV2Beta2 = exports.toJson_HpaScalingRulesV2Beta2 = exports.toJson_ResourceMetricSourceV2Beta1 = exports.toJson_PodsMetricSourceV2Beta1 = exports.toJson_ObjectMetricSourceV2Beta1 = exports.toJson_ExternalMetricSourceV2Beta1 = exports.toJson_ContainerResourceMetricSourceV2Beta1 = exports.toJson_RollingUpdateStatefulSetStrategy = exports.toJson_RollingUpdateDeployment = exports.toJson_RollingUpdateDaemonSet = exports.toJson_ServiceReference = exports.toJson_StatusCause = exports.toJson_CustomResourceDefinitionVersion = exports.toJson_CustomResourceDefinitionNames = exports.toJson_CustomResourceConversion = exports.toJson_VolumeAttachmentSourceV1Alpha1 = exports.toJson_LabelSelectorRequirement = exports.toJson_VolumeAttachmentSource = exports.toJson_TopologySelectorLabelRequirement = exports.toJson_CsiNodeDriver = exports.toJson_TokenRequest = exports.toJson_SupplementalGroupsStrategyOptionsV1Beta1 = exports.toJson_SeLinuxStrategyOptionsV1Beta1 = exports.toJson_RuntimeClassStrategyOptionsV1Beta1 = exports.toJson_RunAsUserStrategyOptionsV1Beta1 = exports.toJson_RunAsGroupStrategyOptionsV1Beta1 = exports.toJson_HostPortRangeV1Beta1 = exports.toJson_FsGroupStrategyOptionsV1Beta1 = exports.toJson_AllowedHostPathV1Beta1 = exports.toJson_AllowedFlexVolumeV1Beta1 = exports.toJson_AllowedCsiDriverV1Beta1 = exports.IntOrString = exports.toJson_Preconditions = exports.IoK8SApimachineryPkgApisMetaV1DeleteOptionsKind = exports.toJson_SchedulingV1Alpha1 = exports.toJson_OverheadV1Alpha1 = exports.toJson_NetworkPolicyIngressRule = exports.toJson_NetworkPolicyEgressRule = exports.toJson_IngressClassParametersReference = exports.toJson_IngressTls = exports.toJson_IngressRule = exports.toJson_IngressBackend = exports.toJson_LimitedPriorityLevelConfigurationV1Beta1 = exports.toJson_PolicyRulesWithSubjectsV1Beta1 = exports.toJson_PriorityLevelConfigurationReferenceV1Beta1 = exports.toJson_FlowDistinguisherMethodV1Beta1 = exports.toJson_EndpointHintsV1Beta1 = exports.toJson_EndpointConditionsV1Beta1 = exports.toJson_EndpointHints = exports.toJson_EndpointConditions = exports.toJson_SessionAffinityConfig = exports.toJson_ServicePort = exports.toJson_ScopeSelector = exports.toJson_Volume = exports.toJson_TopologySpreadConstraint = exports.toJson_Toleration = exports.toJson_PodSecurityContext = exports.toJson_PodReadinessGate = exports.toJson_HostAlias = exports.toJson_EphemeralContainer = exports.toJson_PodDnsConfig = exports.toJson_Container = exports.toJson_Affinity = exports.toJson_ResourceRequirements = exports.toJson_TypedLocalObjectReference = exports.toJson_VsphereVirtualDiskVolumeSource = exports.toJson_StorageOsPersistentVolumeSource = exports.toJson_ScaleIoPersistentVolumeSource = exports.toJson_RbdPersistentVolumeSource = exports.toJson_QuobyteVolumeSource = exports.toJson_PortworxVolumeSource = exports.toJson_PhotonPersistentDiskVolumeSource = exports.toJson_VolumeNodeAffinity = exports.toJson_NfsVolumeSource = exports.toJson_LocalVolumeSource = exports.toJson_IscsiPersistentVolumeSource = exports.toJson_HostPathVolumeSource = exports.toJson_GlusterfsPersistentVolumeSource = exports.toJson_GcePersistentDiskVolumeSource = exports.toJson_FlockerVolumeSource = exports.toJson_FlexPersistentVolumeSource = exports.toJson_FcVolumeSource = exports.toJson_CsiPersistentVolumeSource = exports.toJson_CinderPersistentVolumeSource = exports.toJson_CephFsPersistentVolumeSource = exports.toJson_AzureFilePersistentVolumeSource = exports.toJson_AzureDiskVolumeSource = exports.toJson_AwsElasticBlockStoreVolumeSource = exports.toJson_Taint = exports.toJson_NodeConfigSource = exports.toJson_LimitRangeItem = exports.toJson_EndpointAddress = exports.toJson_JobTemplateSpecV1Beta1 = exports.toJson_JobTemplateSpec = exports.toJson_CrossVersionObjectReferenceV2Beta2 = exports.toJson_MetricSpecV2Beta2 = exports.toJson_HorizontalPodAutoscalerBehaviorV2Beta2 = exports.toJson_CrossVersionObjectReferenceV2Beta1 = exports.toJson_MetricSpecV2Beta1 = exports.toJson_CrossVersionObjectReference = exports.toJson_ResourceAttributes = exports.toJson_NonResourceAttributes = exports.toJson_BoundObjectReference = exports.toJson_StatefulSetUpdateStrategy = exports.toJson_DeploymentStrategy = exports.toJson_DaemonSetUpdateStrategy = exports.toJson_RuleWithOperations = exports.toJson_WebhookClientConfig = exports.toJson_OwnerReference = exports.toJson_ManagedFieldsEntry = exports.toJson_ApiServiceSpec = exports.toJson_StatusDetails = exports.toJson_CustomResourceDefinitionSpec = exports.toJson_VolumeAttachmentSpecV1Alpha1 = exports.toJson_LabelSelector = exports.Quantity = exports.toJson_VolumeAttachmentSpec = exports.toJson_TopologySelectorTerm = exports.toJson_CsiNodeSpec = exports.toJson_CsiDriverSpec = exports.toJson_SubjectV1Alpha1 = exports.toJson_RoleRefV1Alpha1 = exports.toJson_PolicyRuleV1Alpha1 = exports.toJson_AggregationRuleV1Alpha1 = exports.toJson_Subject = exports.toJson_RoleRef = exports.toJson_PolicyRule = exports.toJson_AggregationRule = exports.toJson_PodSecurityPolicySpecV1Beta1 = exports.toJson_PodDisruptionBudgetSpecV1Beta1 = exports.toJson_PodDisruptionBudgetSpec = exports.toJson_DeleteOptions = exports.toJson_SchedulingV1Beta1 = exports.toJson_OverheadV1Beta1 = exports.toJson_RuntimeClassSpecV1Alpha1 = exports.toJson_Scheduling = exports.toJson_Overhead = exports.toJson_NetworkPolicySpec = exports.toJson_IngressClassSpec = exports.toJson_IngressSpec = exports.toJson_PriorityLevelConfigurationSpecV1Beta1 = exports.toJson_FlowSchemaSpecV1Beta1 = exports.toJson_EventSeriesV1Beta1 = exports.toJson_EndpointPortV1Beta1 = exports.toJson_EndpointV1Beta1 = exports.toJson_EndpointPort = exports.toJson_Endpoint = exports.toJson_LocalObjectReference = exports.toJson_ServiceSpec = exports.toJson_ResourceQuotaSpec = exports.toJson_ReplicationControllerSpec = exports.toJson_PodTemplateSpec = exports.toJson_PodSpec = exports.toJson_PersistentVolumeClaimSpec = exports.toJson_PersistentVolumeSpec = exports.toJson_NodeSpec = exports.toJson_NamespaceSpec = exports.toJson_LimitRangeSpec = exports.toJson_EventSeries = exports.toJson_EventSource = exports.toJson_EndpointSubset = exports.toJson_ComponentCondition = exports.toJson_ObjectReference = exports.toJson_LeaseSpec = exports.toJson_CertificateSigningRequestSpec = exports.toJson_CronJobSpecV1Beta1 = exports.toJson_JobSpec = exports.toJson_CronJobSpec = exports.toJson_HorizontalPodAutoscalerSpecV2Beta2 = exports.toJson_HorizontalPodAutoscalerSpecV2Beta1 = exports.toJson_ScaleSpec = exports.toJson_HorizontalPodAutoscalerSpec = exports.toJson_SelfSubjectRulesReviewSpec = exports.toJson_SelfSubjectAccessReviewSpec = exports.toJson_SubjectAccessReviewSpec = exports.toJson_TokenReviewSpec = exports.toJson_TokenRequestSpec = exports.toJson_StatefulSetSpec = exports.toJson_ReplicaSetSpec = exports.toJson_DeploymentSpec = exports.toJson_DaemonSetSpec = exports.toJson_ValidatingWebhook = exports.toJson_ListMeta = exports.toJson_MutatingWebhook = exports.toJson_ObjectMeta = exports.toJson_KubeApiServiceListProps = exports.toJson_KubeApiServiceProps = exports.toJson_KubeStatusProps = exports.toJson_KubeCustomResourceDefinitionListProps = exports.toJson_KubeCustomResourceDefinitionProps = exports.toJson_KubeCsiStorageCapacityListV1Beta1Props = exports.toJson_KubeCsiStorageCapacityV1Beta1Props = exports.toJson_KubeVolumeAttachmentListV1Alpha1Props = exports.toJson_KubeVolumeAttachmentV1Alpha1Props = exports.toJson_KubeCsiStorageCapacityListV1Alpha1Props = exports.toJson_KubeCsiStorageCapacityV1Alpha1Props = exports.toJson_KubeVolumeAttachmentListProps = exports.toJson_KubeVolumeAttachmentProps = exports.toJson_KubeStorageClassListProps = exports.toJson_KubeStorageClassProps = exports.toJson_KubeCsiNodeListProps = exports.toJson_KubeCsiNodeProps = exports.toJson_KubeCsiDriverListProps = exports.toJson_KubeCsiDriverProps = exports.toJson_KubePriorityClassListV1Alpha1Props = exports.toJson_KubePriorityClassV1Alpha1Props = exports.toJson_KubePriorityClassListProps = exports.toJson_KubePriorityClassProps = exports.toJson_KubeRoleListV1Alpha1Props = exports.toJson_KubeRoleBindingListV1Alpha1Props = exports.toJson_KubeRoleBindingV1Alpha1Props = exports.toJson_KubeRoleV1Alpha1Props = exports.toJson_KubeClusterRoleListV1Alpha1Props = exports.toJson_KubeClusterRoleBindingListV1Alpha1Props = exports.toJson_KubeClusterRoleBindingV1Alpha1Props = exports.toJson_KubeClusterRoleV1Alpha1Props = exports.toJson_KubeRoleListProps = exports.toJson_KubeRoleBindingListProps = exports.toJson_KubeRoleBindingProps = exports.toJson_KubeRoleProps = exports.toJson_KubeClusterRoleListProps = exports.toJson_KubeClusterRoleBindingListProps = exports.toJson_KubeClusterRoleBindingProps = exports.toJson_KubeClusterRoleProps = exports.toJson_KubePodSecurityPolicyListV1Beta1Props = exports.toJson_KubePodSecurityPolicyV1Beta1Props = exports.toJson_KubePodDisruptionBudgetListV1Beta1Props = exports.toJson_KubePodDisruptionBudgetV1Beta1Props = exports.toJson_KubePodDisruptionBudgetListProps = exports.toJson_KubePodDisruptionBudgetProps = exports.toJson_KubeEvictionProps = exports.toJson_KubeRuntimeClassListV1Beta1Props = exports.toJson_KubeRuntimeClassV1Beta1Props = exports.toJson_KubeRuntimeClassListV1Alpha1Props = exports.toJson_KubeRuntimeClassV1Alpha1Props = exports.toJson_KubeRuntimeClassListProps = exports.toJson_KubeRuntimeClassProps = exports.toJson_KubeNetworkPolicyListProps = exports.toJson_KubeNetworkPolicyProps = exports.toJson_KubeIngressListProps = exports.toJson_KubeIngressClassListProps = exports.toJson_KubeIngressClassProps = exports.toJson_KubeIngressProps = exports.toJson_KubePriorityLevelConfigurationListV1Beta1Props = exports.toJson_KubePriorityLevelConfigurationV1Beta1Props = exports.toJson_KubeFlowSchemaListV1Beta1Props = exports.toJson_KubeFlowSchemaV1Beta1Props = exports.toJson_KubeEventListV1Beta1Props = exports.toJson_KubeEventV1Beta1Props = exports.toJson_KubeEndpointSliceListV1Beta1Props = exports.toJson_KubeEndpointSliceV1Beta1Props = exports.toJson_KubeEndpointSliceListProps = exports.toJson_KubeEndpointSliceProps = exports.toJson_KubeServiceListProps = exports.toJson_KubeServiceAccountListProps = exports.toJson_KubeServiceAccountProps = exports.toJson_KubeServiceProps = exports.toJson_KubeSecretListProps = exports.toJson_KubeSecretProps = exports.toJson_KubeResourceQuotaListProps = exports.toJson_KubeResourceQuotaProps = exports.toJson_KubeReplicationControllerListProps = exports.toJson_KubeReplicationControllerProps = exports.toJson_KubePodTemplateListProps = exports.toJson_KubePodTemplateProps = exports.toJson_KubePodListProps = exports.toJson_KubePodProps = exports.toJson_KubePersistentVolumeListProps = exports.toJson_KubePersistentVolumeClaimListProps = exports.toJson_KubePersistentVolumeClaimProps = exports.toJson_KubePersistentVolumeProps = exports.toJson_KubeNodeListProps = exports.toJson_KubeNodeProps = exports.toJson_KubeNamespaceListProps = exports.toJson_KubeNamespaceProps = exports.toJson_KubeLimitRangeListProps = exports.toJson_KubeLimitRangeProps = exports.toJson_KubeEventListProps = exports.toJson_KubeEventProps = exports.toJson_KubeEndpointsListProps = exports.toJson_KubeEndpointsProps = exports.toJson_KubeConfigMapListProps = exports.toJson_KubeConfigMapProps = exports.toJson_KubeComponentStatusListProps = exports.toJson_KubeComponentStatusProps = exports.toJson_KubeBindingProps = exports.toJson_KubeLeaseListProps = exports.toJson_KubeLeaseProps = exports.toJson_KubeCertificateSigningRequestListProps = exports.toJson_KubeCertificateSigningRequestProps = exports.toJson_KubeCronJobListV1Beta1Props = exports.toJson_KubeCronJobV1Beta1Props = exports.toJson_KubeJobListProps = exports.toJson_KubeJobProps = exports.toJson_KubeCronJobListProps = exports.toJson_KubeCronJobProps = exports.toJson_KubeHorizontalPodAutoscalerListV2Beta2Props = exports.toJson_KubeHorizontalPodAutoscalerV2Beta2Props = exports.toJson_KubeHorizontalPodAutoscalerListV2Beta1Props = exports.toJson_KubeHorizontalPodAutoscalerV2Beta1Props = exports.toJson_KubeScaleProps = exports.toJson_KubeHorizontalPodAutoscalerListProps = exports.toJson_KubeHorizontalPodAutoscalerProps = exports.toJson_KubeSubjectAccessReviewProps = exports.toJson_KubeSelfSubjectRulesReviewProps = exports.toJson_KubeSelfSubjectAccessReviewProps = exports.toJson_KubeLocalSubjectAccessReviewProps = exports.toJson_KubeTokenReviewProps = exports.toJson_KubeTokenRequestProps = exports.toJson_KubeStatefulSetListProps = exports.toJson_KubeStatefulSetProps = exports.toJson_KubeReplicaSetListProps = exports.toJson_KubeReplicaSetProps = exports.toJson_KubeDeploymentListProps = exports.toJson_KubeDeploymentProps = exports.toJson_KubeDaemonSetListProps = exports.toJson_KubeDaemonSetProps = exports.toJson_KubeControllerRevisionListProps = exports.toJson_KubeControllerRevisionProps = exports.toJson_KubeStorageVersionListV1Alpha1Props = exports.toJson_KubeStorageVersionV1Alpha1Props = exports.toJson_KubeValidatingWebhookConfigurationListProps = exports.toJson_KubeValidatingWebhookConfigurationProps = exports.toJson_KubeMutatingWebhookConfigurationListProps = exports.toJson_KubeMutatingWebhookConfigurationProps = exports.KubeApiServiceList = exports.KubeApiService = exports.KubeStatus = exports.KubeCustomResourceDefinitionList = exports.KubeCustomResourceDefinition = exports.KubeCsiStorageCapacityListV1Beta1 = exports.KubeCsiStorageCapacityV1Beta1 = exports.KubeVolumeAttachmentListV1Alpha1 = exports.KubeVolumeAttachmentV1Alpha1 = exports.KubeCsiStorageCapacityListV1Alpha1 = exports.KubeCsiStorageCapacityV1Alpha1 = exports.KubeVolumeAttachmentList = exports.KubeVolumeAttachment = exports.KubeStorageClassList = exports.KubeStorageClass = exports.KubeCsiNodeList = exports.KubeCsiNode = exports.KubeCsiDriverList = exports.KubeCsiDriver = exports.KubePriorityClassListV1Alpha1 = exports.KubePriorityClassV1Alpha1 = exports.KubePriorityClassList = exports.KubePriorityClass = exports.KubeRoleListV1Alpha1 = exports.KubeRoleBindingListV1Alpha1 = exports.KubeRoleBindingV1Alpha1 = exports.KubeRoleV1Alpha1 = exports.KubeClusterRoleListV1Alpha1 = exports.KubeClusterRoleBindingListV1Alpha1 = exports.KubeClusterRoleBindingV1Alpha1 = exports.KubeClusterRoleV1Alpha1 = exports.KubeRoleList = exports.KubeRoleBindingList = exports.KubeRoleBinding = exports.KubeRole = exports.KubeClusterRoleList = exports.KubeClusterRoleBindingList = exports.KubeClusterRoleBinding = exports.KubeClusterRole = exports.KubePodSecurityPolicyListV1Beta1 = exports.KubePodSecurityPolicyV1Beta1 = exports.KubePodDisruptionBudgetListV1Beta1 = exports.KubePodDisruptionBudgetV1Beta1 = exports.KubePodDisruptionBudgetList = exports.KubePodDisruptionBudget = exports.KubeEviction = exports.KubeRuntimeClassListV1Beta1 = exports.KubeRuntimeClassV1Beta1 = exports.KubeRuntimeClassListV1Alpha1 = exports.KubeRuntimeClassV1Alpha1 = exports.KubeRuntimeClassList = exports.KubeRuntimeClass = exports.KubeNetworkPolicyList = exports.KubeNetworkPolicy = exports.KubeIngressList = exports.KubeIngressClassList = exports.KubeIngressClass = exports.KubeIngress = exports.KubePriorityLevelConfigurationListV1Beta1 = exports.KubePriorityLevelConfigurationV1Beta1 = exports.KubeFlowSchemaListV1Beta1 = exports.KubeFlowSchemaV1Beta1 = exports.KubeEventListV1Beta1 = exports.KubeEventV1Beta1 = exports.KubeEndpointSliceListV1Beta1 = exports.KubeEndpointSliceV1Beta1 = exports.KubeEndpointSliceList = exports.KubeEndpointSlice = exports.KubeServiceList = exports.KubeServiceAccountList = exports.KubeServiceAccount = exports.KubeService = exports.KubeSecretList = exports.KubeSecret = exports.KubeResourceQuotaList = exports.KubeResourceQuota = exports.KubeReplicationControllerList = exports.KubeReplicationController = exports.KubePodTemplateList = exports.KubePodTemplate = exports.KubePodList = exports.KubePod = exports.KubePersistentVolumeList = exports.KubePersistentVolumeClaimList = exports.KubePersistentVolumeClaim = exports.KubePersistentVolume = exports.KubeNodeList = exports.KubeNode = exports.KubeNamespaceList = exports.KubeNamespace = exports.KubeLimitRangeList = exports.KubeLimitRange = exports.KubeEventList = exports.KubeEvent = exports.KubeEndpointsList = exports.KubeEndpoints = exports.KubeConfigMapList = exports.KubeConfigMap = exports.KubeComponentStatusList = exports.KubeComponentStatus = exports.KubeBinding = exports.KubeLeaseList = exports.KubeLease = exports.KubeCertificateSigningRequestList = exports.KubeCertificateSigningRequest = exports.KubeCronJobListV1Beta1 = exports.KubeCronJobV1Beta1 = exports.KubeJobList = exports.KubeJob = exports.KubeCronJobList = exports.KubeCronJob = exports.KubeHorizontalPodAutoscalerListV2Beta2 = exports.KubeHorizontalPodAutoscalerV2Beta2 = exports.KubeHorizontalPodAutoscalerListV2Beta1 = exports.KubeHorizontalPodAutoscalerV2Beta1 = exports.KubeScale = exports.KubeHorizontalPodAutoscalerList = exports.KubeHorizontalPodAutoscaler = exports.KubeSubjectAccessReview = exports.KubeSelfSubjectRulesReview = exports.KubeSelfSubjectAccessReview = exports.KubeLocalSubjectAccessReview = exports.KubeTokenReview = exports.KubeTokenRequest = exports.KubeStatefulSetList = exports.KubeStatefulSet = exports.KubeReplicaSetList = exports.KubeReplicaSet = exports.KubeDeploymentList = exports.KubeDeployment = exports.KubeDaemonSetList = exports.KubeDaemonSet = exports.KubeControllerRevisionList = exports.KubeControllerRevision = exports.KubeStorageVersionListV1Alpha1 = exports.KubeStorageVersionV1Alpha1 = exports.KubeValidatingWebhookConfigurationList = exports.KubeValidatingWebhookConfiguration = exports.KubeMutatingWebhookConfigurationList = exports.KubeMutatingWebhookConfiguration = void 0;\n// generated by cdk8s\nconst cdk8s_1 = require(\"cdk8s\");\n/**\n * MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.\n *\n * @schema io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration\n */\nclass KubeMutatingWebhookConfiguration extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeMutatingWebhookConfiguration.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeMutatingWebhookConfiguration.GVK,\n            ...toJson_KubeMutatingWebhookConfigurationProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeMutatingWebhookConfiguration.GVK,\n            ...toJson_KubeMutatingWebhookConfigurationProps(resolved),\n        };\n    }\n}\nexports.KubeMutatingWebhookConfiguration = KubeMutatingWebhookConfiguration;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration\"\n */\nKubeMutatingWebhookConfiguration.GVK = {\n    apiVersion: 'admissionregistration.k8s.io/v1',\n    kind: 'MutatingWebhookConfiguration',\n};\n/**\n * MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.\n *\n * @schema io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList\n */\nclass KubeMutatingWebhookConfigurationList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeMutatingWebhookConfigurationList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeMutatingWebhookConfigurationList.GVK,\n            ...toJson_KubeMutatingWebhookConfigurationListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeMutatingWebhookConfigurationList.GVK,\n            ...toJson_KubeMutatingWebhookConfigurationListProps(resolved),\n        };\n    }\n}\nexports.KubeMutatingWebhookConfigurationList = KubeMutatingWebhookConfigurationList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList\"\n */\nKubeMutatingWebhookConfigurationList.GVK = {\n    apiVersion: 'admissionregistration.k8s.io/v1',\n    kind: 'MutatingWebhookConfigurationList',\n};\n/**\n * ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.\n *\n * @schema io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration\n */\nclass KubeValidatingWebhookConfiguration extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeValidatingWebhookConfiguration.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeValidatingWebhookConfiguration.GVK,\n            ...toJson_KubeValidatingWebhookConfigurationProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeValidatingWebhookConfiguration.GVK,\n            ...toJson_KubeValidatingWebhookConfigurationProps(resolved),\n        };\n    }\n}\nexports.KubeValidatingWebhookConfiguration = KubeValidatingWebhookConfiguration;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration\"\n */\nKubeValidatingWebhookConfiguration.GVK = {\n    apiVersion: 'admissionregistration.k8s.io/v1',\n    kind: 'ValidatingWebhookConfiguration',\n};\n/**\n * ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.\n *\n * @schema io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList\n */\nclass KubeValidatingWebhookConfigurationList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeValidatingWebhookConfigurationList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeValidatingWebhookConfigurationList.GVK,\n            ...toJson_KubeValidatingWebhookConfigurationListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeValidatingWebhookConfigurationList.GVK,\n            ...toJson_KubeValidatingWebhookConfigurationListProps(resolved),\n        };\n    }\n}\nexports.KubeValidatingWebhookConfigurationList = KubeValidatingWebhookConfigurationList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList\"\n */\nKubeValidatingWebhookConfigurationList.GVK = {\n    apiVersion: 'admissionregistration.k8s.io/v1',\n    kind: 'ValidatingWebhookConfigurationList',\n};\n/**\n *\n Storage version of a specific resource.\n *\n * @schema io.k8s.api.apiserverinternal.v1alpha1.StorageVersion\n */\nclass KubeStorageVersionV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.apiserverinternal.v1alpha1.StorageVersion\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeStorageVersionV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.apiserverinternal.v1alpha1.StorageVersion\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeStorageVersionV1Alpha1.GVK,\n            ...toJson_KubeStorageVersionV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeStorageVersionV1Alpha1.GVK,\n            ...toJson_KubeStorageVersionV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeStorageVersionV1Alpha1 = KubeStorageVersionV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.apiserverinternal.v1alpha1.StorageVersion\"\n */\nKubeStorageVersionV1Alpha1.GVK = {\n    apiVersion: 'internal.apiserver.k8s.io/v1alpha1',\n    kind: 'StorageVersion',\n};\n/**\n * A list of StorageVersions.\n *\n * @schema io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList\n */\nclass KubeStorageVersionListV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeStorageVersionListV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeStorageVersionListV1Alpha1.GVK,\n            ...toJson_KubeStorageVersionListV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeStorageVersionListV1Alpha1.GVK,\n            ...toJson_KubeStorageVersionListV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeStorageVersionListV1Alpha1 = KubeStorageVersionListV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList\"\n */\nKubeStorageVersionListV1Alpha1.GVK = {\n    apiVersion: 'internal.apiserver.k8s.io/v1alpha1',\n    kind: 'StorageVersionList',\n};\n/**\n * ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.\n *\n * @schema io.k8s.api.apps.v1.ControllerRevision\n */\nclass KubeControllerRevision extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.apps.v1.ControllerRevision\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeControllerRevision.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.apps.v1.ControllerRevision\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeControllerRevision.GVK,\n            ...toJson_KubeControllerRevisionProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeControllerRevision.GVK,\n            ...toJson_KubeControllerRevisionProps(resolved),\n        };\n    }\n}\nexports.KubeControllerRevision = KubeControllerRevision;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.apps.v1.ControllerRevision\"\n */\nKubeControllerRevision.GVK = {\n    apiVersion: 'apps/v1',\n    kind: 'ControllerRevision',\n};\n/**\n * ControllerRevisionList is a resource containing a list of ControllerRevision objects.\n *\n * @schema io.k8s.api.apps.v1.ControllerRevisionList\n */\nclass KubeControllerRevisionList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.apps.v1.ControllerRevisionList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeControllerRevisionList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.apps.v1.ControllerRevisionList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeControllerRevisionList.GVK,\n            ...toJson_KubeControllerRevisionListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeControllerRevisionList.GVK,\n            ...toJson_KubeControllerRevisionListProps(resolved),\n        };\n    }\n}\nexports.KubeControllerRevisionList = KubeControllerRevisionList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.apps.v1.ControllerRevisionList\"\n */\nKubeControllerRevisionList.GVK = {\n    apiVersion: 'apps/v1',\n    kind: 'ControllerRevisionList',\n};\n/**\n * DaemonSet represents the configuration of a daemon set.\n *\n * @schema io.k8s.api.apps.v1.DaemonSet\n */\nclass KubeDaemonSet extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.apps.v1.DaemonSet\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeDaemonSet.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.apps.v1.DaemonSet\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeDaemonSet.GVK,\n            ...toJson_KubeDaemonSetProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeDaemonSet.GVK,\n            ...toJson_KubeDaemonSetProps(resolved),\n        };\n    }\n}\nexports.KubeDaemonSet = KubeDaemonSet;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.apps.v1.DaemonSet\"\n */\nKubeDaemonSet.GVK = {\n    apiVersion: 'apps/v1',\n    kind: 'DaemonSet',\n};\n/**\n * DaemonSetList is a collection of daemon sets.\n *\n * @schema io.k8s.api.apps.v1.DaemonSetList\n */\nclass KubeDaemonSetList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.apps.v1.DaemonSetList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeDaemonSetList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.apps.v1.DaemonSetList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeDaemonSetList.GVK,\n            ...toJson_KubeDaemonSetListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeDaemonSetList.GVK,\n            ...toJson_KubeDaemonSetListProps(resolved),\n        };\n    }\n}\nexports.KubeDaemonSetList = KubeDaemonSetList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.apps.v1.DaemonSetList\"\n */\nKubeDaemonSetList.GVK = {\n    apiVersion: 'apps/v1',\n    kind: 'DaemonSetList',\n};\n/**\n * Deployment enables declarative updates for Pods and ReplicaSets.\n *\n * @schema io.k8s.api.apps.v1.Deployment\n */\nclass KubeDeployment extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.apps.v1.Deployment\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeDeployment.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.apps.v1.Deployment\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeDeployment.GVK,\n            ...toJson_KubeDeploymentProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeDeployment.GVK,\n            ...toJson_KubeDeploymentProps(resolved),\n        };\n    }\n}\nexports.KubeDeployment = KubeDeployment;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.apps.v1.Deployment\"\n */\nKubeDeployment.GVK = {\n    apiVersion: 'apps/v1',\n    kind: 'Deployment',\n};\n/**\n * DeploymentList is a list of Deployments.\n *\n * @schema io.k8s.api.apps.v1.DeploymentList\n */\nclass KubeDeploymentList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.apps.v1.DeploymentList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeDeploymentList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.apps.v1.DeploymentList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeDeploymentList.GVK,\n            ...toJson_KubeDeploymentListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeDeploymentList.GVK,\n            ...toJson_KubeDeploymentListProps(resolved),\n        };\n    }\n}\nexports.KubeDeploymentList = KubeDeploymentList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.apps.v1.DeploymentList\"\n */\nKubeDeploymentList.GVK = {\n    apiVersion: 'apps/v1',\n    kind: 'DeploymentList',\n};\n/**\n * ReplicaSet ensures that a specified number of pod replicas are running at any given time.\n *\n * @schema io.k8s.api.apps.v1.ReplicaSet\n */\nclass KubeReplicaSet extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.apps.v1.ReplicaSet\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeReplicaSet.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.apps.v1.ReplicaSet\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeReplicaSet.GVK,\n            ...toJson_KubeReplicaSetProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeReplicaSet.GVK,\n            ...toJson_KubeReplicaSetProps(resolved),\n        };\n    }\n}\nexports.KubeReplicaSet = KubeReplicaSet;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.apps.v1.ReplicaSet\"\n */\nKubeReplicaSet.GVK = {\n    apiVersion: 'apps/v1',\n    kind: 'ReplicaSet',\n};\n/**\n * ReplicaSetList is a collection of ReplicaSets.\n *\n * @schema io.k8s.api.apps.v1.ReplicaSetList\n */\nclass KubeReplicaSetList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.apps.v1.ReplicaSetList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeReplicaSetList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.apps.v1.ReplicaSetList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeReplicaSetList.GVK,\n            ...toJson_KubeReplicaSetListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeReplicaSetList.GVK,\n            ...toJson_KubeReplicaSetListProps(resolved),\n        };\n    }\n}\nexports.KubeReplicaSetList = KubeReplicaSetList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.apps.v1.ReplicaSetList\"\n */\nKubeReplicaSetList.GVK = {\n    apiVersion: 'apps/v1',\n    kind: 'ReplicaSetList',\n};\n/**\n * StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n - Network: A single stable DNS and hostname.\n - Storage: As many VolumeClaims as requested.\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.\n *\n * @schema io.k8s.api.apps.v1.StatefulSet\n */\nclass KubeStatefulSet extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.apps.v1.StatefulSet\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeStatefulSet.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.apps.v1.StatefulSet\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeStatefulSet.GVK,\n            ...toJson_KubeStatefulSetProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeStatefulSet.GVK,\n            ...toJson_KubeStatefulSetProps(resolved),\n        };\n    }\n}\nexports.KubeStatefulSet = KubeStatefulSet;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.apps.v1.StatefulSet\"\n */\nKubeStatefulSet.GVK = {\n    apiVersion: 'apps/v1',\n    kind: 'StatefulSet',\n};\n/**\n * StatefulSetList is a collection of StatefulSets.\n *\n * @schema io.k8s.api.apps.v1.StatefulSetList\n */\nclass KubeStatefulSetList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.apps.v1.StatefulSetList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeStatefulSetList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.apps.v1.StatefulSetList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeStatefulSetList.GVK,\n            ...toJson_KubeStatefulSetListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeStatefulSetList.GVK,\n            ...toJson_KubeStatefulSetListProps(resolved),\n        };\n    }\n}\nexports.KubeStatefulSetList = KubeStatefulSetList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.apps.v1.StatefulSetList\"\n */\nKubeStatefulSetList.GVK = {\n    apiVersion: 'apps/v1',\n    kind: 'StatefulSetList',\n};\n/**\n * TokenRequest requests a token for a given service account.\n *\n * @schema io.k8s.api.authentication.v1.TokenRequest\n */\nclass KubeTokenRequest extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.authentication.v1.TokenRequest\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeTokenRequest.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.authentication.v1.TokenRequest\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeTokenRequest.GVK,\n            ...toJson_KubeTokenRequestProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeTokenRequest.GVK,\n            ...toJson_KubeTokenRequestProps(resolved),\n        };\n    }\n}\nexports.KubeTokenRequest = KubeTokenRequest;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.authentication.v1.TokenRequest\"\n */\nKubeTokenRequest.GVK = {\n    apiVersion: 'authentication.k8s.io/v1',\n    kind: 'TokenRequest',\n};\n/**\n * TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.\n *\n * @schema io.k8s.api.authentication.v1.TokenReview\n */\nclass KubeTokenReview extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.authentication.v1.TokenReview\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeTokenReview.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.authentication.v1.TokenReview\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeTokenReview.GVK,\n            ...toJson_KubeTokenReviewProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeTokenReview.GVK,\n            ...toJson_KubeTokenReviewProps(resolved),\n        };\n    }\n}\nexports.KubeTokenReview = KubeTokenReview;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.authentication.v1.TokenReview\"\n */\nKubeTokenReview.GVK = {\n    apiVersion: 'authentication.k8s.io/v1',\n    kind: 'TokenReview',\n};\n/**\n * LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.\n *\n * @schema io.k8s.api.authorization.v1.LocalSubjectAccessReview\n */\nclass KubeLocalSubjectAccessReview extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.authorization.v1.LocalSubjectAccessReview\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeLocalSubjectAccessReview.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.authorization.v1.LocalSubjectAccessReview\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeLocalSubjectAccessReview.GVK,\n            ...toJson_KubeLocalSubjectAccessReviewProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeLocalSubjectAccessReview.GVK,\n            ...toJson_KubeLocalSubjectAccessReviewProps(resolved),\n        };\n    }\n}\nexports.KubeLocalSubjectAccessReview = KubeLocalSubjectAccessReview;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.authorization.v1.LocalSubjectAccessReview\"\n */\nKubeLocalSubjectAccessReview.GVK = {\n    apiVersion: 'authorization.k8s.io/v1',\n    kind: 'LocalSubjectAccessReview',\n};\n/**\n * SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \"in all namespaces\".  Self is a special case, because users should always be able to check whether they can perform an action\n *\n * @schema io.k8s.api.authorization.v1.SelfSubjectAccessReview\n */\nclass KubeSelfSubjectAccessReview extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.authorization.v1.SelfSubjectAccessReview\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeSelfSubjectAccessReview.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.authorization.v1.SelfSubjectAccessReview\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeSelfSubjectAccessReview.GVK,\n            ...toJson_KubeSelfSubjectAccessReviewProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeSelfSubjectAccessReview.GVK,\n            ...toJson_KubeSelfSubjectAccessReviewProps(resolved),\n        };\n    }\n}\nexports.KubeSelfSubjectAccessReview = KubeSelfSubjectAccessReview;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.authorization.v1.SelfSubjectAccessReview\"\n */\nKubeSelfSubjectAccessReview.GVK = {\n    apiVersion: 'authorization.k8s.io/v1',\n    kind: 'SelfSubjectAccessReview',\n};\n/**\n * SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.\n *\n * @schema io.k8s.api.authorization.v1.SelfSubjectRulesReview\n */\nclass KubeSelfSubjectRulesReview extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.authorization.v1.SelfSubjectRulesReview\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeSelfSubjectRulesReview.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.authorization.v1.SelfSubjectRulesReview\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeSelfSubjectRulesReview.GVK,\n            ...toJson_KubeSelfSubjectRulesReviewProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeSelfSubjectRulesReview.GVK,\n            ...toJson_KubeSelfSubjectRulesReviewProps(resolved),\n        };\n    }\n}\nexports.KubeSelfSubjectRulesReview = KubeSelfSubjectRulesReview;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.authorization.v1.SelfSubjectRulesReview\"\n */\nKubeSelfSubjectRulesReview.GVK = {\n    apiVersion: 'authorization.k8s.io/v1',\n    kind: 'SelfSubjectRulesReview',\n};\n/**\n * SubjectAccessReview checks whether or not a user or group can perform an action.\n *\n * @schema io.k8s.api.authorization.v1.SubjectAccessReview\n */\nclass KubeSubjectAccessReview extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.authorization.v1.SubjectAccessReview\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeSubjectAccessReview.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.authorization.v1.SubjectAccessReview\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeSubjectAccessReview.GVK,\n            ...toJson_KubeSubjectAccessReviewProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeSubjectAccessReview.GVK,\n            ...toJson_KubeSubjectAccessReviewProps(resolved),\n        };\n    }\n}\nexports.KubeSubjectAccessReview = KubeSubjectAccessReview;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.authorization.v1.SubjectAccessReview\"\n */\nKubeSubjectAccessReview.GVK = {\n    apiVersion: 'authorization.k8s.io/v1',\n    kind: 'SubjectAccessReview',\n};\n/**\n * configuration of a horizontal pod autoscaler.\n *\n * @schema io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler\n */\nclass KubeHorizontalPodAutoscaler extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeHorizontalPodAutoscaler.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeHorizontalPodAutoscaler.GVK,\n            ...toJson_KubeHorizontalPodAutoscalerProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeHorizontalPodAutoscaler.GVK,\n            ...toJson_KubeHorizontalPodAutoscalerProps(resolved),\n        };\n    }\n}\nexports.KubeHorizontalPodAutoscaler = KubeHorizontalPodAutoscaler;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler\"\n */\nKubeHorizontalPodAutoscaler.GVK = {\n    apiVersion: 'autoscaling/v1',\n    kind: 'HorizontalPodAutoscaler',\n};\n/**\n * list of horizontal pod autoscaler objects.\n *\n * @schema io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList\n */\nclass KubeHorizontalPodAutoscalerList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeHorizontalPodAutoscalerList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeHorizontalPodAutoscalerList.GVK,\n            ...toJson_KubeHorizontalPodAutoscalerListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeHorizontalPodAutoscalerList.GVK,\n            ...toJson_KubeHorizontalPodAutoscalerListProps(resolved),\n        };\n    }\n}\nexports.KubeHorizontalPodAutoscalerList = KubeHorizontalPodAutoscalerList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList\"\n */\nKubeHorizontalPodAutoscalerList.GVK = {\n    apiVersion: 'autoscaling/v1',\n    kind: 'HorizontalPodAutoscalerList',\n};\n/**\n * Scale represents a scaling request for a resource.\n *\n * @schema io.k8s.api.autoscaling.v1.Scale\n */\nclass KubeScale extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.autoscaling.v1.Scale\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeScale.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.autoscaling.v1.Scale\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeScale.GVK,\n            ...toJson_KubeScaleProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeScale.GVK,\n            ...toJson_KubeScaleProps(resolved),\n        };\n    }\n}\nexports.KubeScale = KubeScale;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.autoscaling.v1.Scale\"\n */\nKubeScale.GVK = {\n    apiVersion: 'autoscaling/v1',\n    kind: 'Scale',\n};\n/**\n * HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.\n *\n * @schema io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler\n */\nclass KubeHorizontalPodAutoscalerV2Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeHorizontalPodAutoscalerV2Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeHorizontalPodAutoscalerV2Beta1.GVK,\n            ...toJson_KubeHorizontalPodAutoscalerV2Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeHorizontalPodAutoscalerV2Beta1.GVK,\n            ...toJson_KubeHorizontalPodAutoscalerV2Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeHorizontalPodAutoscalerV2Beta1 = KubeHorizontalPodAutoscalerV2Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler\"\n */\nKubeHorizontalPodAutoscalerV2Beta1.GVK = {\n    apiVersion: 'autoscaling/v2beta1',\n    kind: 'HorizontalPodAutoscaler',\n};\n/**\n * HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.\n *\n * @schema io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList\n */\nclass KubeHorizontalPodAutoscalerListV2Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeHorizontalPodAutoscalerListV2Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeHorizontalPodAutoscalerListV2Beta1.GVK,\n            ...toJson_KubeHorizontalPodAutoscalerListV2Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeHorizontalPodAutoscalerListV2Beta1.GVK,\n            ...toJson_KubeHorizontalPodAutoscalerListV2Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeHorizontalPodAutoscalerListV2Beta1 = KubeHorizontalPodAutoscalerListV2Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList\"\n */\nKubeHorizontalPodAutoscalerListV2Beta1.GVK = {\n    apiVersion: 'autoscaling/v2beta1',\n    kind: 'HorizontalPodAutoscalerList',\n};\n/**\n * HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.\n *\n * @schema io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler\n */\nclass KubeHorizontalPodAutoscalerV2Beta2 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeHorizontalPodAutoscalerV2Beta2.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeHorizontalPodAutoscalerV2Beta2.GVK,\n            ...toJson_KubeHorizontalPodAutoscalerV2Beta2Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeHorizontalPodAutoscalerV2Beta2.GVK,\n            ...toJson_KubeHorizontalPodAutoscalerV2Beta2Props(resolved),\n        };\n    }\n}\nexports.KubeHorizontalPodAutoscalerV2Beta2 = KubeHorizontalPodAutoscalerV2Beta2;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler\"\n */\nKubeHorizontalPodAutoscalerV2Beta2.GVK = {\n    apiVersion: 'autoscaling/v2beta2',\n    kind: 'HorizontalPodAutoscaler',\n};\n/**\n * HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.\n *\n * @schema io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList\n */\nclass KubeHorizontalPodAutoscalerListV2Beta2 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeHorizontalPodAutoscalerListV2Beta2.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeHorizontalPodAutoscalerListV2Beta2.GVK,\n            ...toJson_KubeHorizontalPodAutoscalerListV2Beta2Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeHorizontalPodAutoscalerListV2Beta2.GVK,\n            ...toJson_KubeHorizontalPodAutoscalerListV2Beta2Props(resolved),\n        };\n    }\n}\nexports.KubeHorizontalPodAutoscalerListV2Beta2 = KubeHorizontalPodAutoscalerListV2Beta2;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList\"\n */\nKubeHorizontalPodAutoscalerListV2Beta2.GVK = {\n    apiVersion: 'autoscaling/v2beta2',\n    kind: 'HorizontalPodAutoscalerList',\n};\n/**\n * CronJob represents the configuration of a single cron job.\n *\n * @schema io.k8s.api.batch.v1.CronJob\n */\nclass KubeCronJob extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.batch.v1.CronJob\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeCronJob.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.batch.v1.CronJob\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeCronJob.GVK,\n            ...toJson_KubeCronJobProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCronJob.GVK,\n            ...toJson_KubeCronJobProps(resolved),\n        };\n    }\n}\nexports.KubeCronJob = KubeCronJob;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.batch.v1.CronJob\"\n */\nKubeCronJob.GVK = {\n    apiVersion: 'batch/v1',\n    kind: 'CronJob',\n};\n/**\n * CronJobList is a collection of cron jobs.\n *\n * @schema io.k8s.api.batch.v1.CronJobList\n */\nclass KubeCronJobList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.batch.v1.CronJobList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCronJobList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.batch.v1.CronJobList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCronJobList.GVK,\n            ...toJson_KubeCronJobListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCronJobList.GVK,\n            ...toJson_KubeCronJobListProps(resolved),\n        };\n    }\n}\nexports.KubeCronJobList = KubeCronJobList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.batch.v1.CronJobList\"\n */\nKubeCronJobList.GVK = {\n    apiVersion: 'batch/v1',\n    kind: 'CronJobList',\n};\n/**\n * Job represents the configuration of a single job.\n *\n * @schema io.k8s.api.batch.v1.Job\n */\nclass KubeJob extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.batch.v1.Job\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeJob.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.batch.v1.Job\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeJob.GVK,\n            ...toJson_KubeJobProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeJob.GVK,\n            ...toJson_KubeJobProps(resolved),\n        };\n    }\n}\nexports.KubeJob = KubeJob;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.batch.v1.Job\"\n */\nKubeJob.GVK = {\n    apiVersion: 'batch/v1',\n    kind: 'Job',\n};\n/**\n * JobList is a collection of jobs.\n *\n * @schema io.k8s.api.batch.v1.JobList\n */\nclass KubeJobList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.batch.v1.JobList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeJobList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.batch.v1.JobList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeJobList.GVK,\n            ...toJson_KubeJobListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeJobList.GVK,\n            ...toJson_KubeJobListProps(resolved),\n        };\n    }\n}\nexports.KubeJobList = KubeJobList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.batch.v1.JobList\"\n */\nKubeJobList.GVK = {\n    apiVersion: 'batch/v1',\n    kind: 'JobList',\n};\n/**\n * CronJob represents the configuration of a single cron job.\n *\n * @schema io.k8s.api.batch.v1beta1.CronJob\n */\nclass KubeCronJobV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.batch.v1beta1.CronJob\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeCronJobV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.batch.v1beta1.CronJob\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeCronJobV1Beta1.GVK,\n            ...toJson_KubeCronJobV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCronJobV1Beta1.GVK,\n            ...toJson_KubeCronJobV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeCronJobV1Beta1 = KubeCronJobV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.batch.v1beta1.CronJob\"\n */\nKubeCronJobV1Beta1.GVK = {\n    apiVersion: 'batch/v1beta1',\n    kind: 'CronJob',\n};\n/**\n * CronJobList is a collection of cron jobs.\n *\n * @schema io.k8s.api.batch.v1beta1.CronJobList\n */\nclass KubeCronJobListV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.batch.v1beta1.CronJobList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCronJobListV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.batch.v1beta1.CronJobList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCronJobListV1Beta1.GVK,\n            ...toJson_KubeCronJobListV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCronJobListV1Beta1.GVK,\n            ...toJson_KubeCronJobListV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeCronJobListV1Beta1 = KubeCronJobListV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.batch.v1beta1.CronJobList\"\n */\nKubeCronJobListV1Beta1.GVK = {\n    apiVersion: 'batch/v1beta1',\n    kind: 'CronJobList',\n};\n/**\n * CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.\n\nKubelets use this API to obtain:\n 1. client certificates to authenticate to kube-apiserver (with the \"kubernetes.io/kube-apiserver-client-kubelet\" signerName).\n 2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the \"kubernetes.io/kubelet-serving\" signerName).\n\nThis API can be used to request client certificates to authenticate to kube-apiserver (with the \"kubernetes.io/kube-apiserver-client\" signerName), or to obtain certificates from custom non-Kubernetes signers.\n *\n * @schema io.k8s.api.certificates.v1.CertificateSigningRequest\n */\nclass KubeCertificateSigningRequest extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.certificates.v1.CertificateSigningRequest\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCertificateSigningRequest.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.certificates.v1.CertificateSigningRequest\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCertificateSigningRequest.GVK,\n            ...toJson_KubeCertificateSigningRequestProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCertificateSigningRequest.GVK,\n            ...toJson_KubeCertificateSigningRequestProps(resolved),\n        };\n    }\n}\nexports.KubeCertificateSigningRequest = KubeCertificateSigningRequest;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.certificates.v1.CertificateSigningRequest\"\n */\nKubeCertificateSigningRequest.GVK = {\n    apiVersion: 'certificates.k8s.io/v1',\n    kind: 'CertificateSigningRequest',\n};\n/**\n * CertificateSigningRequestList is a collection of CertificateSigningRequest objects\n *\n * @schema io.k8s.api.certificates.v1.CertificateSigningRequestList\n */\nclass KubeCertificateSigningRequestList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.certificates.v1.CertificateSigningRequestList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCertificateSigningRequestList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.certificates.v1.CertificateSigningRequestList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCertificateSigningRequestList.GVK,\n            ...toJson_KubeCertificateSigningRequestListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCertificateSigningRequestList.GVK,\n            ...toJson_KubeCertificateSigningRequestListProps(resolved),\n        };\n    }\n}\nexports.KubeCertificateSigningRequestList = KubeCertificateSigningRequestList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.certificates.v1.CertificateSigningRequestList\"\n */\nKubeCertificateSigningRequestList.GVK = {\n    apiVersion: 'certificates.k8s.io/v1',\n    kind: 'CertificateSigningRequestList',\n};\n/**\n * Lease defines a lease concept.\n *\n * @schema io.k8s.api.coordination.v1.Lease\n */\nclass KubeLease extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.coordination.v1.Lease\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeLease.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.coordination.v1.Lease\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeLease.GVK,\n            ...toJson_KubeLeaseProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeLease.GVK,\n            ...toJson_KubeLeaseProps(resolved),\n        };\n    }\n}\nexports.KubeLease = KubeLease;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.coordination.v1.Lease\"\n */\nKubeLease.GVK = {\n    apiVersion: 'coordination.k8s.io/v1',\n    kind: 'Lease',\n};\n/**\n * LeaseList is a list of Lease objects.\n *\n * @schema io.k8s.api.coordination.v1.LeaseList\n */\nclass KubeLeaseList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.coordination.v1.LeaseList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeLeaseList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.coordination.v1.LeaseList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeLeaseList.GVK,\n            ...toJson_KubeLeaseListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeLeaseList.GVK,\n            ...toJson_KubeLeaseListProps(resolved),\n        };\n    }\n}\nexports.KubeLeaseList = KubeLeaseList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.coordination.v1.LeaseList\"\n */\nKubeLeaseList.GVK = {\n    apiVersion: 'coordination.k8s.io/v1',\n    kind: 'LeaseList',\n};\n/**\n * Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.\n *\n * @schema io.k8s.api.core.v1.Binding\n */\nclass KubeBinding extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.Binding\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeBinding.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.Binding\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeBinding.GVK,\n            ...toJson_KubeBindingProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeBinding.GVK,\n            ...toJson_KubeBindingProps(resolved),\n        };\n    }\n}\nexports.KubeBinding = KubeBinding;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.Binding\"\n */\nKubeBinding.GVK = {\n    apiVersion: 'v1',\n    kind: 'Binding',\n};\n/**\n * ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+\n *\n * @schema io.k8s.api.core.v1.ComponentStatus\n */\nclass KubeComponentStatus extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.ComponentStatus\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeComponentStatus.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.ComponentStatus\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeComponentStatus.GVK,\n            ...toJson_KubeComponentStatusProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeComponentStatus.GVK,\n            ...toJson_KubeComponentStatusProps(resolved),\n        };\n    }\n}\nexports.KubeComponentStatus = KubeComponentStatus;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.ComponentStatus\"\n */\nKubeComponentStatus.GVK = {\n    apiVersion: 'v1',\n    kind: 'ComponentStatus',\n};\n/**\n * Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+\n *\n * @schema io.k8s.api.core.v1.ComponentStatusList\n */\nclass KubeComponentStatusList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.ComponentStatusList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeComponentStatusList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.ComponentStatusList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeComponentStatusList.GVK,\n            ...toJson_KubeComponentStatusListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeComponentStatusList.GVK,\n            ...toJson_KubeComponentStatusListProps(resolved),\n        };\n    }\n}\nexports.KubeComponentStatusList = KubeComponentStatusList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.ComponentStatusList\"\n */\nKubeComponentStatusList.GVK = {\n    apiVersion: 'v1',\n    kind: 'ComponentStatusList',\n};\n/**\n * ConfigMap holds configuration data for pods to consume.\n *\n * @schema io.k8s.api.core.v1.ConfigMap\n */\nclass KubeConfigMap extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.ConfigMap\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeConfigMap.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.ConfigMap\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeConfigMap.GVK,\n            ...toJson_KubeConfigMapProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeConfigMap.GVK,\n            ...toJson_KubeConfigMapProps(resolved),\n        };\n    }\n}\nexports.KubeConfigMap = KubeConfigMap;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.ConfigMap\"\n */\nKubeConfigMap.GVK = {\n    apiVersion: 'v1',\n    kind: 'ConfigMap',\n};\n/**\n * ConfigMapList is a resource containing a list of ConfigMap objects.\n *\n * @schema io.k8s.api.core.v1.ConfigMapList\n */\nclass KubeConfigMapList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.ConfigMapList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeConfigMapList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.ConfigMapList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeConfigMapList.GVK,\n            ...toJson_KubeConfigMapListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeConfigMapList.GVK,\n            ...toJson_KubeConfigMapListProps(resolved),\n        };\n    }\n}\nexports.KubeConfigMapList = KubeConfigMapList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.ConfigMapList\"\n */\nKubeConfigMapList.GVK = {\n    apiVersion: 'v1',\n    kind: 'ConfigMapList',\n};\n/**\n * Endpoints is a collection of endpoints that implement the actual service. Example:\n  Name: \"mysvc\",\n  Subsets: [\n    {\n      Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      Addresses: [{\"ip\": \"10.10.3.3\"}],\n      Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]\n *\n * @schema io.k8s.api.core.v1.Endpoints\n */\nclass KubeEndpoints extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.Endpoints\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeEndpoints.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.Endpoints\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeEndpoints.GVK,\n            ...toJson_KubeEndpointsProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeEndpoints.GVK,\n            ...toJson_KubeEndpointsProps(resolved),\n        };\n    }\n}\nexports.KubeEndpoints = KubeEndpoints;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.Endpoints\"\n */\nKubeEndpoints.GVK = {\n    apiVersion: 'v1',\n    kind: 'Endpoints',\n};\n/**\n * EndpointsList is a list of endpoints.\n *\n * @schema io.k8s.api.core.v1.EndpointsList\n */\nclass KubeEndpointsList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.EndpointsList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeEndpointsList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.EndpointsList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeEndpointsList.GVK,\n            ...toJson_KubeEndpointsListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeEndpointsList.GVK,\n            ...toJson_KubeEndpointsListProps(resolved),\n        };\n    }\n}\nexports.KubeEndpointsList = KubeEndpointsList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.EndpointsList\"\n */\nKubeEndpointsList.GVK = {\n    apiVersion: 'v1',\n    kind: 'EndpointsList',\n};\n/**\n * Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.\n *\n * @schema io.k8s.api.events.v1.Event\n */\nclass KubeEvent extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.events.v1.Event\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeEvent.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.events.v1.Event\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeEvent.GVK,\n            ...toJson_KubeEventProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeEvent.GVK,\n            ...toJson_KubeEventProps(resolved),\n        };\n    }\n}\nexports.KubeEvent = KubeEvent;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.events.v1.Event\"\n */\nKubeEvent.GVK = {\n    apiVersion: 'events.k8s.io/v1',\n    kind: 'Event',\n};\n/**\n * EventList is a list of Event objects.\n *\n * @schema io.k8s.api.events.v1.EventList\n */\nclass KubeEventList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.events.v1.EventList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeEventList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.events.v1.EventList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeEventList.GVK,\n            ...toJson_KubeEventListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeEventList.GVK,\n            ...toJson_KubeEventListProps(resolved),\n        };\n    }\n}\nexports.KubeEventList = KubeEventList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.events.v1.EventList\"\n */\nKubeEventList.GVK = {\n    apiVersion: 'events.k8s.io/v1',\n    kind: 'EventList',\n};\n/**\n * LimitRange sets resource usage limits for each kind of resource in a Namespace.\n *\n * @schema io.k8s.api.core.v1.LimitRange\n */\nclass KubeLimitRange extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.LimitRange\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeLimitRange.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.LimitRange\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeLimitRange.GVK,\n            ...toJson_KubeLimitRangeProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeLimitRange.GVK,\n            ...toJson_KubeLimitRangeProps(resolved),\n        };\n    }\n}\nexports.KubeLimitRange = KubeLimitRange;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.LimitRange\"\n */\nKubeLimitRange.GVK = {\n    apiVersion: 'v1',\n    kind: 'LimitRange',\n};\n/**\n * LimitRangeList is a list of LimitRange items.\n *\n * @schema io.k8s.api.core.v1.LimitRangeList\n */\nclass KubeLimitRangeList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.LimitRangeList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeLimitRangeList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.LimitRangeList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeLimitRangeList.GVK,\n            ...toJson_KubeLimitRangeListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeLimitRangeList.GVK,\n            ...toJson_KubeLimitRangeListProps(resolved),\n        };\n    }\n}\nexports.KubeLimitRangeList = KubeLimitRangeList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.LimitRangeList\"\n */\nKubeLimitRangeList.GVK = {\n    apiVersion: 'v1',\n    kind: 'LimitRangeList',\n};\n/**\n * Namespace provides a scope for Names. Use of multiple namespaces is optional.\n *\n * @schema io.k8s.api.core.v1.Namespace\n */\nclass KubeNamespace extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.Namespace\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeNamespace.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.Namespace\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeNamespace.GVK,\n            ...toJson_KubeNamespaceProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeNamespace.GVK,\n            ...toJson_KubeNamespaceProps(resolved),\n        };\n    }\n}\nexports.KubeNamespace = KubeNamespace;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.Namespace\"\n */\nKubeNamespace.GVK = {\n    apiVersion: 'v1',\n    kind: 'Namespace',\n};\n/**\n * NamespaceList is a list of Namespaces.\n *\n * @schema io.k8s.api.core.v1.NamespaceList\n */\nclass KubeNamespaceList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.NamespaceList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeNamespaceList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.NamespaceList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeNamespaceList.GVK,\n            ...toJson_KubeNamespaceListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeNamespaceList.GVK,\n            ...toJson_KubeNamespaceListProps(resolved),\n        };\n    }\n}\nexports.KubeNamespaceList = KubeNamespaceList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.NamespaceList\"\n */\nKubeNamespaceList.GVK = {\n    apiVersion: 'v1',\n    kind: 'NamespaceList',\n};\n/**\n * Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).\n *\n * @schema io.k8s.api.core.v1.Node\n */\nclass KubeNode extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.Node\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeNode.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.Node\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeNode.GVK,\n            ...toJson_KubeNodeProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeNode.GVK,\n            ...toJson_KubeNodeProps(resolved),\n        };\n    }\n}\nexports.KubeNode = KubeNode;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.Node\"\n */\nKubeNode.GVK = {\n    apiVersion: 'v1',\n    kind: 'Node',\n};\n/**\n * NodeList is the whole list of all Nodes which have been registered with master.\n *\n * @schema io.k8s.api.core.v1.NodeList\n */\nclass KubeNodeList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.NodeList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeNodeList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.NodeList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeNodeList.GVK,\n            ...toJson_KubeNodeListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeNodeList.GVK,\n            ...toJson_KubeNodeListProps(resolved),\n        };\n    }\n}\nexports.KubeNodeList = KubeNodeList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.NodeList\"\n */\nKubeNodeList.GVK = {\n    apiVersion: 'v1',\n    kind: 'NodeList',\n};\n/**\n * PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes\n *\n * @schema io.k8s.api.core.v1.PersistentVolume\n */\nclass KubePersistentVolume extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.PersistentVolume\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubePersistentVolume.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.PersistentVolume\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubePersistentVolume.GVK,\n            ...toJson_KubePersistentVolumeProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePersistentVolume.GVK,\n            ...toJson_KubePersistentVolumeProps(resolved),\n        };\n    }\n}\nexports.KubePersistentVolume = KubePersistentVolume;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.PersistentVolume\"\n */\nKubePersistentVolume.GVK = {\n    apiVersion: 'v1',\n    kind: 'PersistentVolume',\n};\n/**\n * PersistentVolumeClaim is a user's request for and claim to a persistent volume\n *\n * @schema io.k8s.api.core.v1.PersistentVolumeClaim\n */\nclass KubePersistentVolumeClaim extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.PersistentVolumeClaim\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubePersistentVolumeClaim.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.PersistentVolumeClaim\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubePersistentVolumeClaim.GVK,\n            ...toJson_KubePersistentVolumeClaimProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePersistentVolumeClaim.GVK,\n            ...toJson_KubePersistentVolumeClaimProps(resolved),\n        };\n    }\n}\nexports.KubePersistentVolumeClaim = KubePersistentVolumeClaim;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.PersistentVolumeClaim\"\n */\nKubePersistentVolumeClaim.GVK = {\n    apiVersion: 'v1',\n    kind: 'PersistentVolumeClaim',\n};\n/**\n * PersistentVolumeClaimList is a list of PersistentVolumeClaim items.\n *\n * @schema io.k8s.api.core.v1.PersistentVolumeClaimList\n */\nclass KubePersistentVolumeClaimList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.PersistentVolumeClaimList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubePersistentVolumeClaimList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.PersistentVolumeClaimList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubePersistentVolumeClaimList.GVK,\n            ...toJson_KubePersistentVolumeClaimListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePersistentVolumeClaimList.GVK,\n            ...toJson_KubePersistentVolumeClaimListProps(resolved),\n        };\n    }\n}\nexports.KubePersistentVolumeClaimList = KubePersistentVolumeClaimList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.PersistentVolumeClaimList\"\n */\nKubePersistentVolumeClaimList.GVK = {\n    apiVersion: 'v1',\n    kind: 'PersistentVolumeClaimList',\n};\n/**\n * PersistentVolumeList is a list of PersistentVolume items.\n *\n * @schema io.k8s.api.core.v1.PersistentVolumeList\n */\nclass KubePersistentVolumeList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.PersistentVolumeList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubePersistentVolumeList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.PersistentVolumeList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubePersistentVolumeList.GVK,\n            ...toJson_KubePersistentVolumeListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePersistentVolumeList.GVK,\n            ...toJson_KubePersistentVolumeListProps(resolved),\n        };\n    }\n}\nexports.KubePersistentVolumeList = KubePersistentVolumeList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.PersistentVolumeList\"\n */\nKubePersistentVolumeList.GVK = {\n    apiVersion: 'v1',\n    kind: 'PersistentVolumeList',\n};\n/**\n * Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.\n *\n * @schema io.k8s.api.core.v1.Pod\n */\nclass KubePod extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.Pod\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubePod.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.Pod\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubePod.GVK,\n            ...toJson_KubePodProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePod.GVK,\n            ...toJson_KubePodProps(resolved),\n        };\n    }\n}\nexports.KubePod = KubePod;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.Pod\"\n */\nKubePod.GVK = {\n    apiVersion: 'v1',\n    kind: 'Pod',\n};\n/**\n * PodList is a list of Pods.\n *\n * @schema io.k8s.api.core.v1.PodList\n */\nclass KubePodList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.PodList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubePodList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.PodList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubePodList.GVK,\n            ...toJson_KubePodListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePodList.GVK,\n            ...toJson_KubePodListProps(resolved),\n        };\n    }\n}\nexports.KubePodList = KubePodList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.PodList\"\n */\nKubePodList.GVK = {\n    apiVersion: 'v1',\n    kind: 'PodList',\n};\n/**\n * PodTemplate describes a template for creating copies of a predefined pod.\n *\n * @schema io.k8s.api.core.v1.PodTemplate\n */\nclass KubePodTemplate extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.PodTemplate\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubePodTemplate.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.PodTemplate\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubePodTemplate.GVK,\n            ...toJson_KubePodTemplateProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePodTemplate.GVK,\n            ...toJson_KubePodTemplateProps(resolved),\n        };\n    }\n}\nexports.KubePodTemplate = KubePodTemplate;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.PodTemplate\"\n */\nKubePodTemplate.GVK = {\n    apiVersion: 'v1',\n    kind: 'PodTemplate',\n};\n/**\n * PodTemplateList is a list of PodTemplates.\n *\n * @schema io.k8s.api.core.v1.PodTemplateList\n */\nclass KubePodTemplateList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.PodTemplateList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubePodTemplateList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.PodTemplateList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubePodTemplateList.GVK,\n            ...toJson_KubePodTemplateListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePodTemplateList.GVK,\n            ...toJson_KubePodTemplateListProps(resolved),\n        };\n    }\n}\nexports.KubePodTemplateList = KubePodTemplateList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.PodTemplateList\"\n */\nKubePodTemplateList.GVK = {\n    apiVersion: 'v1',\n    kind: 'PodTemplateList',\n};\n/**\n * ReplicationController represents the configuration of a replication controller.\n *\n * @schema io.k8s.api.core.v1.ReplicationController\n */\nclass KubeReplicationController extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.ReplicationController\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeReplicationController.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.ReplicationController\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeReplicationController.GVK,\n            ...toJson_KubeReplicationControllerProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeReplicationController.GVK,\n            ...toJson_KubeReplicationControllerProps(resolved),\n        };\n    }\n}\nexports.KubeReplicationController = KubeReplicationController;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.ReplicationController\"\n */\nKubeReplicationController.GVK = {\n    apiVersion: 'v1',\n    kind: 'ReplicationController',\n};\n/**\n * ReplicationControllerList is a collection of replication controllers.\n *\n * @schema io.k8s.api.core.v1.ReplicationControllerList\n */\nclass KubeReplicationControllerList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.ReplicationControllerList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeReplicationControllerList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.ReplicationControllerList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeReplicationControllerList.GVK,\n            ...toJson_KubeReplicationControllerListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeReplicationControllerList.GVK,\n            ...toJson_KubeReplicationControllerListProps(resolved),\n        };\n    }\n}\nexports.KubeReplicationControllerList = KubeReplicationControllerList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.ReplicationControllerList\"\n */\nKubeReplicationControllerList.GVK = {\n    apiVersion: 'v1',\n    kind: 'ReplicationControllerList',\n};\n/**\n * ResourceQuota sets aggregate quota restrictions enforced per namespace\n *\n * @schema io.k8s.api.core.v1.ResourceQuota\n */\nclass KubeResourceQuota extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.ResourceQuota\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeResourceQuota.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.ResourceQuota\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeResourceQuota.GVK,\n            ...toJson_KubeResourceQuotaProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeResourceQuota.GVK,\n            ...toJson_KubeResourceQuotaProps(resolved),\n        };\n    }\n}\nexports.KubeResourceQuota = KubeResourceQuota;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.ResourceQuota\"\n */\nKubeResourceQuota.GVK = {\n    apiVersion: 'v1',\n    kind: 'ResourceQuota',\n};\n/**\n * ResourceQuotaList is a list of ResourceQuota items.\n *\n * @schema io.k8s.api.core.v1.ResourceQuotaList\n */\nclass KubeResourceQuotaList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.ResourceQuotaList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeResourceQuotaList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.ResourceQuotaList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeResourceQuotaList.GVK,\n            ...toJson_KubeResourceQuotaListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeResourceQuotaList.GVK,\n            ...toJson_KubeResourceQuotaListProps(resolved),\n        };\n    }\n}\nexports.KubeResourceQuotaList = KubeResourceQuotaList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.ResourceQuotaList\"\n */\nKubeResourceQuotaList.GVK = {\n    apiVersion: 'v1',\n    kind: 'ResourceQuotaList',\n};\n/**\n * Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.\n *\n * @schema io.k8s.api.core.v1.Secret\n */\nclass KubeSecret extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.Secret\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeSecret.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.Secret\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeSecret.GVK,\n            ...toJson_KubeSecretProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeSecret.GVK,\n            ...toJson_KubeSecretProps(resolved),\n        };\n    }\n}\nexports.KubeSecret = KubeSecret;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.Secret\"\n */\nKubeSecret.GVK = {\n    apiVersion: 'v1',\n    kind: 'Secret',\n};\n/**\n * SecretList is a list of Secret.\n *\n * @schema io.k8s.api.core.v1.SecretList\n */\nclass KubeSecretList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.SecretList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeSecretList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.SecretList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeSecretList.GVK,\n            ...toJson_KubeSecretListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeSecretList.GVK,\n            ...toJson_KubeSecretListProps(resolved),\n        };\n    }\n}\nexports.KubeSecretList = KubeSecretList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.SecretList\"\n */\nKubeSecretList.GVK = {\n    apiVersion: 'v1',\n    kind: 'SecretList',\n};\n/**\n * Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.\n *\n * @schema io.k8s.api.core.v1.Service\n */\nclass KubeService extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.Service\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeService.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.Service\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeService.GVK,\n            ...toJson_KubeServiceProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeService.GVK,\n            ...toJson_KubeServiceProps(resolved),\n        };\n    }\n}\nexports.KubeService = KubeService;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.Service\"\n */\nKubeService.GVK = {\n    apiVersion: 'v1',\n    kind: 'Service',\n};\n/**\n * ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets\n *\n * @schema io.k8s.api.core.v1.ServiceAccount\n */\nclass KubeServiceAccount extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.ServiceAccount\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeServiceAccount.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.ServiceAccount\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeServiceAccount.GVK,\n            ...toJson_KubeServiceAccountProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeServiceAccount.GVK,\n            ...toJson_KubeServiceAccountProps(resolved),\n        };\n    }\n}\nexports.KubeServiceAccount = KubeServiceAccount;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.ServiceAccount\"\n */\nKubeServiceAccount.GVK = {\n    apiVersion: 'v1',\n    kind: 'ServiceAccount',\n};\n/**\n * ServiceAccountList is a list of ServiceAccount objects\n *\n * @schema io.k8s.api.core.v1.ServiceAccountList\n */\nclass KubeServiceAccountList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.ServiceAccountList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeServiceAccountList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.ServiceAccountList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeServiceAccountList.GVK,\n            ...toJson_KubeServiceAccountListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeServiceAccountList.GVK,\n            ...toJson_KubeServiceAccountListProps(resolved),\n        };\n    }\n}\nexports.KubeServiceAccountList = KubeServiceAccountList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.ServiceAccountList\"\n */\nKubeServiceAccountList.GVK = {\n    apiVersion: 'v1',\n    kind: 'ServiceAccountList',\n};\n/**\n * ServiceList holds a list of services.\n *\n * @schema io.k8s.api.core.v1.ServiceList\n */\nclass KubeServiceList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.core.v1.ServiceList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeServiceList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.core.v1.ServiceList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeServiceList.GVK,\n            ...toJson_KubeServiceListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeServiceList.GVK,\n            ...toJson_KubeServiceListProps(resolved),\n        };\n    }\n}\nexports.KubeServiceList = KubeServiceList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.core.v1.ServiceList\"\n */\nKubeServiceList.GVK = {\n    apiVersion: 'v1',\n    kind: 'ServiceList',\n};\n/**\n * EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.\n *\n * @schema io.k8s.api.discovery.v1.EndpointSlice\n */\nclass KubeEndpointSlice extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.discovery.v1.EndpointSlice\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeEndpointSlice.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.discovery.v1.EndpointSlice\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeEndpointSlice.GVK,\n            ...toJson_KubeEndpointSliceProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeEndpointSlice.GVK,\n            ...toJson_KubeEndpointSliceProps(resolved),\n        };\n    }\n}\nexports.KubeEndpointSlice = KubeEndpointSlice;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.discovery.v1.EndpointSlice\"\n */\nKubeEndpointSlice.GVK = {\n    apiVersion: 'discovery.k8s.io/v1',\n    kind: 'EndpointSlice',\n};\n/**\n * EndpointSliceList represents a list of endpoint slices\n *\n * @schema io.k8s.api.discovery.v1.EndpointSliceList\n */\nclass KubeEndpointSliceList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.discovery.v1.EndpointSliceList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeEndpointSliceList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.discovery.v1.EndpointSliceList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeEndpointSliceList.GVK,\n            ...toJson_KubeEndpointSliceListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeEndpointSliceList.GVK,\n            ...toJson_KubeEndpointSliceListProps(resolved),\n        };\n    }\n}\nexports.KubeEndpointSliceList = KubeEndpointSliceList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.discovery.v1.EndpointSliceList\"\n */\nKubeEndpointSliceList.GVK = {\n    apiVersion: 'discovery.k8s.io/v1',\n    kind: 'EndpointSliceList',\n};\n/**\n * EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.\n *\n * @schema io.k8s.api.discovery.v1beta1.EndpointSlice\n */\nclass KubeEndpointSliceV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.discovery.v1beta1.EndpointSlice\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeEndpointSliceV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.discovery.v1beta1.EndpointSlice\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeEndpointSliceV1Beta1.GVK,\n            ...toJson_KubeEndpointSliceV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeEndpointSliceV1Beta1.GVK,\n            ...toJson_KubeEndpointSliceV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeEndpointSliceV1Beta1 = KubeEndpointSliceV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.discovery.v1beta1.EndpointSlice\"\n */\nKubeEndpointSliceV1Beta1.GVK = {\n    apiVersion: 'discovery.k8s.io/v1beta1',\n    kind: 'EndpointSlice',\n};\n/**\n * EndpointSliceList represents a list of endpoint slices\n *\n * @schema io.k8s.api.discovery.v1beta1.EndpointSliceList\n */\nclass KubeEndpointSliceListV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.discovery.v1beta1.EndpointSliceList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeEndpointSliceListV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.discovery.v1beta1.EndpointSliceList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeEndpointSliceListV1Beta1.GVK,\n            ...toJson_KubeEndpointSliceListV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeEndpointSliceListV1Beta1.GVK,\n            ...toJson_KubeEndpointSliceListV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeEndpointSliceListV1Beta1 = KubeEndpointSliceListV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.discovery.v1beta1.EndpointSliceList\"\n */\nKubeEndpointSliceListV1Beta1.GVK = {\n    apiVersion: 'discovery.k8s.io/v1beta1',\n    kind: 'EndpointSliceList',\n};\n/**\n * Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.\n *\n * @schema io.k8s.api.events.v1beta1.Event\n */\nclass KubeEventV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.events.v1beta1.Event\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeEventV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.events.v1beta1.Event\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeEventV1Beta1.GVK,\n            ...toJson_KubeEventV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeEventV1Beta1.GVK,\n            ...toJson_KubeEventV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeEventV1Beta1 = KubeEventV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.events.v1beta1.Event\"\n */\nKubeEventV1Beta1.GVK = {\n    apiVersion: 'events.k8s.io/v1beta1',\n    kind: 'Event',\n};\n/**\n * EventList is a list of Event objects.\n *\n * @schema io.k8s.api.events.v1beta1.EventList\n */\nclass KubeEventListV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.events.v1beta1.EventList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeEventListV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.events.v1beta1.EventList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeEventListV1Beta1.GVK,\n            ...toJson_KubeEventListV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeEventListV1Beta1.GVK,\n            ...toJson_KubeEventListV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeEventListV1Beta1 = KubeEventListV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.events.v1beta1.EventList\"\n */\nKubeEventListV1Beta1.GVK = {\n    apiVersion: 'events.k8s.io/v1beta1',\n    kind: 'EventList',\n};\n/**\n * FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a \"flow distinguisher\".\n *\n * @schema io.k8s.api.flowcontrol.v1beta1.FlowSchema\n */\nclass KubeFlowSchemaV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.flowcontrol.v1beta1.FlowSchema\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeFlowSchemaV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.flowcontrol.v1beta1.FlowSchema\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeFlowSchemaV1Beta1.GVK,\n            ...toJson_KubeFlowSchemaV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeFlowSchemaV1Beta1.GVK,\n            ...toJson_KubeFlowSchemaV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeFlowSchemaV1Beta1 = KubeFlowSchemaV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.flowcontrol.v1beta1.FlowSchema\"\n */\nKubeFlowSchemaV1Beta1.GVK = {\n    apiVersion: 'flowcontrol.apiserver.k8s.io/v1beta1',\n    kind: 'FlowSchema',\n};\n/**\n * FlowSchemaList is a list of FlowSchema objects.\n *\n * @schema io.k8s.api.flowcontrol.v1beta1.FlowSchemaList\n */\nclass KubeFlowSchemaListV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.flowcontrol.v1beta1.FlowSchemaList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeFlowSchemaListV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.flowcontrol.v1beta1.FlowSchemaList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeFlowSchemaListV1Beta1.GVK,\n            ...toJson_KubeFlowSchemaListV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeFlowSchemaListV1Beta1.GVK,\n            ...toJson_KubeFlowSchemaListV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeFlowSchemaListV1Beta1 = KubeFlowSchemaListV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.flowcontrol.v1beta1.FlowSchemaList\"\n */\nKubeFlowSchemaListV1Beta1.GVK = {\n    apiVersion: 'flowcontrol.apiserver.k8s.io/v1beta1',\n    kind: 'FlowSchemaList',\n};\n/**\n * PriorityLevelConfiguration represents the configuration of a priority level.\n *\n * @schema io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfiguration\n */\nclass KubePriorityLevelConfigurationV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfiguration\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubePriorityLevelConfigurationV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfiguration\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubePriorityLevelConfigurationV1Beta1.GVK,\n            ...toJson_KubePriorityLevelConfigurationV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePriorityLevelConfigurationV1Beta1.GVK,\n            ...toJson_KubePriorityLevelConfigurationV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubePriorityLevelConfigurationV1Beta1 = KubePriorityLevelConfigurationV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfiguration\"\n */\nKubePriorityLevelConfigurationV1Beta1.GVK = {\n    apiVersion: 'flowcontrol.apiserver.k8s.io/v1beta1',\n    kind: 'PriorityLevelConfiguration',\n};\n/**\n * PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.\n *\n * @schema io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationList\n */\nclass KubePriorityLevelConfigurationListV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubePriorityLevelConfigurationListV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubePriorityLevelConfigurationListV1Beta1.GVK,\n            ...toJson_KubePriorityLevelConfigurationListV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePriorityLevelConfigurationListV1Beta1.GVK,\n            ...toJson_KubePriorityLevelConfigurationListV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubePriorityLevelConfigurationListV1Beta1 = KubePriorityLevelConfigurationListV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationList\"\n */\nKubePriorityLevelConfigurationListV1Beta1.GVK = {\n    apiVersion: 'flowcontrol.apiserver.k8s.io/v1beta1',\n    kind: 'PriorityLevelConfigurationList',\n};\n/**\n * Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.\n *\n * @schema io.k8s.api.networking.v1.Ingress\n */\nclass KubeIngress extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.networking.v1.Ingress\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeIngress.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.networking.v1.Ingress\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeIngress.GVK,\n            ...toJson_KubeIngressProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeIngress.GVK,\n            ...toJson_KubeIngressProps(resolved),\n        };\n    }\n}\nexports.KubeIngress = KubeIngress;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.networking.v1.Ingress\"\n */\nKubeIngress.GVK = {\n    apiVersion: 'networking.k8s.io/v1',\n    kind: 'Ingress',\n};\n/**\n * IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.\n *\n * @schema io.k8s.api.networking.v1.IngressClass\n */\nclass KubeIngressClass extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.networking.v1.IngressClass\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeIngressClass.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.networking.v1.IngressClass\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeIngressClass.GVK,\n            ...toJson_KubeIngressClassProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeIngressClass.GVK,\n            ...toJson_KubeIngressClassProps(resolved),\n        };\n    }\n}\nexports.KubeIngressClass = KubeIngressClass;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.networking.v1.IngressClass\"\n */\nKubeIngressClass.GVK = {\n    apiVersion: 'networking.k8s.io/v1',\n    kind: 'IngressClass',\n};\n/**\n * IngressClassList is a collection of IngressClasses.\n *\n * @schema io.k8s.api.networking.v1.IngressClassList\n */\nclass KubeIngressClassList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.networking.v1.IngressClassList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeIngressClassList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.networking.v1.IngressClassList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeIngressClassList.GVK,\n            ...toJson_KubeIngressClassListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeIngressClassList.GVK,\n            ...toJson_KubeIngressClassListProps(resolved),\n        };\n    }\n}\nexports.KubeIngressClassList = KubeIngressClassList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.networking.v1.IngressClassList\"\n */\nKubeIngressClassList.GVK = {\n    apiVersion: 'networking.k8s.io/v1',\n    kind: 'IngressClassList',\n};\n/**\n * IngressList is a collection of Ingress.\n *\n * @schema io.k8s.api.networking.v1.IngressList\n */\nclass KubeIngressList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.networking.v1.IngressList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeIngressList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.networking.v1.IngressList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeIngressList.GVK,\n            ...toJson_KubeIngressListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeIngressList.GVK,\n            ...toJson_KubeIngressListProps(resolved),\n        };\n    }\n}\nexports.KubeIngressList = KubeIngressList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.networking.v1.IngressList\"\n */\nKubeIngressList.GVK = {\n    apiVersion: 'networking.k8s.io/v1',\n    kind: 'IngressList',\n};\n/**\n * NetworkPolicy describes what network traffic is allowed for a set of Pods\n *\n * @schema io.k8s.api.networking.v1.NetworkPolicy\n */\nclass KubeNetworkPolicy extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.networking.v1.NetworkPolicy\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeNetworkPolicy.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.networking.v1.NetworkPolicy\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeNetworkPolicy.GVK,\n            ...toJson_KubeNetworkPolicyProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeNetworkPolicy.GVK,\n            ...toJson_KubeNetworkPolicyProps(resolved),\n        };\n    }\n}\nexports.KubeNetworkPolicy = KubeNetworkPolicy;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.networking.v1.NetworkPolicy\"\n */\nKubeNetworkPolicy.GVK = {\n    apiVersion: 'networking.k8s.io/v1',\n    kind: 'NetworkPolicy',\n};\n/**\n * NetworkPolicyList is a list of NetworkPolicy objects.\n *\n * @schema io.k8s.api.networking.v1.NetworkPolicyList\n */\nclass KubeNetworkPolicyList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.networking.v1.NetworkPolicyList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeNetworkPolicyList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.networking.v1.NetworkPolicyList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeNetworkPolicyList.GVK,\n            ...toJson_KubeNetworkPolicyListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeNetworkPolicyList.GVK,\n            ...toJson_KubeNetworkPolicyListProps(resolved),\n        };\n    }\n}\nexports.KubeNetworkPolicyList = KubeNetworkPolicyList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.networking.v1.NetworkPolicyList\"\n */\nKubeNetworkPolicyList.GVK = {\n    apiVersion: 'networking.k8s.io/v1',\n    kind: 'NetworkPolicyList',\n};\n/**\n * RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://kubernetes.io/docs/concepts/containers/runtime-class/\n *\n * @schema io.k8s.api.node.v1.RuntimeClass\n */\nclass KubeRuntimeClass extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.node.v1.RuntimeClass\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeRuntimeClass.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.node.v1.RuntimeClass\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeRuntimeClass.GVK,\n            ...toJson_KubeRuntimeClassProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRuntimeClass.GVK,\n            ...toJson_KubeRuntimeClassProps(resolved),\n        };\n    }\n}\nexports.KubeRuntimeClass = KubeRuntimeClass;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.node.v1.RuntimeClass\"\n */\nKubeRuntimeClass.GVK = {\n    apiVersion: 'node.k8s.io/v1',\n    kind: 'RuntimeClass',\n};\n/**\n * RuntimeClassList is a list of RuntimeClass objects.\n *\n * @schema io.k8s.api.node.v1.RuntimeClassList\n */\nclass KubeRuntimeClassList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.node.v1.RuntimeClassList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeRuntimeClassList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.node.v1.RuntimeClassList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeRuntimeClassList.GVK,\n            ...toJson_KubeRuntimeClassListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRuntimeClassList.GVK,\n            ...toJson_KubeRuntimeClassListProps(resolved),\n        };\n    }\n}\nexports.KubeRuntimeClassList = KubeRuntimeClassList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.node.v1.RuntimeClassList\"\n */\nKubeRuntimeClassList.GVK = {\n    apiVersion: 'node.k8s.io/v1',\n    kind: 'RuntimeClassList',\n};\n/**\n * RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class\n *\n * @schema io.k8s.api.node.v1alpha1.RuntimeClass\n */\nclass KubeRuntimeClassV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.node.v1alpha1.RuntimeClass\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeRuntimeClassV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.node.v1alpha1.RuntimeClass\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeRuntimeClassV1Alpha1.GVK,\n            ...toJson_KubeRuntimeClassV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRuntimeClassV1Alpha1.GVK,\n            ...toJson_KubeRuntimeClassV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeRuntimeClassV1Alpha1 = KubeRuntimeClassV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.node.v1alpha1.RuntimeClass\"\n */\nKubeRuntimeClassV1Alpha1.GVK = {\n    apiVersion: 'node.k8s.io/v1alpha1',\n    kind: 'RuntimeClass',\n};\n/**\n * RuntimeClassList is a list of RuntimeClass objects.\n *\n * @schema io.k8s.api.node.v1alpha1.RuntimeClassList\n */\nclass KubeRuntimeClassListV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.node.v1alpha1.RuntimeClassList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeRuntimeClassListV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.node.v1alpha1.RuntimeClassList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeRuntimeClassListV1Alpha1.GVK,\n            ...toJson_KubeRuntimeClassListV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRuntimeClassListV1Alpha1.GVK,\n            ...toJson_KubeRuntimeClassListV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeRuntimeClassListV1Alpha1 = KubeRuntimeClassListV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.node.v1alpha1.RuntimeClassList\"\n */\nKubeRuntimeClassListV1Alpha1.GVK = {\n    apiVersion: 'node.k8s.io/v1alpha1',\n    kind: 'RuntimeClassList',\n};\n/**\n * RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class\n *\n * @schema io.k8s.api.node.v1beta1.RuntimeClass\n */\nclass KubeRuntimeClassV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.node.v1beta1.RuntimeClass\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeRuntimeClassV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.node.v1beta1.RuntimeClass\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeRuntimeClassV1Beta1.GVK,\n            ...toJson_KubeRuntimeClassV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRuntimeClassV1Beta1.GVK,\n            ...toJson_KubeRuntimeClassV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeRuntimeClassV1Beta1 = KubeRuntimeClassV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.node.v1beta1.RuntimeClass\"\n */\nKubeRuntimeClassV1Beta1.GVK = {\n    apiVersion: 'node.k8s.io/v1beta1',\n    kind: 'RuntimeClass',\n};\n/**\n * RuntimeClassList is a list of RuntimeClass objects.\n *\n * @schema io.k8s.api.node.v1beta1.RuntimeClassList\n */\nclass KubeRuntimeClassListV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.node.v1beta1.RuntimeClassList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeRuntimeClassListV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.node.v1beta1.RuntimeClassList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeRuntimeClassListV1Beta1.GVK,\n            ...toJson_KubeRuntimeClassListV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRuntimeClassListV1Beta1.GVK,\n            ...toJson_KubeRuntimeClassListV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeRuntimeClassListV1Beta1 = KubeRuntimeClassListV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.node.v1beta1.RuntimeClassList\"\n */\nKubeRuntimeClassListV1Beta1.GVK = {\n    apiVersion: 'node.k8s.io/v1beta1',\n    kind: 'RuntimeClassList',\n};\n/**\n * Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.\n *\n * @schema io.k8s.api.policy.v1.Eviction\n */\nclass KubeEviction extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.policy.v1.Eviction\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeEviction.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.policy.v1.Eviction\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeEviction.GVK,\n            ...toJson_KubeEvictionProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeEviction.GVK,\n            ...toJson_KubeEvictionProps(resolved),\n        };\n    }\n}\nexports.KubeEviction = KubeEviction;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.policy.v1.Eviction\"\n */\nKubeEviction.GVK = {\n    apiVersion: 'policy/v1',\n    kind: 'Eviction',\n};\n/**\n * PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods\n *\n * @schema io.k8s.api.policy.v1.PodDisruptionBudget\n */\nclass KubePodDisruptionBudget extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.policy.v1.PodDisruptionBudget\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubePodDisruptionBudget.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.policy.v1.PodDisruptionBudget\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubePodDisruptionBudget.GVK,\n            ...toJson_KubePodDisruptionBudgetProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePodDisruptionBudget.GVK,\n            ...toJson_KubePodDisruptionBudgetProps(resolved),\n        };\n    }\n}\nexports.KubePodDisruptionBudget = KubePodDisruptionBudget;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.policy.v1.PodDisruptionBudget\"\n */\nKubePodDisruptionBudget.GVK = {\n    apiVersion: 'policy/v1',\n    kind: 'PodDisruptionBudget',\n};\n/**\n * PodDisruptionBudgetList is a collection of PodDisruptionBudgets.\n *\n * @schema io.k8s.api.policy.v1.PodDisruptionBudgetList\n */\nclass KubePodDisruptionBudgetList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.policy.v1.PodDisruptionBudgetList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubePodDisruptionBudgetList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.policy.v1.PodDisruptionBudgetList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubePodDisruptionBudgetList.GVK,\n            ...toJson_KubePodDisruptionBudgetListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePodDisruptionBudgetList.GVK,\n            ...toJson_KubePodDisruptionBudgetListProps(resolved),\n        };\n    }\n}\nexports.KubePodDisruptionBudgetList = KubePodDisruptionBudgetList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.policy.v1.PodDisruptionBudgetList\"\n */\nKubePodDisruptionBudgetList.GVK = {\n    apiVersion: 'policy/v1',\n    kind: 'PodDisruptionBudgetList',\n};\n/**\n * PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods\n *\n * @schema io.k8s.api.policy.v1beta1.PodDisruptionBudget\n */\nclass KubePodDisruptionBudgetV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.policy.v1beta1.PodDisruptionBudget\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubePodDisruptionBudgetV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.policy.v1beta1.PodDisruptionBudget\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubePodDisruptionBudgetV1Beta1.GVK,\n            ...toJson_KubePodDisruptionBudgetV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePodDisruptionBudgetV1Beta1.GVK,\n            ...toJson_KubePodDisruptionBudgetV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubePodDisruptionBudgetV1Beta1 = KubePodDisruptionBudgetV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.policy.v1beta1.PodDisruptionBudget\"\n */\nKubePodDisruptionBudgetV1Beta1.GVK = {\n    apiVersion: 'policy/v1beta1',\n    kind: 'PodDisruptionBudget',\n};\n/**\n * PodDisruptionBudgetList is a collection of PodDisruptionBudgets.\n *\n * @schema io.k8s.api.policy.v1beta1.PodDisruptionBudgetList\n */\nclass KubePodDisruptionBudgetListV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.policy.v1beta1.PodDisruptionBudgetList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubePodDisruptionBudgetListV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.policy.v1beta1.PodDisruptionBudgetList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubePodDisruptionBudgetListV1Beta1.GVK,\n            ...toJson_KubePodDisruptionBudgetListV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePodDisruptionBudgetListV1Beta1.GVK,\n            ...toJson_KubePodDisruptionBudgetListV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubePodDisruptionBudgetListV1Beta1 = KubePodDisruptionBudgetListV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.policy.v1beta1.PodDisruptionBudgetList\"\n */\nKubePodDisruptionBudgetListV1Beta1.GVK = {\n    apiVersion: 'policy/v1beta1',\n    kind: 'PodDisruptionBudgetList',\n};\n/**\n * PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container. Deprecated in 1.21.\n *\n * @schema io.k8s.api.policy.v1beta1.PodSecurityPolicy\n */\nclass KubePodSecurityPolicyV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.policy.v1beta1.PodSecurityPolicy\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubePodSecurityPolicyV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.policy.v1beta1.PodSecurityPolicy\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubePodSecurityPolicyV1Beta1.GVK,\n            ...toJson_KubePodSecurityPolicyV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePodSecurityPolicyV1Beta1.GVK,\n            ...toJson_KubePodSecurityPolicyV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubePodSecurityPolicyV1Beta1 = KubePodSecurityPolicyV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.policy.v1beta1.PodSecurityPolicy\"\n */\nKubePodSecurityPolicyV1Beta1.GVK = {\n    apiVersion: 'policy/v1beta1',\n    kind: 'PodSecurityPolicy',\n};\n/**\n * PodSecurityPolicyList is a list of PodSecurityPolicy objects.\n *\n * @schema io.k8s.api.policy.v1beta1.PodSecurityPolicyList\n */\nclass KubePodSecurityPolicyListV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.policy.v1beta1.PodSecurityPolicyList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubePodSecurityPolicyListV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.policy.v1beta1.PodSecurityPolicyList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubePodSecurityPolicyListV1Beta1.GVK,\n            ...toJson_KubePodSecurityPolicyListV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePodSecurityPolicyListV1Beta1.GVK,\n            ...toJson_KubePodSecurityPolicyListV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubePodSecurityPolicyListV1Beta1 = KubePodSecurityPolicyListV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.policy.v1beta1.PodSecurityPolicyList\"\n */\nKubePodSecurityPolicyListV1Beta1.GVK = {\n    apiVersion: 'policy/v1beta1',\n    kind: 'PodSecurityPolicyList',\n};\n/**\n * ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.\n *\n * @schema io.k8s.api.rbac.v1.ClusterRole\n */\nclass KubeClusterRole extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1.ClusterRole\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeClusterRole.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1.ClusterRole\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeClusterRole.GVK,\n            ...toJson_KubeClusterRoleProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeClusterRole.GVK,\n            ...toJson_KubeClusterRoleProps(resolved),\n        };\n    }\n}\nexports.KubeClusterRole = KubeClusterRole;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1.ClusterRole\"\n */\nKubeClusterRole.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1',\n    kind: 'ClusterRole',\n};\n/**\n * ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.\n *\n * @schema io.k8s.api.rbac.v1.ClusterRoleBinding\n */\nclass KubeClusterRoleBinding extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1.ClusterRoleBinding\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeClusterRoleBinding.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1.ClusterRoleBinding\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeClusterRoleBinding.GVK,\n            ...toJson_KubeClusterRoleBindingProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeClusterRoleBinding.GVK,\n            ...toJson_KubeClusterRoleBindingProps(resolved),\n        };\n    }\n}\nexports.KubeClusterRoleBinding = KubeClusterRoleBinding;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1.ClusterRoleBinding\"\n */\nKubeClusterRoleBinding.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1',\n    kind: 'ClusterRoleBinding',\n};\n/**\n * ClusterRoleBindingList is a collection of ClusterRoleBindings\n *\n * @schema io.k8s.api.rbac.v1.ClusterRoleBindingList\n */\nclass KubeClusterRoleBindingList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1.ClusterRoleBindingList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeClusterRoleBindingList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1.ClusterRoleBindingList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeClusterRoleBindingList.GVK,\n            ...toJson_KubeClusterRoleBindingListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeClusterRoleBindingList.GVK,\n            ...toJson_KubeClusterRoleBindingListProps(resolved),\n        };\n    }\n}\nexports.KubeClusterRoleBindingList = KubeClusterRoleBindingList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1.ClusterRoleBindingList\"\n */\nKubeClusterRoleBindingList.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1',\n    kind: 'ClusterRoleBindingList',\n};\n/**\n * ClusterRoleList is a collection of ClusterRoles\n *\n * @schema io.k8s.api.rbac.v1.ClusterRoleList\n */\nclass KubeClusterRoleList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1.ClusterRoleList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeClusterRoleList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1.ClusterRoleList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeClusterRoleList.GVK,\n            ...toJson_KubeClusterRoleListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeClusterRoleList.GVK,\n            ...toJson_KubeClusterRoleListProps(resolved),\n        };\n    }\n}\nexports.KubeClusterRoleList = KubeClusterRoleList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1.ClusterRoleList\"\n */\nKubeClusterRoleList.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1',\n    kind: 'ClusterRoleList',\n};\n/**\n * Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.\n *\n * @schema io.k8s.api.rbac.v1.Role\n */\nclass KubeRole extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1.Role\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeRole.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1.Role\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeRole.GVK,\n            ...toJson_KubeRoleProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRole.GVK,\n            ...toJson_KubeRoleProps(resolved),\n        };\n    }\n}\nexports.KubeRole = KubeRole;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1.Role\"\n */\nKubeRole.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1',\n    kind: 'Role',\n};\n/**\n * RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.\n *\n * @schema io.k8s.api.rbac.v1.RoleBinding\n */\nclass KubeRoleBinding extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1.RoleBinding\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeRoleBinding.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1.RoleBinding\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeRoleBinding.GVK,\n            ...toJson_KubeRoleBindingProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRoleBinding.GVK,\n            ...toJson_KubeRoleBindingProps(resolved),\n        };\n    }\n}\nexports.KubeRoleBinding = KubeRoleBinding;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1.RoleBinding\"\n */\nKubeRoleBinding.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1',\n    kind: 'RoleBinding',\n};\n/**\n * RoleBindingList is a collection of RoleBindings\n *\n * @schema io.k8s.api.rbac.v1.RoleBindingList\n */\nclass KubeRoleBindingList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1.RoleBindingList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeRoleBindingList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1.RoleBindingList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeRoleBindingList.GVK,\n            ...toJson_KubeRoleBindingListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRoleBindingList.GVK,\n            ...toJson_KubeRoleBindingListProps(resolved),\n        };\n    }\n}\nexports.KubeRoleBindingList = KubeRoleBindingList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1.RoleBindingList\"\n */\nKubeRoleBindingList.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1',\n    kind: 'RoleBindingList',\n};\n/**\n * RoleList is a collection of Roles\n *\n * @schema io.k8s.api.rbac.v1.RoleList\n */\nclass KubeRoleList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1.RoleList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeRoleList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1.RoleList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeRoleList.GVK,\n            ...toJson_KubeRoleListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRoleList.GVK,\n            ...toJson_KubeRoleListProps(resolved),\n        };\n    }\n}\nexports.KubeRoleList = KubeRoleList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1.RoleList\"\n */\nKubeRoleList.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1',\n    kind: 'RoleList',\n};\n/**\n * ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22.\n *\n * @schema io.k8s.api.rbac.v1alpha1.ClusterRole\n */\nclass KubeClusterRoleV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1alpha1.ClusterRole\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeClusterRoleV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1alpha1.ClusterRole\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeClusterRoleV1Alpha1.GVK,\n            ...toJson_KubeClusterRoleV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeClusterRoleV1Alpha1.GVK,\n            ...toJson_KubeClusterRoleV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeClusterRoleV1Alpha1 = KubeClusterRoleV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1alpha1.ClusterRole\"\n */\nKubeClusterRoleV1Alpha1.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1alpha1',\n    kind: 'ClusterRole',\n};\n/**\n * ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.22.\n *\n * @schema io.k8s.api.rbac.v1alpha1.ClusterRoleBinding\n */\nclass KubeClusterRoleBindingV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1alpha1.ClusterRoleBinding\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeClusterRoleBindingV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1alpha1.ClusterRoleBinding\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeClusterRoleBindingV1Alpha1.GVK,\n            ...toJson_KubeClusterRoleBindingV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeClusterRoleBindingV1Alpha1.GVK,\n            ...toJson_KubeClusterRoleBindingV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeClusterRoleBindingV1Alpha1 = KubeClusterRoleBindingV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1alpha1.ClusterRoleBinding\"\n */\nKubeClusterRoleBindingV1Alpha1.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1alpha1',\n    kind: 'ClusterRoleBinding',\n};\n/**\n * ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindings, and will no longer be served in v1.22.\n *\n * @schema io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList\n */\nclass KubeClusterRoleBindingListV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeClusterRoleBindingListV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeClusterRoleBindingListV1Alpha1.GVK,\n            ...toJson_KubeClusterRoleBindingListV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeClusterRoleBindingListV1Alpha1.GVK,\n            ...toJson_KubeClusterRoleBindingListV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeClusterRoleBindingListV1Alpha1 = KubeClusterRoleBindingListV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList\"\n */\nKubeClusterRoleBindingListV1Alpha1.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1alpha1',\n    kind: 'ClusterRoleBindingList',\n};\n/**\n * ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.22.\n *\n * @schema io.k8s.api.rbac.v1alpha1.ClusterRoleList\n */\nclass KubeClusterRoleListV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1alpha1.ClusterRoleList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeClusterRoleListV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1alpha1.ClusterRoleList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeClusterRoleListV1Alpha1.GVK,\n            ...toJson_KubeClusterRoleListV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeClusterRoleListV1Alpha1.GVK,\n            ...toJson_KubeClusterRoleListV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeClusterRoleListV1Alpha1 = KubeClusterRoleListV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1alpha1.ClusterRoleList\"\n */\nKubeClusterRoleListV1Alpha1.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1alpha1',\n    kind: 'ClusterRoleList',\n};\n/**\n * Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.22.\n *\n * @schema io.k8s.api.rbac.v1alpha1.Role\n */\nclass KubeRoleV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1alpha1.Role\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeRoleV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1alpha1.Role\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeRoleV1Alpha1.GVK,\n            ...toJson_KubeRoleV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRoleV1Alpha1.GVK,\n            ...toJson_KubeRoleV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeRoleV1Alpha1 = KubeRoleV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1alpha1.Role\"\n */\nKubeRoleV1Alpha1.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1alpha1',\n    kind: 'Role',\n};\n/**\n * RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.22.\n *\n * @schema io.k8s.api.rbac.v1alpha1.RoleBinding\n */\nclass KubeRoleBindingV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1alpha1.RoleBinding\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeRoleBindingV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1alpha1.RoleBinding\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeRoleBindingV1Alpha1.GVK,\n            ...toJson_KubeRoleBindingV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRoleBindingV1Alpha1.GVK,\n            ...toJson_KubeRoleBindingV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeRoleBindingV1Alpha1 = KubeRoleBindingV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1alpha1.RoleBinding\"\n */\nKubeRoleBindingV1Alpha1.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1alpha1',\n    kind: 'RoleBinding',\n};\n/**\n * RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.22.\n *\n * @schema io.k8s.api.rbac.v1alpha1.RoleBindingList\n */\nclass KubeRoleBindingListV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1alpha1.RoleBindingList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeRoleBindingListV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1alpha1.RoleBindingList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeRoleBindingListV1Alpha1.GVK,\n            ...toJson_KubeRoleBindingListV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRoleBindingListV1Alpha1.GVK,\n            ...toJson_KubeRoleBindingListV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeRoleBindingListV1Alpha1 = KubeRoleBindingListV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1alpha1.RoleBindingList\"\n */\nKubeRoleBindingListV1Alpha1.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1alpha1',\n    kind: 'RoleBindingList',\n};\n/**\n * RoleList is a collection of Roles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.22.\n *\n * @schema io.k8s.api.rbac.v1alpha1.RoleList\n */\nclass KubeRoleListV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.rbac.v1alpha1.RoleList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeRoleListV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.rbac.v1alpha1.RoleList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeRoleListV1Alpha1.GVK,\n            ...toJson_KubeRoleListV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeRoleListV1Alpha1.GVK,\n            ...toJson_KubeRoleListV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeRoleListV1Alpha1 = KubeRoleListV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.rbac.v1alpha1.RoleList\"\n */\nKubeRoleListV1Alpha1.GVK = {\n    apiVersion: 'rbac.authorization.k8s.io/v1alpha1',\n    kind: 'RoleList',\n};\n/**\n * PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.\n *\n * @schema io.k8s.api.scheduling.v1.PriorityClass\n */\nclass KubePriorityClass extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.scheduling.v1.PriorityClass\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubePriorityClass.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.scheduling.v1.PriorityClass\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubePriorityClass.GVK,\n            ...toJson_KubePriorityClassProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePriorityClass.GVK,\n            ...toJson_KubePriorityClassProps(resolved),\n        };\n    }\n}\nexports.KubePriorityClass = KubePriorityClass;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.scheduling.v1.PriorityClass\"\n */\nKubePriorityClass.GVK = {\n    apiVersion: 'scheduling.k8s.io/v1',\n    kind: 'PriorityClass',\n};\n/**\n * PriorityClassList is a collection of priority classes.\n *\n * @schema io.k8s.api.scheduling.v1.PriorityClassList\n */\nclass KubePriorityClassList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.scheduling.v1.PriorityClassList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubePriorityClassList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.scheduling.v1.PriorityClassList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubePriorityClassList.GVK,\n            ...toJson_KubePriorityClassListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePriorityClassList.GVK,\n            ...toJson_KubePriorityClassListProps(resolved),\n        };\n    }\n}\nexports.KubePriorityClassList = KubePriorityClassList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.scheduling.v1.PriorityClassList\"\n */\nKubePriorityClassList.GVK = {\n    apiVersion: 'scheduling.k8s.io/v1',\n    kind: 'PriorityClassList',\n};\n/**\n * DEPRECATED - This group version of PriorityClass is deprecated by scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.\n *\n * @schema io.k8s.api.scheduling.v1alpha1.PriorityClass\n */\nclass KubePriorityClassV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.scheduling.v1alpha1.PriorityClass\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubePriorityClassV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.scheduling.v1alpha1.PriorityClass\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubePriorityClassV1Alpha1.GVK,\n            ...toJson_KubePriorityClassV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePriorityClassV1Alpha1.GVK,\n            ...toJson_KubePriorityClassV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubePriorityClassV1Alpha1 = KubePriorityClassV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.scheduling.v1alpha1.PriorityClass\"\n */\nKubePriorityClassV1Alpha1.GVK = {\n    apiVersion: 'scheduling.k8s.io/v1alpha1',\n    kind: 'PriorityClass',\n};\n/**\n * PriorityClassList is a collection of priority classes.\n *\n * @schema io.k8s.api.scheduling.v1alpha1.PriorityClassList\n */\nclass KubePriorityClassListV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.scheduling.v1alpha1.PriorityClassList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubePriorityClassListV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.scheduling.v1alpha1.PriorityClassList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubePriorityClassListV1Alpha1.GVK,\n            ...toJson_KubePriorityClassListV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubePriorityClassListV1Alpha1.GVK,\n            ...toJson_KubePriorityClassListV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubePriorityClassListV1Alpha1 = KubePriorityClassListV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.scheduling.v1alpha1.PriorityClassList\"\n */\nKubePriorityClassListV1Alpha1.GVK = {\n    apiVersion: 'scheduling.k8s.io/v1alpha1',\n    kind: 'PriorityClassList',\n};\n/**\n * CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.\n *\n * @schema io.k8s.api.storage.v1.CSIDriver\n */\nclass KubeCsiDriver extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1.CSIDriver\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCsiDriver.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1.CSIDriver\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCsiDriver.GVK,\n            ...toJson_KubeCsiDriverProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCsiDriver.GVK,\n            ...toJson_KubeCsiDriverProps(resolved),\n        };\n    }\n}\nexports.KubeCsiDriver = KubeCsiDriver;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1.CSIDriver\"\n */\nKubeCsiDriver.GVK = {\n    apiVersion: 'storage.k8s.io/v1',\n    kind: 'CSIDriver',\n};\n/**\n * CSIDriverList is a collection of CSIDriver objects.\n *\n * @schema io.k8s.api.storage.v1.CSIDriverList\n */\nclass KubeCsiDriverList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1.CSIDriverList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCsiDriverList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1.CSIDriverList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCsiDriverList.GVK,\n            ...toJson_KubeCsiDriverListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCsiDriverList.GVK,\n            ...toJson_KubeCsiDriverListProps(resolved),\n        };\n    }\n}\nexports.KubeCsiDriverList = KubeCsiDriverList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1.CSIDriverList\"\n */\nKubeCsiDriverList.GVK = {\n    apiVersion: 'storage.k8s.io/v1',\n    kind: 'CSIDriverList',\n};\n/**\n * CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.\n *\n * @schema io.k8s.api.storage.v1.CSINode\n */\nclass KubeCsiNode extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1.CSINode\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCsiNode.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1.CSINode\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCsiNode.GVK,\n            ...toJson_KubeCsiNodeProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCsiNode.GVK,\n            ...toJson_KubeCsiNodeProps(resolved),\n        };\n    }\n}\nexports.KubeCsiNode = KubeCsiNode;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1.CSINode\"\n */\nKubeCsiNode.GVK = {\n    apiVersion: 'storage.k8s.io/v1',\n    kind: 'CSINode',\n};\n/**\n * CSINodeList is a collection of CSINode objects.\n *\n * @schema io.k8s.api.storage.v1.CSINodeList\n */\nclass KubeCsiNodeList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1.CSINodeList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCsiNodeList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1.CSINodeList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCsiNodeList.GVK,\n            ...toJson_KubeCsiNodeListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCsiNodeList.GVK,\n            ...toJson_KubeCsiNodeListProps(resolved),\n        };\n    }\n}\nexports.KubeCsiNodeList = KubeCsiNodeList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1.CSINodeList\"\n */\nKubeCsiNodeList.GVK = {\n    apiVersion: 'storage.k8s.io/v1',\n    kind: 'CSINodeList',\n};\n/**\n * StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.\n *\n * @schema io.k8s.api.storage.v1.StorageClass\n */\nclass KubeStorageClass extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1.StorageClass\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeStorageClass.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1.StorageClass\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeStorageClass.GVK,\n            ...toJson_KubeStorageClassProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeStorageClass.GVK,\n            ...toJson_KubeStorageClassProps(resolved),\n        };\n    }\n}\nexports.KubeStorageClass = KubeStorageClass;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1.StorageClass\"\n */\nKubeStorageClass.GVK = {\n    apiVersion: 'storage.k8s.io/v1',\n    kind: 'StorageClass',\n};\n/**\n * StorageClassList is a collection of storage classes.\n *\n * @schema io.k8s.api.storage.v1.StorageClassList\n */\nclass KubeStorageClassList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1.StorageClassList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeStorageClassList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1.StorageClassList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeStorageClassList.GVK,\n            ...toJson_KubeStorageClassListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeStorageClassList.GVK,\n            ...toJson_KubeStorageClassListProps(resolved),\n        };\n    }\n}\nexports.KubeStorageClassList = KubeStorageClassList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1.StorageClassList\"\n */\nKubeStorageClassList.GVK = {\n    apiVersion: 'storage.k8s.io/v1',\n    kind: 'StorageClassList',\n};\n/**\n * VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\nVolumeAttachment objects are non-namespaced.\n *\n * @schema io.k8s.api.storage.v1.VolumeAttachment\n */\nclass KubeVolumeAttachment extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1.VolumeAttachment\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeVolumeAttachment.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1.VolumeAttachment\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeVolumeAttachment.GVK,\n            ...toJson_KubeVolumeAttachmentProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeVolumeAttachment.GVK,\n            ...toJson_KubeVolumeAttachmentProps(resolved),\n        };\n    }\n}\nexports.KubeVolumeAttachment = KubeVolumeAttachment;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1.VolumeAttachment\"\n */\nKubeVolumeAttachment.GVK = {\n    apiVersion: 'storage.k8s.io/v1',\n    kind: 'VolumeAttachment',\n};\n/**\n * VolumeAttachmentList is a collection of VolumeAttachment objects.\n *\n * @schema io.k8s.api.storage.v1.VolumeAttachmentList\n */\nclass KubeVolumeAttachmentList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1.VolumeAttachmentList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeVolumeAttachmentList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1.VolumeAttachmentList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeVolumeAttachmentList.GVK,\n            ...toJson_KubeVolumeAttachmentListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeVolumeAttachmentList.GVK,\n            ...toJson_KubeVolumeAttachmentListProps(resolved),\n        };\n    }\n}\nexports.KubeVolumeAttachmentList = KubeVolumeAttachmentList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1.VolumeAttachmentList\"\n */\nKubeVolumeAttachmentList.GVK = {\n    apiVersion: 'storage.k8s.io/v1',\n    kind: 'VolumeAttachmentList',\n};\n/**\n * CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.\n\nFor example this can express things like: - StorageClass \"standard\" has \"1234 GiB\" available in \"topology.kubernetes.io/zone=us-east1\" - StorageClass \"localssd\" has \"10 GiB\" available in \"kubernetes.io/hostname=knode-abc123\"\n\nThe following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero\n\nThe producer of these objects can decide which approach is more suitable.\n\nThey are consumed by the kube-scheduler if the CSIStorageCapacity beta feature gate is enabled there and a CSI driver opts into capacity-aware scheduling with CSIDriver.StorageCapacity.\n *\n * @schema io.k8s.api.storage.v1alpha1.CSIStorageCapacity\n */\nclass KubeCsiStorageCapacityV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1alpha1.CSIStorageCapacity\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCsiStorageCapacityV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1alpha1.CSIStorageCapacity\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCsiStorageCapacityV1Alpha1.GVK,\n            ...toJson_KubeCsiStorageCapacityV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCsiStorageCapacityV1Alpha1.GVK,\n            ...toJson_KubeCsiStorageCapacityV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeCsiStorageCapacityV1Alpha1 = KubeCsiStorageCapacityV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1alpha1.CSIStorageCapacity\"\n */\nKubeCsiStorageCapacityV1Alpha1.GVK = {\n    apiVersion: 'storage.k8s.io/v1alpha1',\n    kind: 'CSIStorageCapacity',\n};\n/**\n * CSIStorageCapacityList is a collection of CSIStorageCapacity objects.\n *\n * @schema io.k8s.api.storage.v1alpha1.CSIStorageCapacityList\n */\nclass KubeCsiStorageCapacityListV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1alpha1.CSIStorageCapacityList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCsiStorageCapacityListV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1alpha1.CSIStorageCapacityList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCsiStorageCapacityListV1Alpha1.GVK,\n            ...toJson_KubeCsiStorageCapacityListV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCsiStorageCapacityListV1Alpha1.GVK,\n            ...toJson_KubeCsiStorageCapacityListV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeCsiStorageCapacityListV1Alpha1 = KubeCsiStorageCapacityListV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1alpha1.CSIStorageCapacityList\"\n */\nKubeCsiStorageCapacityListV1Alpha1.GVK = {\n    apiVersion: 'storage.k8s.io/v1alpha1',\n    kind: 'CSIStorageCapacityList',\n};\n/**\n * VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\nVolumeAttachment objects are non-namespaced.\n *\n * @schema io.k8s.api.storage.v1alpha1.VolumeAttachment\n */\nclass KubeVolumeAttachmentV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1alpha1.VolumeAttachment\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeVolumeAttachmentV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1alpha1.VolumeAttachment\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeVolumeAttachmentV1Alpha1.GVK,\n            ...toJson_KubeVolumeAttachmentV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeVolumeAttachmentV1Alpha1.GVK,\n            ...toJson_KubeVolumeAttachmentV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeVolumeAttachmentV1Alpha1 = KubeVolumeAttachmentV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1alpha1.VolumeAttachment\"\n */\nKubeVolumeAttachmentV1Alpha1.GVK = {\n    apiVersion: 'storage.k8s.io/v1alpha1',\n    kind: 'VolumeAttachment',\n};\n/**\n * VolumeAttachmentList is a collection of VolumeAttachment objects.\n *\n * @schema io.k8s.api.storage.v1alpha1.VolumeAttachmentList\n */\nclass KubeVolumeAttachmentListV1Alpha1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1alpha1.VolumeAttachmentList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeVolumeAttachmentListV1Alpha1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1alpha1.VolumeAttachmentList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeVolumeAttachmentListV1Alpha1.GVK,\n            ...toJson_KubeVolumeAttachmentListV1Alpha1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeVolumeAttachmentListV1Alpha1.GVK,\n            ...toJson_KubeVolumeAttachmentListV1Alpha1Props(resolved),\n        };\n    }\n}\nexports.KubeVolumeAttachmentListV1Alpha1 = KubeVolumeAttachmentListV1Alpha1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1alpha1.VolumeAttachmentList\"\n */\nKubeVolumeAttachmentListV1Alpha1.GVK = {\n    apiVersion: 'storage.k8s.io/v1alpha1',\n    kind: 'VolumeAttachmentList',\n};\n/**\n * CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.\n\nFor example this can express things like: - StorageClass \"standard\" has \"1234 GiB\" available in \"topology.kubernetes.io/zone=us-east1\" - StorageClass \"localssd\" has \"10 GiB\" available in \"kubernetes.io/hostname=knode-abc123\"\n\nThe following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero\n\nThe producer of these objects can decide which approach is more suitable.\n\nThey are consumed by the kube-scheduler if the CSIStorageCapacity beta feature gate is enabled there and a CSI driver opts into capacity-aware scheduling with CSIDriver.StorageCapacity.\n *\n * @schema io.k8s.api.storage.v1beta1.CSIStorageCapacity\n */\nclass KubeCsiStorageCapacityV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1beta1.CSIStorageCapacity\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCsiStorageCapacityV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1beta1.CSIStorageCapacity\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCsiStorageCapacityV1Beta1.GVK,\n            ...toJson_KubeCsiStorageCapacityV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCsiStorageCapacityV1Beta1.GVK,\n            ...toJson_KubeCsiStorageCapacityV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeCsiStorageCapacityV1Beta1 = KubeCsiStorageCapacityV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1beta1.CSIStorageCapacity\"\n */\nKubeCsiStorageCapacityV1Beta1.GVK = {\n    apiVersion: 'storage.k8s.io/v1beta1',\n    kind: 'CSIStorageCapacity',\n};\n/**\n * CSIStorageCapacityList is a collection of CSIStorageCapacity objects.\n *\n * @schema io.k8s.api.storage.v1beta1.CSIStorageCapacityList\n */\nclass KubeCsiStorageCapacityListV1Beta1 extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.api.storage.v1beta1.CSIStorageCapacityList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCsiStorageCapacityListV1Beta1.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.api.storage.v1beta1.CSIStorageCapacityList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCsiStorageCapacityListV1Beta1.GVK,\n            ...toJson_KubeCsiStorageCapacityListV1Beta1Props(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCsiStorageCapacityListV1Beta1.GVK,\n            ...toJson_KubeCsiStorageCapacityListV1Beta1Props(resolved),\n        };\n    }\n}\nexports.KubeCsiStorageCapacityListV1Beta1 = KubeCsiStorageCapacityListV1Beta1;\n/**\n * Returns the apiVersion and kind for \"io.k8s.api.storage.v1beta1.CSIStorageCapacityList\"\n */\nKubeCsiStorageCapacityListV1Beta1.GVK = {\n    apiVersion: 'storage.k8s.io/v1beta1',\n    kind: 'CSIStorageCapacityList',\n};\n/**\n * CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>.\n *\n * @schema io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition\n */\nclass KubeCustomResourceDefinition extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCustomResourceDefinition.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCustomResourceDefinition.GVK,\n            ...toJson_KubeCustomResourceDefinitionProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCustomResourceDefinition.GVK,\n            ...toJson_KubeCustomResourceDefinitionProps(resolved),\n        };\n    }\n}\nexports.KubeCustomResourceDefinition = KubeCustomResourceDefinition;\n/**\n * Returns the apiVersion and kind for \"io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition\"\n */\nKubeCustomResourceDefinition.GVK = {\n    apiVersion: 'apiextensions.k8s.io/v1',\n    kind: 'CustomResourceDefinition',\n};\n/**\n * CustomResourceDefinitionList is a list of CustomResourceDefinition objects.\n *\n * @schema io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList\n */\nclass KubeCustomResourceDefinitionList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeCustomResourceDefinitionList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeCustomResourceDefinitionList.GVK,\n            ...toJson_KubeCustomResourceDefinitionListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeCustomResourceDefinitionList.GVK,\n            ...toJson_KubeCustomResourceDefinitionListProps(resolved),\n        };\n    }\n}\nexports.KubeCustomResourceDefinitionList = KubeCustomResourceDefinitionList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList\"\n */\nKubeCustomResourceDefinitionList.GVK = {\n    apiVersion: 'apiextensions.k8s.io/v1',\n    kind: 'CustomResourceDefinitionList',\n};\n/**\n * Status is a return value for calls that don't return other objects.\n *\n * @schema io.k8s.apimachinery.pkg.apis.meta.v1.Status\n */\nclass KubeStatus extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.apimachinery.pkg.apis.meta.v1.Status\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeStatus.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.apimachinery.pkg.apis.meta.v1.Status\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeStatus.GVK,\n            ...toJson_KubeStatusProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeStatus.GVK,\n            ...toJson_KubeStatusProps(resolved),\n        };\n    }\n}\nexports.KubeStatus = KubeStatus;\n/**\n * Returns the apiVersion and kind for \"io.k8s.apimachinery.pkg.apis.meta.v1.Status\"\n */\nKubeStatus.GVK = {\n    apiVersion: 'v1',\n    kind: 'Status',\n};\n/**\n * APIService represents a server for a particular GroupVersion. Name must be \"version.group\".\n *\n * @schema io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService\n */\nclass KubeApiService extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            ...KubeApiService.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props = {}) {\n        return {\n            ...KubeApiService.GVK,\n            ...toJson_KubeApiServiceProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeApiService.GVK,\n            ...toJson_KubeApiServiceProps(resolved),\n        };\n    }\n}\nexports.KubeApiService = KubeApiService;\n/**\n * Returns the apiVersion and kind for \"io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService\"\n */\nKubeApiService.GVK = {\n    apiVersion: 'apiregistration.k8s.io/v1',\n    kind: 'APIService',\n};\n/**\n * APIServiceList is a list of APIService objects.\n *\n * @schema io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList\n */\nclass KubeApiServiceList extends cdk8s_1.ApiObject {\n    /**\n     * Defines a \"io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...KubeApiServiceList.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders a Kubernetes manifest for \"io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...KubeApiServiceList.GVK,\n            ...toJson_KubeApiServiceListProps(props),\n        };\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...KubeApiServiceList.GVK,\n            ...toJson_KubeApiServiceListProps(resolved),\n        };\n    }\n}\nexports.KubeApiServiceList = KubeApiServiceList;\n/**\n * Returns the apiVersion and kind for \"io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList\"\n */\nKubeApiServiceList.GVK = {\n    apiVersion: 'apiregistration.k8s.io/v1',\n    kind: 'APIServiceList',\n};\n/**\n * Converts an object of type 'KubeMutatingWebhookConfigurationProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeMutatingWebhookConfigurationProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'webhooks': (_a = obj.webhooks) === null || _a === void 0 ? void 0 : _a.map(y => toJson_MutatingWebhook(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeMutatingWebhookConfigurationProps = toJson_KubeMutatingWebhookConfigurationProps;\n/**\n * Converts an object of type 'KubeMutatingWebhookConfigurationListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeMutatingWebhookConfigurationListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeMutatingWebhookConfigurationProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeMutatingWebhookConfigurationListProps = toJson_KubeMutatingWebhookConfigurationListProps;\n/**\n * Converts an object of type 'KubeValidatingWebhookConfigurationProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeValidatingWebhookConfigurationProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'webhooks': (_a = obj.webhooks) === null || _a === void 0 ? void 0 : _a.map(y => toJson_ValidatingWebhook(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeValidatingWebhookConfigurationProps = toJson_KubeValidatingWebhookConfigurationProps;\n/**\n * Converts an object of type 'KubeValidatingWebhookConfigurationListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeValidatingWebhookConfigurationListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeValidatingWebhookConfigurationProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeValidatingWebhookConfigurationListProps = toJson_KubeValidatingWebhookConfigurationListProps;\n/**\n * Converts an object of type 'KubeStorageVersionV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeStorageVersionV1Alpha1Props(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': obj.spec,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeStorageVersionV1Alpha1Props = toJson_KubeStorageVersionV1Alpha1Props;\n/**\n * Converts an object of type 'KubeStorageVersionListV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeStorageVersionListV1Alpha1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeStorageVersionV1Alpha1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeStorageVersionListV1Alpha1Props = toJson_KubeStorageVersionListV1Alpha1Props;\n/**\n * Converts an object of type 'KubeControllerRevisionProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeControllerRevisionProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'data': obj.data,\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'revision': obj.revision,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeControllerRevisionProps = toJson_KubeControllerRevisionProps;\n/**\n * Converts an object of type 'KubeControllerRevisionListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeControllerRevisionListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeControllerRevisionProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeControllerRevisionListProps = toJson_KubeControllerRevisionListProps;\n/**\n * Converts an object of type 'KubeDaemonSetProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeDaemonSetProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_DaemonSetSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeDaemonSetProps = toJson_KubeDaemonSetProps;\n/**\n * Converts an object of type 'KubeDaemonSetListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeDaemonSetListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeDaemonSetProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeDaemonSetListProps = toJson_KubeDaemonSetListProps;\n/**\n * Converts an object of type 'KubeDeploymentProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeDeploymentProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_DeploymentSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeDeploymentProps = toJson_KubeDeploymentProps;\n/**\n * Converts an object of type 'KubeDeploymentListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeDeploymentListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeDeploymentProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeDeploymentListProps = toJson_KubeDeploymentListProps;\n/**\n * Converts an object of type 'KubeReplicaSetProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeReplicaSetProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_ReplicaSetSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeReplicaSetProps = toJson_KubeReplicaSetProps;\n/**\n * Converts an object of type 'KubeReplicaSetListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeReplicaSetListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeReplicaSetProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeReplicaSetListProps = toJson_KubeReplicaSetListProps;\n/**\n * Converts an object of type 'KubeStatefulSetProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeStatefulSetProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_StatefulSetSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeStatefulSetProps = toJson_KubeStatefulSetProps;\n/**\n * Converts an object of type 'KubeStatefulSetListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeStatefulSetListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeStatefulSetProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeStatefulSetListProps = toJson_KubeStatefulSetListProps;\n/**\n * Converts an object of type 'KubeTokenRequestProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeTokenRequestProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_TokenRequestSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeTokenRequestProps = toJson_KubeTokenRequestProps;\n/**\n * Converts an object of type 'KubeTokenReviewProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeTokenReviewProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_TokenReviewSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeTokenReviewProps = toJson_KubeTokenReviewProps;\n/**\n * Converts an object of type 'KubeLocalSubjectAccessReviewProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeLocalSubjectAccessReviewProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_SubjectAccessReviewSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeLocalSubjectAccessReviewProps = toJson_KubeLocalSubjectAccessReviewProps;\n/**\n * Converts an object of type 'KubeSelfSubjectAccessReviewProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeSelfSubjectAccessReviewProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_SelfSubjectAccessReviewSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeSelfSubjectAccessReviewProps = toJson_KubeSelfSubjectAccessReviewProps;\n/**\n * Converts an object of type 'KubeSelfSubjectRulesReviewProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeSelfSubjectRulesReviewProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_SelfSubjectRulesReviewSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeSelfSubjectRulesReviewProps = toJson_KubeSelfSubjectRulesReviewProps;\n/**\n * Converts an object of type 'KubeSubjectAccessReviewProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeSubjectAccessReviewProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_SubjectAccessReviewSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeSubjectAccessReviewProps = toJson_KubeSubjectAccessReviewProps;\n/**\n * Converts an object of type 'KubeHorizontalPodAutoscalerProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeHorizontalPodAutoscalerProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_HorizontalPodAutoscalerSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeHorizontalPodAutoscalerProps = toJson_KubeHorizontalPodAutoscalerProps;\n/**\n * Converts an object of type 'KubeHorizontalPodAutoscalerListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeHorizontalPodAutoscalerListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeHorizontalPodAutoscalerProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeHorizontalPodAutoscalerListProps = toJson_KubeHorizontalPodAutoscalerListProps;\n/**\n * Converts an object of type 'KubeScaleProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeScaleProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_ScaleSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeScaleProps = toJson_KubeScaleProps;\n/**\n * Converts an object of type 'KubeHorizontalPodAutoscalerV2Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeHorizontalPodAutoscalerV2Beta1Props(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_HorizontalPodAutoscalerSpecV2Beta1(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeHorizontalPodAutoscalerV2Beta1Props = toJson_KubeHorizontalPodAutoscalerV2Beta1Props;\n/**\n * Converts an object of type 'KubeHorizontalPodAutoscalerListV2Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeHorizontalPodAutoscalerListV2Beta1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeHorizontalPodAutoscalerV2Beta1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeHorizontalPodAutoscalerListV2Beta1Props = toJson_KubeHorizontalPodAutoscalerListV2Beta1Props;\n/**\n * Converts an object of type 'KubeHorizontalPodAutoscalerV2Beta2Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeHorizontalPodAutoscalerV2Beta2Props(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_HorizontalPodAutoscalerSpecV2Beta2(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeHorizontalPodAutoscalerV2Beta2Props = toJson_KubeHorizontalPodAutoscalerV2Beta2Props;\n/**\n * Converts an object of type 'KubeHorizontalPodAutoscalerListV2Beta2Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeHorizontalPodAutoscalerListV2Beta2Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeHorizontalPodAutoscalerV2Beta2Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeHorizontalPodAutoscalerListV2Beta2Props = toJson_KubeHorizontalPodAutoscalerListV2Beta2Props;\n/**\n * Converts an object of type 'KubeCronJobProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCronJobProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_CronJobSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCronJobProps = toJson_KubeCronJobProps;\n/**\n * Converts an object of type 'KubeCronJobListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCronJobListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeCronJobProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCronJobListProps = toJson_KubeCronJobListProps;\n/**\n * Converts an object of type 'KubeJobProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeJobProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_JobSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeJobProps = toJson_KubeJobProps;\n/**\n * Converts an object of type 'KubeJobListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeJobListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeJobProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeJobListProps = toJson_KubeJobListProps;\n/**\n * Converts an object of type 'KubeCronJobV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCronJobV1Beta1Props(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_CronJobSpecV1Beta1(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCronJobV1Beta1Props = toJson_KubeCronJobV1Beta1Props;\n/**\n * Converts an object of type 'KubeCronJobListV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCronJobListV1Beta1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeCronJobV1Beta1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCronJobListV1Beta1Props = toJson_KubeCronJobListV1Beta1Props;\n/**\n * Converts an object of type 'KubeCertificateSigningRequestProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCertificateSigningRequestProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_CertificateSigningRequestSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCertificateSigningRequestProps = toJson_KubeCertificateSigningRequestProps;\n/**\n * Converts an object of type 'KubeCertificateSigningRequestListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCertificateSigningRequestListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeCertificateSigningRequestProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCertificateSigningRequestListProps = toJson_KubeCertificateSigningRequestListProps;\n/**\n * Converts an object of type 'KubeLeaseProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeLeaseProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_LeaseSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeLeaseProps = toJson_KubeLeaseProps;\n/**\n * Converts an object of type 'KubeLeaseListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeLeaseListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeLeaseProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeLeaseListProps = toJson_KubeLeaseListProps;\n/**\n * Converts an object of type 'KubeBindingProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeBindingProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'target': toJson_ObjectReference(obj.target),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeBindingProps = toJson_KubeBindingProps;\n/**\n * Converts an object of type 'KubeComponentStatusProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeComponentStatusProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'conditions': (_a = obj.conditions) === null || _a === void 0 ? void 0 : _a.map(y => toJson_ComponentCondition(y)),\n        'metadata': toJson_ObjectMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeComponentStatusProps = toJson_KubeComponentStatusProps;\n/**\n * Converts an object of type 'KubeComponentStatusListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeComponentStatusListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeComponentStatusProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeComponentStatusListProps = toJson_KubeComponentStatusListProps;\n/**\n * Converts an object of type 'KubeConfigMapProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeConfigMapProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'binaryData': ((obj.binaryData) === undefined) ? undefined : (Object.entries(obj.binaryData).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'data': ((obj.data) === undefined) ? undefined : (Object.entries(obj.data).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'immutable': obj.immutable,\n        'metadata': toJson_ObjectMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeConfigMapProps = toJson_KubeConfigMapProps;\n/**\n * Converts an object of type 'KubeConfigMapListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeConfigMapListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeConfigMapProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeConfigMapListProps = toJson_KubeConfigMapListProps;\n/**\n * Converts an object of type 'KubeEndpointsProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeEndpointsProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'subsets': (_a = obj.subsets) === null || _a === void 0 ? void 0 : _a.map(y => toJson_EndpointSubset(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeEndpointsProps = toJson_KubeEndpointsProps;\n/**\n * Converts an object of type 'KubeEndpointsListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeEndpointsListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeEndpointsProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeEndpointsListProps = toJson_KubeEndpointsListProps;\n/**\n * Converts an object of type 'KubeEventProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeEventProps(obj) {\n    var _a, _b, _c;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'action': obj.action,\n        'deprecatedCount': obj.deprecatedCount,\n        'deprecatedFirstTimestamp': (_a = obj.deprecatedFirstTimestamp) === null || _a === void 0 ? void 0 : _a.toISOString(),\n        'deprecatedLastTimestamp': (_b = obj.deprecatedLastTimestamp) === null || _b === void 0 ? void 0 : _b.toISOString(),\n        'deprecatedSource': toJson_EventSource(obj.deprecatedSource),\n        'eventTime': (_c = obj.eventTime) === null || _c === void 0 ? void 0 : _c.toISOString(),\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'note': obj.note,\n        'reason': obj.reason,\n        'regarding': toJson_ObjectReference(obj.regarding),\n        'related': toJson_ObjectReference(obj.related),\n        'reportingController': obj.reportingController,\n        'reportingInstance': obj.reportingInstance,\n        'series': toJson_EventSeries(obj.series),\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeEventProps = toJson_KubeEventProps;\n/**\n * Converts an object of type 'KubeEventListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeEventListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeEventProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeEventListProps = toJson_KubeEventListProps;\n/**\n * Converts an object of type 'KubeLimitRangeProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeLimitRangeProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_LimitRangeSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeLimitRangeProps = toJson_KubeLimitRangeProps;\n/**\n * Converts an object of type 'KubeLimitRangeListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeLimitRangeListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeLimitRangeProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeLimitRangeListProps = toJson_KubeLimitRangeListProps;\n/**\n * Converts an object of type 'KubeNamespaceProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeNamespaceProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_NamespaceSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeNamespaceProps = toJson_KubeNamespaceProps;\n/**\n * Converts an object of type 'KubeNamespaceListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeNamespaceListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeNamespaceProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeNamespaceListProps = toJson_KubeNamespaceListProps;\n/**\n * Converts an object of type 'KubeNodeProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeNodeProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_NodeSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeNodeProps = toJson_KubeNodeProps;\n/**\n * Converts an object of type 'KubeNodeListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeNodeListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeNodeProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeNodeListProps = toJson_KubeNodeListProps;\n/**\n * Converts an object of type 'KubePersistentVolumeProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePersistentVolumeProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_PersistentVolumeSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePersistentVolumeProps = toJson_KubePersistentVolumeProps;\n/**\n * Converts an object of type 'KubePersistentVolumeClaimProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePersistentVolumeClaimProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_PersistentVolumeClaimSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePersistentVolumeClaimProps = toJson_KubePersistentVolumeClaimProps;\n/**\n * Converts an object of type 'KubePersistentVolumeClaimListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePersistentVolumeClaimListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubePersistentVolumeClaimProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePersistentVolumeClaimListProps = toJson_KubePersistentVolumeClaimListProps;\n/**\n * Converts an object of type 'KubePersistentVolumeListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePersistentVolumeListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubePersistentVolumeProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePersistentVolumeListProps = toJson_KubePersistentVolumeListProps;\n/**\n * Converts an object of type 'KubePodProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePodProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_PodSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePodProps = toJson_KubePodProps;\n/**\n * Converts an object of type 'KubePodListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePodListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubePodProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePodListProps = toJson_KubePodListProps;\n/**\n * Converts an object of type 'KubePodTemplateProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePodTemplateProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'template': toJson_PodTemplateSpec(obj.template),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePodTemplateProps = toJson_KubePodTemplateProps;\n/**\n * Converts an object of type 'KubePodTemplateListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePodTemplateListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubePodTemplateProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePodTemplateListProps = toJson_KubePodTemplateListProps;\n/**\n * Converts an object of type 'KubeReplicationControllerProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeReplicationControllerProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_ReplicationControllerSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeReplicationControllerProps = toJson_KubeReplicationControllerProps;\n/**\n * Converts an object of type 'KubeReplicationControllerListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeReplicationControllerListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeReplicationControllerProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeReplicationControllerListProps = toJson_KubeReplicationControllerListProps;\n/**\n * Converts an object of type 'KubeResourceQuotaProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeResourceQuotaProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_ResourceQuotaSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeResourceQuotaProps = toJson_KubeResourceQuotaProps;\n/**\n * Converts an object of type 'KubeResourceQuotaListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeResourceQuotaListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeResourceQuotaProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeResourceQuotaListProps = toJson_KubeResourceQuotaListProps;\n/**\n * Converts an object of type 'KubeSecretProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeSecretProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'data': ((obj.data) === undefined) ? undefined : (Object.entries(obj.data).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'immutable': obj.immutable,\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'stringData': ((obj.stringData) === undefined) ? undefined : (Object.entries(obj.stringData).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeSecretProps = toJson_KubeSecretProps;\n/**\n * Converts an object of type 'KubeSecretListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeSecretListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeSecretProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeSecretListProps = toJson_KubeSecretListProps;\n/**\n * Converts an object of type 'KubeServiceProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeServiceProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_ServiceSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeServiceProps = toJson_KubeServiceProps;\n/**\n * Converts an object of type 'KubeServiceAccountProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeServiceAccountProps(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'automountServiceAccountToken': obj.automountServiceAccountToken,\n        'imagePullSecrets': (_a = obj.imagePullSecrets) === null || _a === void 0 ? void 0 : _a.map(y => toJson_LocalObjectReference(y)),\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'secrets': (_b = obj.secrets) === null || _b === void 0 ? void 0 : _b.map(y => toJson_ObjectReference(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeServiceAccountProps = toJson_KubeServiceAccountProps;\n/**\n * Converts an object of type 'KubeServiceAccountListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeServiceAccountListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeServiceAccountProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeServiceAccountListProps = toJson_KubeServiceAccountListProps;\n/**\n * Converts an object of type 'KubeServiceListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeServiceListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeServiceProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeServiceListProps = toJson_KubeServiceListProps;\n/**\n * Converts an object of type 'KubeEndpointSliceProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeEndpointSliceProps(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'addressType': obj.addressType,\n        'endpoints': (_a = obj.endpoints) === null || _a === void 0 ? void 0 : _a.map(y => toJson_Endpoint(y)),\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'ports': (_b = obj.ports) === null || _b === void 0 ? void 0 : _b.map(y => toJson_EndpointPort(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeEndpointSliceProps = toJson_KubeEndpointSliceProps;\n/**\n * Converts an object of type 'KubeEndpointSliceListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeEndpointSliceListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeEndpointSliceProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeEndpointSliceListProps = toJson_KubeEndpointSliceListProps;\n/**\n * Converts an object of type 'KubeEndpointSliceV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeEndpointSliceV1Beta1Props(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'addressType': obj.addressType,\n        'endpoints': (_a = obj.endpoints) === null || _a === void 0 ? void 0 : _a.map(y => toJson_EndpointV1Beta1(y)),\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'ports': (_b = obj.ports) === null || _b === void 0 ? void 0 : _b.map(y => toJson_EndpointPortV1Beta1(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeEndpointSliceV1Beta1Props = toJson_KubeEndpointSliceV1Beta1Props;\n/**\n * Converts an object of type 'KubeEndpointSliceListV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeEndpointSliceListV1Beta1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeEndpointSliceV1Beta1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeEndpointSliceListV1Beta1Props = toJson_KubeEndpointSliceListV1Beta1Props;\n/**\n * Converts an object of type 'KubeEventV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeEventV1Beta1Props(obj) {\n    var _a, _b, _c;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'action': obj.action,\n        'deprecatedCount': obj.deprecatedCount,\n        'deprecatedFirstTimestamp': (_a = obj.deprecatedFirstTimestamp) === null || _a === void 0 ? void 0 : _a.toISOString(),\n        'deprecatedLastTimestamp': (_b = obj.deprecatedLastTimestamp) === null || _b === void 0 ? void 0 : _b.toISOString(),\n        'deprecatedSource': toJson_EventSource(obj.deprecatedSource),\n        'eventTime': (_c = obj.eventTime) === null || _c === void 0 ? void 0 : _c.toISOString(),\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'note': obj.note,\n        'reason': obj.reason,\n        'regarding': toJson_ObjectReference(obj.regarding),\n        'related': toJson_ObjectReference(obj.related),\n        'reportingController': obj.reportingController,\n        'reportingInstance': obj.reportingInstance,\n        'series': toJson_EventSeriesV1Beta1(obj.series),\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeEventV1Beta1Props = toJson_KubeEventV1Beta1Props;\n/**\n * Converts an object of type 'KubeEventListV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeEventListV1Beta1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeEventV1Beta1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeEventListV1Beta1Props = toJson_KubeEventListV1Beta1Props;\n/**\n * Converts an object of type 'KubeFlowSchemaV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeFlowSchemaV1Beta1Props(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_FlowSchemaSpecV1Beta1(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeFlowSchemaV1Beta1Props = toJson_KubeFlowSchemaV1Beta1Props;\n/**\n * Converts an object of type 'KubeFlowSchemaListV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeFlowSchemaListV1Beta1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeFlowSchemaV1Beta1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeFlowSchemaListV1Beta1Props = toJson_KubeFlowSchemaListV1Beta1Props;\n/**\n * Converts an object of type 'KubePriorityLevelConfigurationV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePriorityLevelConfigurationV1Beta1Props(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_PriorityLevelConfigurationSpecV1Beta1(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePriorityLevelConfigurationV1Beta1Props = toJson_KubePriorityLevelConfigurationV1Beta1Props;\n/**\n * Converts an object of type 'KubePriorityLevelConfigurationListV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePriorityLevelConfigurationListV1Beta1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubePriorityLevelConfigurationV1Beta1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePriorityLevelConfigurationListV1Beta1Props = toJson_KubePriorityLevelConfigurationListV1Beta1Props;\n/**\n * Converts an object of type 'KubeIngressProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeIngressProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_IngressSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeIngressProps = toJson_KubeIngressProps;\n/**\n * Converts an object of type 'KubeIngressClassProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeIngressClassProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_IngressClassSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeIngressClassProps = toJson_KubeIngressClassProps;\n/**\n * Converts an object of type 'KubeIngressClassListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeIngressClassListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeIngressClassProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeIngressClassListProps = toJson_KubeIngressClassListProps;\n/**\n * Converts an object of type 'KubeIngressListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeIngressListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeIngressProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeIngressListProps = toJson_KubeIngressListProps;\n/**\n * Converts an object of type 'KubeNetworkPolicyProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeNetworkPolicyProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_NetworkPolicySpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeNetworkPolicyProps = toJson_KubeNetworkPolicyProps;\n/**\n * Converts an object of type 'KubeNetworkPolicyListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeNetworkPolicyListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeNetworkPolicyProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeNetworkPolicyListProps = toJson_KubeNetworkPolicyListProps;\n/**\n * Converts an object of type 'KubeRuntimeClassProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRuntimeClassProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'handler': obj.handler,\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'overhead': toJson_Overhead(obj.overhead),\n        'scheduling': toJson_Scheduling(obj.scheduling),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRuntimeClassProps = toJson_KubeRuntimeClassProps;\n/**\n * Converts an object of type 'KubeRuntimeClassListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRuntimeClassListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeRuntimeClassProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRuntimeClassListProps = toJson_KubeRuntimeClassListProps;\n/**\n * Converts an object of type 'KubeRuntimeClassV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRuntimeClassV1Alpha1Props(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_RuntimeClassSpecV1Alpha1(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRuntimeClassV1Alpha1Props = toJson_KubeRuntimeClassV1Alpha1Props;\n/**\n * Converts an object of type 'KubeRuntimeClassListV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRuntimeClassListV1Alpha1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeRuntimeClassV1Alpha1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRuntimeClassListV1Alpha1Props = toJson_KubeRuntimeClassListV1Alpha1Props;\n/**\n * Converts an object of type 'KubeRuntimeClassV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRuntimeClassV1Beta1Props(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'handler': obj.handler,\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'overhead': toJson_OverheadV1Beta1(obj.overhead),\n        'scheduling': toJson_SchedulingV1Beta1(obj.scheduling),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRuntimeClassV1Beta1Props = toJson_KubeRuntimeClassV1Beta1Props;\n/**\n * Converts an object of type 'KubeRuntimeClassListV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRuntimeClassListV1Beta1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeRuntimeClassV1Beta1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRuntimeClassListV1Beta1Props = toJson_KubeRuntimeClassListV1Beta1Props;\n/**\n * Converts an object of type 'KubeEvictionProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeEvictionProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'deleteOptions': toJson_DeleteOptions(obj.deleteOptions),\n        'metadata': toJson_ObjectMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeEvictionProps = toJson_KubeEvictionProps;\n/**\n * Converts an object of type 'KubePodDisruptionBudgetProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePodDisruptionBudgetProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_PodDisruptionBudgetSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePodDisruptionBudgetProps = toJson_KubePodDisruptionBudgetProps;\n/**\n * Converts an object of type 'KubePodDisruptionBudgetListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePodDisruptionBudgetListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubePodDisruptionBudgetProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePodDisruptionBudgetListProps = toJson_KubePodDisruptionBudgetListProps;\n/**\n * Converts an object of type 'KubePodDisruptionBudgetV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePodDisruptionBudgetV1Beta1Props(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_PodDisruptionBudgetSpecV1Beta1(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePodDisruptionBudgetV1Beta1Props = toJson_KubePodDisruptionBudgetV1Beta1Props;\n/**\n * Converts an object of type 'KubePodDisruptionBudgetListV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePodDisruptionBudgetListV1Beta1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubePodDisruptionBudgetV1Beta1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePodDisruptionBudgetListV1Beta1Props = toJson_KubePodDisruptionBudgetListV1Beta1Props;\n/**\n * Converts an object of type 'KubePodSecurityPolicyV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePodSecurityPolicyV1Beta1Props(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_PodSecurityPolicySpecV1Beta1(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePodSecurityPolicyV1Beta1Props = toJson_KubePodSecurityPolicyV1Beta1Props;\n/**\n * Converts an object of type 'KubePodSecurityPolicyListV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePodSecurityPolicyListV1Beta1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubePodSecurityPolicyV1Beta1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePodSecurityPolicyListV1Beta1Props = toJson_KubePodSecurityPolicyListV1Beta1Props;\n/**\n * Converts an object of type 'KubeClusterRoleProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeClusterRoleProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'aggregationRule': toJson_AggregationRule(obj.aggregationRule),\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'rules': (_a = obj.rules) === null || _a === void 0 ? void 0 : _a.map(y => toJson_PolicyRule(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeClusterRoleProps = toJson_KubeClusterRoleProps;\n/**\n * Converts an object of type 'KubeClusterRoleBindingProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeClusterRoleBindingProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'roleRef': toJson_RoleRef(obj.roleRef),\n        'subjects': (_a = obj.subjects) === null || _a === void 0 ? void 0 : _a.map(y => toJson_Subject(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeClusterRoleBindingProps = toJson_KubeClusterRoleBindingProps;\n/**\n * Converts an object of type 'KubeClusterRoleBindingListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeClusterRoleBindingListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeClusterRoleBindingProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeClusterRoleBindingListProps = toJson_KubeClusterRoleBindingListProps;\n/**\n * Converts an object of type 'KubeClusterRoleListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeClusterRoleListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeClusterRoleProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeClusterRoleListProps = toJson_KubeClusterRoleListProps;\n/**\n * Converts an object of type 'KubeRoleProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRoleProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'rules': (_a = obj.rules) === null || _a === void 0 ? void 0 : _a.map(y => toJson_PolicyRule(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRoleProps = toJson_KubeRoleProps;\n/**\n * Converts an object of type 'KubeRoleBindingProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRoleBindingProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'roleRef': toJson_RoleRef(obj.roleRef),\n        'subjects': (_a = obj.subjects) === null || _a === void 0 ? void 0 : _a.map(y => toJson_Subject(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRoleBindingProps = toJson_KubeRoleBindingProps;\n/**\n * Converts an object of type 'KubeRoleBindingListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRoleBindingListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeRoleBindingProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRoleBindingListProps = toJson_KubeRoleBindingListProps;\n/**\n * Converts an object of type 'KubeRoleListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRoleListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeRoleProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRoleListProps = toJson_KubeRoleListProps;\n/**\n * Converts an object of type 'KubeClusterRoleV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeClusterRoleV1Alpha1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'aggregationRule': toJson_AggregationRuleV1Alpha1(obj.aggregationRule),\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'rules': (_a = obj.rules) === null || _a === void 0 ? void 0 : _a.map(y => toJson_PolicyRuleV1Alpha1(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeClusterRoleV1Alpha1Props = toJson_KubeClusterRoleV1Alpha1Props;\n/**\n * Converts an object of type 'KubeClusterRoleBindingV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeClusterRoleBindingV1Alpha1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'roleRef': toJson_RoleRefV1Alpha1(obj.roleRef),\n        'subjects': (_a = obj.subjects) === null || _a === void 0 ? void 0 : _a.map(y => toJson_SubjectV1Alpha1(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeClusterRoleBindingV1Alpha1Props = toJson_KubeClusterRoleBindingV1Alpha1Props;\n/**\n * Converts an object of type 'KubeClusterRoleBindingListV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeClusterRoleBindingListV1Alpha1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeClusterRoleBindingV1Alpha1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeClusterRoleBindingListV1Alpha1Props = toJson_KubeClusterRoleBindingListV1Alpha1Props;\n/**\n * Converts an object of type 'KubeClusterRoleListV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeClusterRoleListV1Alpha1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeClusterRoleV1Alpha1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeClusterRoleListV1Alpha1Props = toJson_KubeClusterRoleListV1Alpha1Props;\n/**\n * Converts an object of type 'KubeRoleV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRoleV1Alpha1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'rules': (_a = obj.rules) === null || _a === void 0 ? void 0 : _a.map(y => toJson_PolicyRuleV1Alpha1(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRoleV1Alpha1Props = toJson_KubeRoleV1Alpha1Props;\n/**\n * Converts an object of type 'KubeRoleBindingV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRoleBindingV1Alpha1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'roleRef': toJson_RoleRefV1Alpha1(obj.roleRef),\n        'subjects': (_a = obj.subjects) === null || _a === void 0 ? void 0 : _a.map(y => toJson_SubjectV1Alpha1(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRoleBindingV1Alpha1Props = toJson_KubeRoleBindingV1Alpha1Props;\n/**\n * Converts an object of type 'KubeRoleBindingListV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRoleBindingListV1Alpha1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeRoleBindingV1Alpha1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRoleBindingListV1Alpha1Props = toJson_KubeRoleBindingListV1Alpha1Props;\n/**\n * Converts an object of type 'KubeRoleListV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeRoleListV1Alpha1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeRoleV1Alpha1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeRoleListV1Alpha1Props = toJson_KubeRoleListV1Alpha1Props;\n/**\n * Converts an object of type 'KubePriorityClassProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePriorityClassProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'description': obj.description,\n        'globalDefault': obj.globalDefault,\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'preemptionPolicy': obj.preemptionPolicy,\n        'value': obj.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePriorityClassProps = toJson_KubePriorityClassProps;\n/**\n * Converts an object of type 'KubePriorityClassListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePriorityClassListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubePriorityClassProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePriorityClassListProps = toJson_KubePriorityClassListProps;\n/**\n * Converts an object of type 'KubePriorityClassV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePriorityClassV1Alpha1Props(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'description': obj.description,\n        'globalDefault': obj.globalDefault,\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'preemptionPolicy': obj.preemptionPolicy,\n        'value': obj.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePriorityClassV1Alpha1Props = toJson_KubePriorityClassV1Alpha1Props;\n/**\n * Converts an object of type 'KubePriorityClassListV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubePriorityClassListV1Alpha1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubePriorityClassV1Alpha1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubePriorityClassListV1Alpha1Props = toJson_KubePriorityClassListV1Alpha1Props;\n/**\n * Converts an object of type 'KubeCsiDriverProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCsiDriverProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_CsiDriverSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCsiDriverProps = toJson_KubeCsiDriverProps;\n/**\n * Converts an object of type 'KubeCsiDriverListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCsiDriverListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeCsiDriverProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCsiDriverListProps = toJson_KubeCsiDriverListProps;\n/**\n * Converts an object of type 'KubeCsiNodeProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCsiNodeProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_CsiNodeSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCsiNodeProps = toJson_KubeCsiNodeProps;\n/**\n * Converts an object of type 'KubeCsiNodeListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCsiNodeListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeCsiNodeProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCsiNodeListProps = toJson_KubeCsiNodeListProps;\n/**\n * Converts an object of type 'KubeStorageClassProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeStorageClassProps(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'allowVolumeExpansion': obj.allowVolumeExpansion,\n        'allowedTopologies': (_a = obj.allowedTopologies) === null || _a === void 0 ? void 0 : _a.map(y => toJson_TopologySelectorTerm(y)),\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'mountOptions': (_b = obj.mountOptions) === null || _b === void 0 ? void 0 : _b.map(y => y),\n        'parameters': ((obj.parameters) === undefined) ? undefined : (Object.entries(obj.parameters).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'provisioner': obj.provisioner,\n        'reclaimPolicy': obj.reclaimPolicy,\n        'volumeBindingMode': obj.volumeBindingMode,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeStorageClassProps = toJson_KubeStorageClassProps;\n/**\n * Converts an object of type 'KubeStorageClassListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeStorageClassListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeStorageClassProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeStorageClassListProps = toJson_KubeStorageClassListProps;\n/**\n * Converts an object of type 'KubeVolumeAttachmentProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeVolumeAttachmentProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_VolumeAttachmentSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeVolumeAttachmentProps = toJson_KubeVolumeAttachmentProps;\n/**\n * Converts an object of type 'KubeVolumeAttachmentListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeVolumeAttachmentListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeVolumeAttachmentProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeVolumeAttachmentListProps = toJson_KubeVolumeAttachmentListProps;\n/**\n * Converts an object of type 'KubeCsiStorageCapacityV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCsiStorageCapacityV1Alpha1Props(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'capacity': (_a = obj.capacity) === null || _a === void 0 ? void 0 : _a.value,\n        'maximumVolumeSize': (_b = obj.maximumVolumeSize) === null || _b === void 0 ? void 0 : _b.value,\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'nodeTopology': toJson_LabelSelector(obj.nodeTopology),\n        'storageClassName': obj.storageClassName,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCsiStorageCapacityV1Alpha1Props = toJson_KubeCsiStorageCapacityV1Alpha1Props;\n/**\n * Converts an object of type 'KubeCsiStorageCapacityListV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCsiStorageCapacityListV1Alpha1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeCsiStorageCapacityV1Alpha1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCsiStorageCapacityListV1Alpha1Props = toJson_KubeCsiStorageCapacityListV1Alpha1Props;\n/**\n * Converts an object of type 'KubeVolumeAttachmentV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeVolumeAttachmentV1Alpha1Props(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_VolumeAttachmentSpecV1Alpha1(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeVolumeAttachmentV1Alpha1Props = toJson_KubeVolumeAttachmentV1Alpha1Props;\n/**\n * Converts an object of type 'KubeVolumeAttachmentListV1Alpha1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeVolumeAttachmentListV1Alpha1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeVolumeAttachmentV1Alpha1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeVolumeAttachmentListV1Alpha1Props = toJson_KubeVolumeAttachmentListV1Alpha1Props;\n/**\n * Converts an object of type 'KubeCsiStorageCapacityV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCsiStorageCapacityV1Beta1Props(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'capacity': (_a = obj.capacity) === null || _a === void 0 ? void 0 : _a.value,\n        'maximumVolumeSize': (_b = obj.maximumVolumeSize) === null || _b === void 0 ? void 0 : _b.value,\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'nodeTopology': toJson_LabelSelector(obj.nodeTopology),\n        'storageClassName': obj.storageClassName,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCsiStorageCapacityV1Beta1Props = toJson_KubeCsiStorageCapacityV1Beta1Props;\n/**\n * Converts an object of type 'KubeCsiStorageCapacityListV1Beta1Props' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCsiStorageCapacityListV1Beta1Props(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeCsiStorageCapacityV1Beta1Props(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCsiStorageCapacityListV1Beta1Props = toJson_KubeCsiStorageCapacityListV1Beta1Props;\n/**\n * Converts an object of type 'KubeCustomResourceDefinitionProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCustomResourceDefinitionProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_CustomResourceDefinitionSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCustomResourceDefinitionProps = toJson_KubeCustomResourceDefinitionProps;\n/**\n * Converts an object of type 'KubeCustomResourceDefinitionListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeCustomResourceDefinitionListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeCustomResourceDefinitionProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeCustomResourceDefinitionListProps = toJson_KubeCustomResourceDefinitionListProps;\n/**\n * Converts an object of type 'KubeStatusProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeStatusProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'code': obj.code,\n        'details': toJson_StatusDetails(obj.details),\n        'message': obj.message,\n        'metadata': toJson_ListMeta(obj.metadata),\n        'reason': obj.reason,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeStatusProps = toJson_KubeStatusProps;\n/**\n * Converts an object of type 'KubeApiServiceProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeApiServiceProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_ApiServiceSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeApiServiceProps = toJson_KubeApiServiceProps;\n/**\n * Converts an object of type 'KubeApiServiceListProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KubeApiServiceListProps(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubeApiServiceProps(y)),\n        'metadata': toJson_ListMeta(obj.metadata),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KubeApiServiceListProps = toJson_KubeApiServiceListProps;\n/**\n * Converts an object of type 'ObjectMeta' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ObjectMeta(obj) {\n    var _a, _b, _c, _d, _e;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'clusterName': obj.clusterName,\n        'creationTimestamp': (_a = obj.creationTimestamp) === null || _a === void 0 ? void 0 : _a.toISOString(),\n        'deletionGracePeriodSeconds': obj.deletionGracePeriodSeconds,\n        'deletionTimestamp': (_b = obj.deletionTimestamp) === null || _b === void 0 ? void 0 : _b.toISOString(),\n        'finalizers': (_c = obj.finalizers) === null || _c === void 0 ? void 0 : _c.map(y => y),\n        'generateName': obj.generateName,\n        'generation': obj.generation,\n        'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'managedFields': (_d = obj.managedFields) === null || _d === void 0 ? void 0 : _d.map(y => toJson_ManagedFieldsEntry(y)),\n        'name': obj.name,\n        'namespace': obj.namespace,\n        'ownerReferences': (_e = obj.ownerReferences) === null || _e === void 0 ? void 0 : _e.map(y => toJson_OwnerReference(y)),\n        'resourceVersion': obj.resourceVersion,\n        'selfLink': obj.selfLink,\n        'uid': obj.uid,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ObjectMeta = toJson_ObjectMeta;\n/**\n * Converts an object of type 'MutatingWebhook' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_MutatingWebhook(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'admissionReviewVersions': (_a = obj.admissionReviewVersions) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'clientConfig': toJson_WebhookClientConfig(obj.clientConfig),\n        'failurePolicy': obj.failurePolicy,\n        'matchPolicy': obj.matchPolicy,\n        'name': obj.name,\n        'namespaceSelector': toJson_LabelSelector(obj.namespaceSelector),\n        'objectSelector': toJson_LabelSelector(obj.objectSelector),\n        'reinvocationPolicy': obj.reinvocationPolicy,\n        'rules': (_b = obj.rules) === null || _b === void 0 ? void 0 : _b.map(y => toJson_RuleWithOperations(y)),\n        'sideEffects': obj.sideEffects,\n        'timeoutSeconds': obj.timeoutSeconds,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_MutatingWebhook = toJson_MutatingWebhook;\n/**\n * Converts an object of type 'ListMeta' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ListMeta(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'continue': obj.continue,\n        'remainingItemCount': obj.remainingItemCount,\n        'resourceVersion': obj.resourceVersion,\n        'selfLink': obj.selfLink,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ListMeta = toJson_ListMeta;\n/**\n * Converts an object of type 'ValidatingWebhook' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ValidatingWebhook(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'admissionReviewVersions': (_a = obj.admissionReviewVersions) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'clientConfig': toJson_WebhookClientConfig(obj.clientConfig),\n        'failurePolicy': obj.failurePolicy,\n        'matchPolicy': obj.matchPolicy,\n        'name': obj.name,\n        'namespaceSelector': toJson_LabelSelector(obj.namespaceSelector),\n        'objectSelector': toJson_LabelSelector(obj.objectSelector),\n        'rules': (_b = obj.rules) === null || _b === void 0 ? void 0 : _b.map(y => toJson_RuleWithOperations(y)),\n        'sideEffects': obj.sideEffects,\n        'timeoutSeconds': obj.timeoutSeconds,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ValidatingWebhook = toJson_ValidatingWebhook;\n/**\n * Converts an object of type 'DaemonSetSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_DaemonSetSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'minReadySeconds': obj.minReadySeconds,\n        'revisionHistoryLimit': obj.revisionHistoryLimit,\n        'selector': toJson_LabelSelector(obj.selector),\n        'template': toJson_PodTemplateSpec(obj.template),\n        'updateStrategy': toJson_DaemonSetUpdateStrategy(obj.updateStrategy),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_DaemonSetSpec = toJson_DaemonSetSpec;\n/**\n * Converts an object of type 'DeploymentSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_DeploymentSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'minReadySeconds': obj.minReadySeconds,\n        'paused': obj.paused,\n        'progressDeadlineSeconds': obj.progressDeadlineSeconds,\n        'replicas': obj.replicas,\n        'revisionHistoryLimit': obj.revisionHistoryLimit,\n        'selector': toJson_LabelSelector(obj.selector),\n        'strategy': toJson_DeploymentStrategy(obj.strategy),\n        'template': toJson_PodTemplateSpec(obj.template),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_DeploymentSpec = toJson_DeploymentSpec;\n/**\n * Converts an object of type 'ReplicaSetSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ReplicaSetSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'minReadySeconds': obj.minReadySeconds,\n        'replicas': obj.replicas,\n        'selector': toJson_LabelSelector(obj.selector),\n        'template': toJson_PodTemplateSpec(obj.template),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ReplicaSetSpec = toJson_ReplicaSetSpec;\n/**\n * Converts an object of type 'StatefulSetSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_StatefulSetSpec(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'minReadySeconds': obj.minReadySeconds,\n        'podManagementPolicy': obj.podManagementPolicy,\n        'replicas': obj.replicas,\n        'revisionHistoryLimit': obj.revisionHistoryLimit,\n        'selector': toJson_LabelSelector(obj.selector),\n        'serviceName': obj.serviceName,\n        'template': toJson_PodTemplateSpec(obj.template),\n        'updateStrategy': toJson_StatefulSetUpdateStrategy(obj.updateStrategy),\n        'volumeClaimTemplates': (_a = obj.volumeClaimTemplates) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KubePersistentVolumeClaimProps(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_StatefulSetSpec = toJson_StatefulSetSpec;\n/**\n * Converts an object of type 'TokenRequestSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_TokenRequestSpec(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'audiences': (_a = obj.audiences) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'boundObjectRef': toJson_BoundObjectReference(obj.boundObjectRef),\n        'expirationSeconds': obj.expirationSeconds,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_TokenRequestSpec = toJson_TokenRequestSpec;\n/**\n * Converts an object of type 'TokenReviewSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_TokenReviewSpec(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'audiences': (_a = obj.audiences) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'token': obj.token,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_TokenReviewSpec = toJson_TokenReviewSpec;\n/**\n * Converts an object of type 'SubjectAccessReviewSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SubjectAccessReviewSpec(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'extra': ((obj.extra) === undefined) ? undefined : (Object.entries(obj.extra).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.map(y => y) }); }, {})),\n        'groups': (_a = obj.groups) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'nonResourceAttributes': toJson_NonResourceAttributes(obj.nonResourceAttributes),\n        'resourceAttributes': toJson_ResourceAttributes(obj.resourceAttributes),\n        'uid': obj.uid,\n        'user': obj.user,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SubjectAccessReviewSpec = toJson_SubjectAccessReviewSpec;\n/**\n * Converts an object of type 'SelfSubjectAccessReviewSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SelfSubjectAccessReviewSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'nonResourceAttributes': toJson_NonResourceAttributes(obj.nonResourceAttributes),\n        'resourceAttributes': toJson_ResourceAttributes(obj.resourceAttributes),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SelfSubjectAccessReviewSpec = toJson_SelfSubjectAccessReviewSpec;\n/**\n * Converts an object of type 'SelfSubjectRulesReviewSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SelfSubjectRulesReviewSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'namespace': obj.namespace,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SelfSubjectRulesReviewSpec = toJson_SelfSubjectRulesReviewSpec;\n/**\n * Converts an object of type 'HorizontalPodAutoscalerSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_HorizontalPodAutoscalerSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'maxReplicas': obj.maxReplicas,\n        'minReplicas': obj.minReplicas,\n        'scaleTargetRef': toJson_CrossVersionObjectReference(obj.scaleTargetRef),\n        'targetCPUUtilizationPercentage': obj.targetCpuUtilizationPercentage,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_HorizontalPodAutoscalerSpec = toJson_HorizontalPodAutoscalerSpec;\n/**\n * Converts an object of type 'ScaleSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ScaleSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'replicas': obj.replicas,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ScaleSpec = toJson_ScaleSpec;\n/**\n * Converts an object of type 'HorizontalPodAutoscalerSpecV2Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_HorizontalPodAutoscalerSpecV2Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'maxReplicas': obj.maxReplicas,\n        'metrics': (_a = obj.metrics) === null || _a === void 0 ? void 0 : _a.map(y => toJson_MetricSpecV2Beta1(y)),\n        'minReplicas': obj.minReplicas,\n        'scaleTargetRef': toJson_CrossVersionObjectReferenceV2Beta1(obj.scaleTargetRef),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_HorizontalPodAutoscalerSpecV2Beta1 = toJson_HorizontalPodAutoscalerSpecV2Beta1;\n/**\n * Converts an object of type 'HorizontalPodAutoscalerSpecV2Beta2' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_HorizontalPodAutoscalerSpecV2Beta2(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'behavior': toJson_HorizontalPodAutoscalerBehaviorV2Beta2(obj.behavior),\n        'maxReplicas': obj.maxReplicas,\n        'metrics': (_a = obj.metrics) === null || _a === void 0 ? void 0 : _a.map(y => toJson_MetricSpecV2Beta2(y)),\n        'minReplicas': obj.minReplicas,\n        'scaleTargetRef': toJson_CrossVersionObjectReferenceV2Beta2(obj.scaleTargetRef),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_HorizontalPodAutoscalerSpecV2Beta2 = toJson_HorizontalPodAutoscalerSpecV2Beta2;\n/**\n * Converts an object of type 'CronJobSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CronJobSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'concurrencyPolicy': obj.concurrencyPolicy,\n        'failedJobsHistoryLimit': obj.failedJobsHistoryLimit,\n        'jobTemplate': toJson_JobTemplateSpec(obj.jobTemplate),\n        'schedule': obj.schedule,\n        'startingDeadlineSeconds': obj.startingDeadlineSeconds,\n        'successfulJobsHistoryLimit': obj.successfulJobsHistoryLimit,\n        'suspend': obj.suspend,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CronJobSpec = toJson_CronJobSpec;\n/**\n * Converts an object of type 'JobSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_JobSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'activeDeadlineSeconds': obj.activeDeadlineSeconds,\n        'backoffLimit': obj.backoffLimit,\n        'completionMode': obj.completionMode,\n        'completions': obj.completions,\n        'manualSelector': obj.manualSelector,\n        'parallelism': obj.parallelism,\n        'selector': toJson_LabelSelector(obj.selector),\n        'suspend': obj.suspend,\n        'template': toJson_PodTemplateSpec(obj.template),\n        'ttlSecondsAfterFinished': obj.ttlSecondsAfterFinished,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_JobSpec = toJson_JobSpec;\n/**\n * Converts an object of type 'CronJobSpecV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CronJobSpecV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'concurrencyPolicy': obj.concurrencyPolicy,\n        'failedJobsHistoryLimit': obj.failedJobsHistoryLimit,\n        'jobTemplate': toJson_JobTemplateSpecV1Beta1(obj.jobTemplate),\n        'schedule': obj.schedule,\n        'startingDeadlineSeconds': obj.startingDeadlineSeconds,\n        'successfulJobsHistoryLimit': obj.successfulJobsHistoryLimit,\n        'suspend': obj.suspend,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CronJobSpecV1Beta1 = toJson_CronJobSpecV1Beta1;\n/**\n * Converts an object of type 'CertificateSigningRequestSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CertificateSigningRequestSpec(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'expirationSeconds': obj.expirationSeconds,\n        'extra': ((obj.extra) === undefined) ? undefined : (Object.entries(obj.extra).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.map(y => y) }); }, {})),\n        'groups': (_a = obj.groups) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'request': obj.request,\n        'signerName': obj.signerName,\n        'uid': obj.uid,\n        'usages': (_b = obj.usages) === null || _b === void 0 ? void 0 : _b.map(y => y),\n        'username': obj.username,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CertificateSigningRequestSpec = toJson_CertificateSigningRequestSpec;\n/**\n * Converts an object of type 'LeaseSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_LeaseSpec(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'acquireTime': (_a = obj.acquireTime) === null || _a === void 0 ? void 0 : _a.toISOString(),\n        'holderIdentity': obj.holderIdentity,\n        'leaseDurationSeconds': obj.leaseDurationSeconds,\n        'leaseTransitions': obj.leaseTransitions,\n        'renewTime': (_b = obj.renewTime) === null || _b === void 0 ? void 0 : _b.toISOString(),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_LeaseSpec = toJson_LeaseSpec;\n/**\n * Converts an object of type 'ObjectReference' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ObjectReference(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiVersion': obj.apiVersion,\n        'fieldPath': obj.fieldPath,\n        'kind': obj.kind,\n        'name': obj.name,\n        'namespace': obj.namespace,\n        'resourceVersion': obj.resourceVersion,\n        'uid': obj.uid,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ObjectReference = toJson_ObjectReference;\n/**\n * Converts an object of type 'ComponentCondition' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ComponentCondition(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'error': obj.error,\n        'message': obj.message,\n        'status': obj.status,\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ComponentCondition = toJson_ComponentCondition;\n/**\n * Converts an object of type 'EndpointSubset' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EndpointSubset(obj) {\n    var _a, _b, _c;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'addresses': (_a = obj.addresses) === null || _a === void 0 ? void 0 : _a.map(y => toJson_EndpointAddress(y)),\n        'notReadyAddresses': (_b = obj.notReadyAddresses) === null || _b === void 0 ? void 0 : _b.map(y => toJson_EndpointAddress(y)),\n        'ports': (_c = obj.ports) === null || _c === void 0 ? void 0 : _c.map(y => toJson_EndpointPort(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EndpointSubset = toJson_EndpointSubset;\n/**\n * Converts an object of type 'EventSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EventSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'component': obj.component,\n        'host': obj.host,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EventSource = toJson_EventSource;\n/**\n * Converts an object of type 'EventSeries' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EventSeries(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'count': obj.count,\n        'lastObservedTime': (_a = obj.lastObservedTime) === null || _a === void 0 ? void 0 : _a.toISOString(),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EventSeries = toJson_EventSeries;\n/**\n * Converts an object of type 'LimitRangeSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_LimitRangeSpec(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'limits': (_a = obj.limits) === null || _a === void 0 ? void 0 : _a.map(y => toJson_LimitRangeItem(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_LimitRangeSpec = toJson_LimitRangeSpec;\n/**\n * Converts an object of type 'NamespaceSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NamespaceSpec(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'finalizers': (_a = obj.finalizers) === null || _a === void 0 ? void 0 : _a.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NamespaceSpec = toJson_NamespaceSpec;\n/**\n * Converts an object of type 'NodeSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NodeSpec(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'configSource': toJson_NodeConfigSource(obj.configSource),\n        'externalID': obj.externalId,\n        'podCIDR': obj.podCidr,\n        'podCIDRs': (_a = obj.podCidRs) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'providerID': obj.providerId,\n        'taints': (_b = obj.taints) === null || _b === void 0 ? void 0 : _b.map(y => toJson_Taint(y)),\n        'unschedulable': obj.unschedulable,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NodeSpec = toJson_NodeSpec;\n/**\n * Converts an object of type 'PersistentVolumeSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PersistentVolumeSpec(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'accessModes': (_a = obj.accessModes) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'awsElasticBlockStore': toJson_AwsElasticBlockStoreVolumeSource(obj.awsElasticBlockStore),\n        'azureDisk': toJson_AzureDiskVolumeSource(obj.azureDisk),\n        'azureFile': toJson_AzureFilePersistentVolumeSource(obj.azureFile),\n        'capacity': ((obj.capacity) === undefined) ? undefined : (Object.entries(obj.capacity).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.value }); }, {})),\n        'cephfs': toJson_CephFsPersistentVolumeSource(obj.cephfs),\n        'cinder': toJson_CinderPersistentVolumeSource(obj.cinder),\n        'claimRef': toJson_ObjectReference(obj.claimRef),\n        'csi': toJson_CsiPersistentVolumeSource(obj.csi),\n        'fc': toJson_FcVolumeSource(obj.fc),\n        'flexVolume': toJson_FlexPersistentVolumeSource(obj.flexVolume),\n        'flocker': toJson_FlockerVolumeSource(obj.flocker),\n        'gcePersistentDisk': toJson_GcePersistentDiskVolumeSource(obj.gcePersistentDisk),\n        'glusterfs': toJson_GlusterfsPersistentVolumeSource(obj.glusterfs),\n        'hostPath': toJson_HostPathVolumeSource(obj.hostPath),\n        'iscsi': toJson_IscsiPersistentVolumeSource(obj.iscsi),\n        'local': toJson_LocalVolumeSource(obj.local),\n        'mountOptions': (_b = obj.mountOptions) === null || _b === void 0 ? void 0 : _b.map(y => y),\n        'nfs': toJson_NfsVolumeSource(obj.nfs),\n        'nodeAffinity': toJson_VolumeNodeAffinity(obj.nodeAffinity),\n        'persistentVolumeReclaimPolicy': obj.persistentVolumeReclaimPolicy,\n        'photonPersistentDisk': toJson_PhotonPersistentDiskVolumeSource(obj.photonPersistentDisk),\n        'portworxVolume': toJson_PortworxVolumeSource(obj.portworxVolume),\n        'quobyte': toJson_QuobyteVolumeSource(obj.quobyte),\n        'rbd': toJson_RbdPersistentVolumeSource(obj.rbd),\n        'scaleIO': toJson_ScaleIoPersistentVolumeSource(obj.scaleIo),\n        'storageClassName': obj.storageClassName,\n        'storageos': toJson_StorageOsPersistentVolumeSource(obj.storageos),\n        'volumeMode': obj.volumeMode,\n        'vsphereVolume': toJson_VsphereVirtualDiskVolumeSource(obj.vsphereVolume),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PersistentVolumeSpec = toJson_PersistentVolumeSpec;\n/**\n * Converts an object of type 'PersistentVolumeClaimSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PersistentVolumeClaimSpec(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'accessModes': (_a = obj.accessModes) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'dataSource': toJson_TypedLocalObjectReference(obj.dataSource),\n        'dataSourceRef': toJson_TypedLocalObjectReference(obj.dataSourceRef),\n        'resources': toJson_ResourceRequirements(obj.resources),\n        'selector': toJson_LabelSelector(obj.selector),\n        'storageClassName': obj.storageClassName,\n        'volumeMode': obj.volumeMode,\n        'volumeName': obj.volumeName,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PersistentVolumeClaimSpec = toJson_PersistentVolumeClaimSpec;\n/**\n * Converts an object of type 'PodSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodSpec(obj) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'activeDeadlineSeconds': obj.activeDeadlineSeconds,\n        'affinity': toJson_Affinity(obj.affinity),\n        'automountServiceAccountToken': obj.automountServiceAccountToken,\n        'containers': (_a = obj.containers) === null || _a === void 0 ? void 0 : _a.map(y => toJson_Container(y)),\n        'dnsConfig': toJson_PodDnsConfig(obj.dnsConfig),\n        'dnsPolicy': obj.dnsPolicy,\n        'enableServiceLinks': obj.enableServiceLinks,\n        'ephemeralContainers': (_b = obj.ephemeralContainers) === null || _b === void 0 ? void 0 : _b.map(y => toJson_EphemeralContainer(y)),\n        'hostAliases': (_c = obj.hostAliases) === null || _c === void 0 ? void 0 : _c.map(y => toJson_HostAlias(y)),\n        'hostIPC': obj.hostIpc,\n        'hostNetwork': obj.hostNetwork,\n        'hostPID': obj.hostPid,\n        'hostname': obj.hostname,\n        'imagePullSecrets': (_d = obj.imagePullSecrets) === null || _d === void 0 ? void 0 : _d.map(y => toJson_LocalObjectReference(y)),\n        'initContainers': (_e = obj.initContainers) === null || _e === void 0 ? void 0 : _e.map(y => toJson_Container(y)),\n        'nodeName': obj.nodeName,\n        'nodeSelector': ((obj.nodeSelector) === undefined) ? undefined : (Object.entries(obj.nodeSelector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'overhead': ((obj.overhead) === undefined) ? undefined : (Object.entries(obj.overhead).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.value }); }, {})),\n        'preemptionPolicy': obj.preemptionPolicy,\n        'priority': obj.priority,\n        'priorityClassName': obj.priorityClassName,\n        'readinessGates': (_f = obj.readinessGates) === null || _f === void 0 ? void 0 : _f.map(y => toJson_PodReadinessGate(y)),\n        'restartPolicy': obj.restartPolicy,\n        'runtimeClassName': obj.runtimeClassName,\n        'schedulerName': obj.schedulerName,\n        'securityContext': toJson_PodSecurityContext(obj.securityContext),\n        'serviceAccount': obj.serviceAccount,\n        'serviceAccountName': obj.serviceAccountName,\n        'setHostnameAsFQDN': obj.setHostnameAsFqdn,\n        'shareProcessNamespace': obj.shareProcessNamespace,\n        'subdomain': obj.subdomain,\n        'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,\n        'tolerations': (_g = obj.tolerations) === null || _g === void 0 ? void 0 : _g.map(y => toJson_Toleration(y)),\n        'topologySpreadConstraints': (_h = obj.topologySpreadConstraints) === null || _h === void 0 ? void 0 : _h.map(y => toJson_TopologySpreadConstraint(y)),\n        'volumes': (_j = obj.volumes) === null || _j === void 0 ? void 0 : _j.map(y => toJson_Volume(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodSpec = toJson_PodSpec;\n/**\n * Converts an object of type 'PodTemplateSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodTemplateSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_PodSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodTemplateSpec = toJson_PodTemplateSpec;\n/**\n * Converts an object of type 'ReplicationControllerSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ReplicationControllerSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'minReadySeconds': obj.minReadySeconds,\n        'replicas': obj.replicas,\n        'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'template': toJson_PodTemplateSpec(obj.template),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ReplicationControllerSpec = toJson_ReplicationControllerSpec;\n/**\n * Converts an object of type 'ResourceQuotaSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ResourceQuotaSpec(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'hard': ((obj.hard) === undefined) ? undefined : (Object.entries(obj.hard).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.value }); }, {})),\n        'scopeSelector': toJson_ScopeSelector(obj.scopeSelector),\n        'scopes': (_a = obj.scopes) === null || _a === void 0 ? void 0 : _a.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ResourceQuotaSpec = toJson_ResourceQuotaSpec;\n/**\n * Converts an object of type 'ServiceSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ServiceSpec(obj) {\n    var _a, _b, _c, _d, _e;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'allocateLoadBalancerNodePorts': obj.allocateLoadBalancerNodePorts,\n        'clusterIP': obj.clusterIp,\n        'clusterIPs': (_a = obj.clusterIPs) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'externalIPs': (_b = obj.externalIPs) === null || _b === void 0 ? void 0 : _b.map(y => y),\n        'externalName': obj.externalName,\n        'externalTrafficPolicy': obj.externalTrafficPolicy,\n        'healthCheckNodePort': obj.healthCheckNodePort,\n        'internalTrafficPolicy': obj.internalTrafficPolicy,\n        'ipFamilies': (_c = obj.ipFamilies) === null || _c === void 0 ? void 0 : _c.map(y => y),\n        'ipFamilyPolicy': obj.ipFamilyPolicy,\n        'loadBalancerClass': obj.loadBalancerClass,\n        'loadBalancerIP': obj.loadBalancerIp,\n        'loadBalancerSourceRanges': (_d = obj.loadBalancerSourceRanges) === null || _d === void 0 ? void 0 : _d.map(y => y),\n        'ports': (_e = obj.ports) === null || _e === void 0 ? void 0 : _e.map(y => toJson_ServicePort(y)),\n        'publishNotReadyAddresses': obj.publishNotReadyAddresses,\n        'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'sessionAffinity': obj.sessionAffinity,\n        'sessionAffinityConfig': toJson_SessionAffinityConfig(obj.sessionAffinityConfig),\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ServiceSpec = toJson_ServiceSpec;\n/**\n * Converts an object of type 'LocalObjectReference' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_LocalObjectReference(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_LocalObjectReference = toJson_LocalObjectReference;\n/**\n * Converts an object of type 'Endpoint' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Endpoint(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'addresses': (_a = obj.addresses) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'conditions': toJson_EndpointConditions(obj.conditions),\n        'deprecatedTopology': ((obj.deprecatedTopology) === undefined) ? undefined : (Object.entries(obj.deprecatedTopology).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'hints': toJson_EndpointHints(obj.hints),\n        'hostname': obj.hostname,\n        'nodeName': obj.nodeName,\n        'targetRef': toJson_ObjectReference(obj.targetRef),\n        'zone': obj.zone,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Endpoint = toJson_Endpoint;\n/**\n * Converts an object of type 'EndpointPort' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EndpointPort(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'appProtocol': obj.appProtocol,\n        'name': obj.name,\n        'port': obj.port,\n        'protocol': obj.protocol,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EndpointPort = toJson_EndpointPort;\n/**\n * Converts an object of type 'EndpointV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EndpointV1Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'addresses': (_a = obj.addresses) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'conditions': toJson_EndpointConditionsV1Beta1(obj.conditions),\n        'hints': toJson_EndpointHintsV1Beta1(obj.hints),\n        'hostname': obj.hostname,\n        'nodeName': obj.nodeName,\n        'targetRef': toJson_ObjectReference(obj.targetRef),\n        'topology': ((obj.topology) === undefined) ? undefined : (Object.entries(obj.topology).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EndpointV1Beta1 = toJson_EndpointV1Beta1;\n/**\n * Converts an object of type 'EndpointPortV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EndpointPortV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'appProtocol': obj.appProtocol,\n        'name': obj.name,\n        'port': obj.port,\n        'protocol': obj.protocol,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EndpointPortV1Beta1 = toJson_EndpointPortV1Beta1;\n/**\n * Converts an object of type 'EventSeriesV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EventSeriesV1Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'count': obj.count,\n        'lastObservedTime': (_a = obj.lastObservedTime) === null || _a === void 0 ? void 0 : _a.toISOString(),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EventSeriesV1Beta1 = toJson_EventSeriesV1Beta1;\n/**\n * Converts an object of type 'FlowSchemaSpecV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_FlowSchemaSpecV1Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'distinguisherMethod': toJson_FlowDistinguisherMethodV1Beta1(obj.distinguisherMethod),\n        'matchingPrecedence': obj.matchingPrecedence,\n        'priorityLevelConfiguration': toJson_PriorityLevelConfigurationReferenceV1Beta1(obj.priorityLevelConfiguration),\n        'rules': (_a = obj.rules) === null || _a === void 0 ? void 0 : _a.map(y => toJson_PolicyRulesWithSubjectsV1Beta1(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_FlowSchemaSpecV1Beta1 = toJson_FlowSchemaSpecV1Beta1;\n/**\n * Converts an object of type 'PriorityLevelConfigurationSpecV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PriorityLevelConfigurationSpecV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'limited': toJson_LimitedPriorityLevelConfigurationV1Beta1(obj.limited),\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PriorityLevelConfigurationSpecV1Beta1 = toJson_PriorityLevelConfigurationSpecV1Beta1;\n/**\n * Converts an object of type 'IngressSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_IngressSpec(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'defaultBackend': toJson_IngressBackend(obj.defaultBackend),\n        'ingressClassName': obj.ingressClassName,\n        'rules': (_a = obj.rules) === null || _a === void 0 ? void 0 : _a.map(y => toJson_IngressRule(y)),\n        'tls': (_b = obj.tls) === null || _b === void 0 ? void 0 : _b.map(y => toJson_IngressTls(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_IngressSpec = toJson_IngressSpec;\n/**\n * Converts an object of type 'IngressClassSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_IngressClassSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'controller': obj.controller,\n        'parameters': toJson_IngressClassParametersReference(obj.parameters),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_IngressClassSpec = toJson_IngressClassSpec;\n/**\n * Converts an object of type 'NetworkPolicySpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NetworkPolicySpec(obj) {\n    var _a, _b, _c;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'egress': (_a = obj.egress) === null || _a === void 0 ? void 0 : _a.map(y => toJson_NetworkPolicyEgressRule(y)),\n        'ingress': (_b = obj.ingress) === null || _b === void 0 ? void 0 : _b.map(y => toJson_NetworkPolicyIngressRule(y)),\n        'podSelector': toJson_LabelSelector(obj.podSelector),\n        'policyTypes': (_c = obj.policyTypes) === null || _c === void 0 ? void 0 : _c.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NetworkPolicySpec = toJson_NetworkPolicySpec;\n/**\n * Converts an object of type 'Overhead' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Overhead(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'podFixed': ((obj.podFixed) === undefined) ? undefined : (Object.entries(obj.podFixed).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.value }); }, {})),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Overhead = toJson_Overhead;\n/**\n * Converts an object of type 'Scheduling' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Scheduling(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'nodeSelector': ((obj.nodeSelector) === undefined) ? undefined : (Object.entries(obj.nodeSelector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'tolerations': (_a = obj.tolerations) === null || _a === void 0 ? void 0 : _a.map(y => toJson_Toleration(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Scheduling = toJson_Scheduling;\n/**\n * Converts an object of type 'RuntimeClassSpecV1Alpha1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_RuntimeClassSpecV1Alpha1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'overhead': toJson_OverheadV1Alpha1(obj.overhead),\n        'runtimeHandler': obj.runtimeHandler,\n        'scheduling': toJson_SchedulingV1Alpha1(obj.scheduling),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_RuntimeClassSpecV1Alpha1 = toJson_RuntimeClassSpecV1Alpha1;\n/**\n * Converts an object of type 'OverheadV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_OverheadV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'podFixed': ((obj.podFixed) === undefined) ? undefined : (Object.entries(obj.podFixed).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.value }); }, {})),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_OverheadV1Beta1 = toJson_OverheadV1Beta1;\n/**\n * Converts an object of type 'SchedulingV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SchedulingV1Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'nodeSelector': ((obj.nodeSelector) === undefined) ? undefined : (Object.entries(obj.nodeSelector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'tolerations': (_a = obj.tolerations) === null || _a === void 0 ? void 0 : _a.map(y => toJson_Toleration(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SchedulingV1Beta1 = toJson_SchedulingV1Beta1;\n/**\n * Converts an object of type 'DeleteOptions' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_DeleteOptions(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiVersion': obj.apiVersion,\n        'dryRun': (_a = obj.dryRun) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'gracePeriodSeconds': obj.gracePeriodSeconds,\n        'kind': obj.kind,\n        'orphanDependents': obj.orphanDependents,\n        'preconditions': toJson_Preconditions(obj.preconditions),\n        'propagationPolicy': obj.propagationPolicy,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_DeleteOptions = toJson_DeleteOptions;\n/**\n * Converts an object of type 'PodDisruptionBudgetSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodDisruptionBudgetSpec(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'maxUnavailable': (_a = obj.maxUnavailable) === null || _a === void 0 ? void 0 : _a.value,\n        'minAvailable': (_b = obj.minAvailable) === null || _b === void 0 ? void 0 : _b.value,\n        'selector': toJson_LabelSelector(obj.selector),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodDisruptionBudgetSpec = toJson_PodDisruptionBudgetSpec;\n/**\n * Converts an object of type 'PodDisruptionBudgetSpecV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodDisruptionBudgetSpecV1Beta1(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'maxUnavailable': (_a = obj.maxUnavailable) === null || _a === void 0 ? void 0 : _a.value,\n        'minAvailable': (_b = obj.minAvailable) === null || _b === void 0 ? void 0 : _b.value,\n        'selector': toJson_LabelSelector(obj.selector),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodDisruptionBudgetSpecV1Beta1 = toJson_PodDisruptionBudgetSpecV1Beta1;\n/**\n * Converts an object of type 'PodSecurityPolicySpecV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodSecurityPolicySpecV1Beta1(obj) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'allowPrivilegeEscalation': obj.allowPrivilegeEscalation,\n        'allowedCSIDrivers': (_a = obj.allowedCsiDrivers) === null || _a === void 0 ? void 0 : _a.map(y => toJson_AllowedCsiDriverV1Beta1(y)),\n        'allowedCapabilities': (_b = obj.allowedCapabilities) === null || _b === void 0 ? void 0 : _b.map(y => y),\n        'allowedFlexVolumes': (_c = obj.allowedFlexVolumes) === null || _c === void 0 ? void 0 : _c.map(y => toJson_AllowedFlexVolumeV1Beta1(y)),\n        'allowedHostPaths': (_d = obj.allowedHostPaths) === null || _d === void 0 ? void 0 : _d.map(y => toJson_AllowedHostPathV1Beta1(y)),\n        'allowedProcMountTypes': (_e = obj.allowedProcMountTypes) === null || _e === void 0 ? void 0 : _e.map(y => y),\n        'allowedUnsafeSysctls': (_f = obj.allowedUnsafeSysctls) === null || _f === void 0 ? void 0 : _f.map(y => y),\n        'defaultAddCapabilities': (_g = obj.defaultAddCapabilities) === null || _g === void 0 ? void 0 : _g.map(y => y),\n        'defaultAllowPrivilegeEscalation': obj.defaultAllowPrivilegeEscalation,\n        'forbiddenSysctls': (_h = obj.forbiddenSysctls) === null || _h === void 0 ? void 0 : _h.map(y => y),\n        'fsGroup': toJson_FsGroupStrategyOptionsV1Beta1(obj.fsGroup),\n        'hostIPC': obj.hostIpc,\n        'hostNetwork': obj.hostNetwork,\n        'hostPID': obj.hostPid,\n        'hostPorts': (_j = obj.hostPorts) === null || _j === void 0 ? void 0 : _j.map(y => toJson_HostPortRangeV1Beta1(y)),\n        'privileged': obj.privileged,\n        'readOnlyRootFilesystem': obj.readOnlyRootFilesystem,\n        'requiredDropCapabilities': (_k = obj.requiredDropCapabilities) === null || _k === void 0 ? void 0 : _k.map(y => y),\n        'runAsGroup': toJson_RunAsGroupStrategyOptionsV1Beta1(obj.runAsGroup),\n        'runAsUser': toJson_RunAsUserStrategyOptionsV1Beta1(obj.runAsUser),\n        'runtimeClass': toJson_RuntimeClassStrategyOptionsV1Beta1(obj.runtimeClass),\n        'seLinux': toJson_SeLinuxStrategyOptionsV1Beta1(obj.seLinux),\n        'supplementalGroups': toJson_SupplementalGroupsStrategyOptionsV1Beta1(obj.supplementalGroups),\n        'volumes': (_l = obj.volumes) === null || _l === void 0 ? void 0 : _l.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodSecurityPolicySpecV1Beta1 = toJson_PodSecurityPolicySpecV1Beta1;\n/**\n * Converts an object of type 'AggregationRule' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_AggregationRule(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'clusterRoleSelectors': (_a = obj.clusterRoleSelectors) === null || _a === void 0 ? void 0 : _a.map(y => toJson_LabelSelector(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_AggregationRule = toJson_AggregationRule;\n/**\n * Converts an object of type 'PolicyRule' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PolicyRule(obj) {\n    var _a, _b, _c, _d, _e;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiGroups': (_a = obj.apiGroups) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'nonResourceURLs': (_b = obj.nonResourceUrLs) === null || _b === void 0 ? void 0 : _b.map(y => y),\n        'resourceNames': (_c = obj.resourceNames) === null || _c === void 0 ? void 0 : _c.map(y => y),\n        'resources': (_d = obj.resources) === null || _d === void 0 ? void 0 : _d.map(y => y),\n        'verbs': (_e = obj.verbs) === null || _e === void 0 ? void 0 : _e.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PolicyRule = toJson_PolicyRule;\n/**\n * Converts an object of type 'RoleRef' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_RoleRef(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiGroup': obj.apiGroup,\n        'kind': obj.kind,\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_RoleRef = toJson_RoleRef;\n/**\n * Converts an object of type 'Subject' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Subject(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiGroup': obj.apiGroup,\n        'kind': obj.kind,\n        'name': obj.name,\n        'namespace': obj.namespace,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Subject = toJson_Subject;\n/**\n * Converts an object of type 'AggregationRuleV1Alpha1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_AggregationRuleV1Alpha1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'clusterRoleSelectors': (_a = obj.clusterRoleSelectors) === null || _a === void 0 ? void 0 : _a.map(y => toJson_LabelSelector(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_AggregationRuleV1Alpha1 = toJson_AggregationRuleV1Alpha1;\n/**\n * Converts an object of type 'PolicyRuleV1Alpha1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PolicyRuleV1Alpha1(obj) {\n    var _a, _b, _c, _d, _e;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiGroups': (_a = obj.apiGroups) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'nonResourceURLs': (_b = obj.nonResourceUrLs) === null || _b === void 0 ? void 0 : _b.map(y => y),\n        'resourceNames': (_c = obj.resourceNames) === null || _c === void 0 ? void 0 : _c.map(y => y),\n        'resources': (_d = obj.resources) === null || _d === void 0 ? void 0 : _d.map(y => y),\n        'verbs': (_e = obj.verbs) === null || _e === void 0 ? void 0 : _e.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PolicyRuleV1Alpha1 = toJson_PolicyRuleV1Alpha1;\n/**\n * Converts an object of type 'RoleRefV1Alpha1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_RoleRefV1Alpha1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiGroup': obj.apiGroup,\n        'kind': obj.kind,\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_RoleRefV1Alpha1 = toJson_RoleRefV1Alpha1;\n/**\n * Converts an object of type 'SubjectV1Alpha1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SubjectV1Alpha1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiVersion': obj.apiVersion,\n        'kind': obj.kind,\n        'name': obj.name,\n        'namespace': obj.namespace,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SubjectV1Alpha1 = toJson_SubjectV1Alpha1;\n/**\n * Converts an object of type 'CsiDriverSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CsiDriverSpec(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'attachRequired': obj.attachRequired,\n        'fsGroupPolicy': obj.fsGroupPolicy,\n        'podInfoOnMount': obj.podInfoOnMount,\n        'requiresRepublish': obj.requiresRepublish,\n        'storageCapacity': obj.storageCapacity,\n        'tokenRequests': (_a = obj.tokenRequests) === null || _a === void 0 ? void 0 : _a.map(y => toJson_TokenRequest(y)),\n        'volumeLifecycleModes': (_b = obj.volumeLifecycleModes) === null || _b === void 0 ? void 0 : _b.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CsiDriverSpec = toJson_CsiDriverSpec;\n/**\n * Converts an object of type 'CsiNodeSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CsiNodeSpec(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'drivers': (_a = obj.drivers) === null || _a === void 0 ? void 0 : _a.map(y => toJson_CsiNodeDriver(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CsiNodeSpec = toJson_CsiNodeSpec;\n/**\n * Converts an object of type 'TopologySelectorTerm' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_TopologySelectorTerm(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'matchLabelExpressions': (_a = obj.matchLabelExpressions) === null || _a === void 0 ? void 0 : _a.map(y => toJson_TopologySelectorLabelRequirement(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_TopologySelectorTerm = toJson_TopologySelectorTerm;\n/**\n * Converts an object of type 'VolumeAttachmentSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_VolumeAttachmentSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'attacher': obj.attacher,\n        'nodeName': obj.nodeName,\n        'source': toJson_VolumeAttachmentSource(obj.source),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_VolumeAttachmentSpec = toJson_VolumeAttachmentSpec;\n/* eslint-enable max-len, quote-props */\n/**\n * @schema io.k8s.apimachinery.pkg.api.resource.Quantity\n */\nclass Quantity {\n    constructor(value) {\n        this.value = value;\n    }\n    static fromString(value) {\n        return new Quantity(value);\n    }\n    static fromNumber(value) {\n        return new Quantity(value);\n    }\n}\nexports.Quantity = Quantity;\n/**\n * Converts an object of type 'LabelSelector' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_LabelSelector(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'matchExpressions': (_a = obj.matchExpressions) === null || _a === void 0 ? void 0 : _a.map(y => toJson_LabelSelectorRequirement(y)),\n        'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_LabelSelector = toJson_LabelSelector;\n/**\n * Converts an object of type 'VolumeAttachmentSpecV1Alpha1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_VolumeAttachmentSpecV1Alpha1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'attacher': obj.attacher,\n        'nodeName': obj.nodeName,\n        'source': toJson_VolumeAttachmentSourceV1Alpha1(obj.source),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_VolumeAttachmentSpecV1Alpha1 = toJson_VolumeAttachmentSpecV1Alpha1;\n/**\n * Converts an object of type 'CustomResourceDefinitionSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CustomResourceDefinitionSpec(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'conversion': toJson_CustomResourceConversion(obj.conversion),\n        'group': obj.group,\n        'names': toJson_CustomResourceDefinitionNames(obj.names),\n        'preserveUnknownFields': obj.preserveUnknownFields,\n        'scope': obj.scope,\n        'versions': (_a = obj.versions) === null || _a === void 0 ? void 0 : _a.map(y => toJson_CustomResourceDefinitionVersion(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CustomResourceDefinitionSpec = toJson_CustomResourceDefinitionSpec;\n/**\n * Converts an object of type 'StatusDetails' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_StatusDetails(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'causes': (_a = obj.causes) === null || _a === void 0 ? void 0 : _a.map(y => toJson_StatusCause(y)),\n        'group': obj.group,\n        'kind': obj.kind,\n        'name': obj.name,\n        'retryAfterSeconds': obj.retryAfterSeconds,\n        'uid': obj.uid,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_StatusDetails = toJson_StatusDetails;\n/**\n * Converts an object of type 'ApiServiceSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ApiServiceSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'caBundle': obj.caBundle,\n        'group': obj.group,\n        'groupPriorityMinimum': obj.groupPriorityMinimum,\n        'insecureSkipTLSVerify': obj.insecureSkipTlsVerify,\n        'service': toJson_ServiceReference(obj.service),\n        'version': obj.version,\n        'versionPriority': obj.versionPriority,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ApiServiceSpec = toJson_ApiServiceSpec;\n/**\n * Converts an object of type 'ManagedFieldsEntry' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ManagedFieldsEntry(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiVersion': obj.apiVersion,\n        'fieldsType': obj.fieldsType,\n        'fieldsV1': obj.fieldsV1,\n        'manager': obj.manager,\n        'operation': obj.operation,\n        'subresource': obj.subresource,\n        'time': (_a = obj.time) === null || _a === void 0 ? void 0 : _a.toISOString(),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ManagedFieldsEntry = toJson_ManagedFieldsEntry;\n/**\n * Converts an object of type 'OwnerReference' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_OwnerReference(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiVersion': obj.apiVersion,\n        'blockOwnerDeletion': obj.blockOwnerDeletion,\n        'controller': obj.controller,\n        'kind': obj.kind,\n        'name': obj.name,\n        'uid': obj.uid,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_OwnerReference = toJson_OwnerReference;\n/**\n * Converts an object of type 'WebhookClientConfig' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_WebhookClientConfig(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'caBundle': obj.caBundle,\n        'service': toJson_ServiceReference(obj.service),\n        'url': obj.url,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_WebhookClientConfig = toJson_WebhookClientConfig;\n/**\n * Converts an object of type 'RuleWithOperations' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_RuleWithOperations(obj) {\n    var _a, _b, _c, _d;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiGroups': (_a = obj.apiGroups) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'apiVersions': (_b = obj.apiVersions) === null || _b === void 0 ? void 0 : _b.map(y => y),\n        'operations': (_c = obj.operations) === null || _c === void 0 ? void 0 : _c.map(y => y),\n        'resources': (_d = obj.resources) === null || _d === void 0 ? void 0 : _d.map(y => y),\n        'scope': obj.scope,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_RuleWithOperations = toJson_RuleWithOperations;\n/**\n * Converts an object of type 'DaemonSetUpdateStrategy' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_DaemonSetUpdateStrategy(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'rollingUpdate': toJson_RollingUpdateDaemonSet(obj.rollingUpdate),\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_DaemonSetUpdateStrategy = toJson_DaemonSetUpdateStrategy;\n/**\n * Converts an object of type 'DeploymentStrategy' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_DeploymentStrategy(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'rollingUpdate': toJson_RollingUpdateDeployment(obj.rollingUpdate),\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_DeploymentStrategy = toJson_DeploymentStrategy;\n/**\n * Converts an object of type 'StatefulSetUpdateStrategy' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_StatefulSetUpdateStrategy(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'rollingUpdate': toJson_RollingUpdateStatefulSetStrategy(obj.rollingUpdate),\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_StatefulSetUpdateStrategy = toJson_StatefulSetUpdateStrategy;\n/**\n * Converts an object of type 'BoundObjectReference' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_BoundObjectReference(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiVersion': obj.apiVersion,\n        'kind': obj.kind,\n        'name': obj.name,\n        'uid': obj.uid,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_BoundObjectReference = toJson_BoundObjectReference;\n/**\n * Converts an object of type 'NonResourceAttributes' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NonResourceAttributes(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'path': obj.path,\n        'verb': obj.verb,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NonResourceAttributes = toJson_NonResourceAttributes;\n/**\n * Converts an object of type 'ResourceAttributes' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ResourceAttributes(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'group': obj.group,\n        'name': obj.name,\n        'namespace': obj.namespace,\n        'resource': obj.resource,\n        'subresource': obj.subresource,\n        'verb': obj.verb,\n        'version': obj.version,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ResourceAttributes = toJson_ResourceAttributes;\n/**\n * Converts an object of type 'CrossVersionObjectReference' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CrossVersionObjectReference(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiVersion': obj.apiVersion,\n        'kind': obj.kind,\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CrossVersionObjectReference = toJson_CrossVersionObjectReference;\n/**\n * Converts an object of type 'MetricSpecV2Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_MetricSpecV2Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'containerResource': toJson_ContainerResourceMetricSourceV2Beta1(obj.containerResource),\n        'external': toJson_ExternalMetricSourceV2Beta1(obj.external),\n        'object': toJson_ObjectMetricSourceV2Beta1(obj.object),\n        'pods': toJson_PodsMetricSourceV2Beta1(obj.pods),\n        'resource': toJson_ResourceMetricSourceV2Beta1(obj.resource),\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_MetricSpecV2Beta1 = toJson_MetricSpecV2Beta1;\n/**\n * Converts an object of type 'CrossVersionObjectReferenceV2Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CrossVersionObjectReferenceV2Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiVersion': obj.apiVersion,\n        'kind': obj.kind,\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CrossVersionObjectReferenceV2Beta1 = toJson_CrossVersionObjectReferenceV2Beta1;\n/**\n * Converts an object of type 'HorizontalPodAutoscalerBehaviorV2Beta2' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_HorizontalPodAutoscalerBehaviorV2Beta2(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'scaleDown': toJson_HpaScalingRulesV2Beta2(obj.scaleDown),\n        'scaleUp': toJson_HpaScalingRulesV2Beta2(obj.scaleUp),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_HorizontalPodAutoscalerBehaviorV2Beta2 = toJson_HorizontalPodAutoscalerBehaviorV2Beta2;\n/**\n * Converts an object of type 'MetricSpecV2Beta2' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_MetricSpecV2Beta2(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'containerResource': toJson_ContainerResourceMetricSourceV2Beta2(obj.containerResource),\n        'external': toJson_ExternalMetricSourceV2Beta2(obj.external),\n        'object': toJson_ObjectMetricSourceV2Beta2(obj.object),\n        'pods': toJson_PodsMetricSourceV2Beta2(obj.pods),\n        'resource': toJson_ResourceMetricSourceV2Beta2(obj.resource),\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_MetricSpecV2Beta2 = toJson_MetricSpecV2Beta2;\n/**\n * Converts an object of type 'CrossVersionObjectReferenceV2Beta2' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CrossVersionObjectReferenceV2Beta2(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiVersion': obj.apiVersion,\n        'kind': obj.kind,\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CrossVersionObjectReferenceV2Beta2 = toJson_CrossVersionObjectReferenceV2Beta2;\n/**\n * Converts an object of type 'JobTemplateSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_JobTemplateSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_JobSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_JobTemplateSpec = toJson_JobTemplateSpec;\n/**\n * Converts an object of type 'JobTemplateSpecV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_JobTemplateSpecV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_JobSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_JobTemplateSpecV1Beta1 = toJson_JobTemplateSpecV1Beta1;\n/**\n * Converts an object of type 'EndpointAddress' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EndpointAddress(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'hostname': obj.hostname,\n        'ip': obj.ip,\n        'nodeName': obj.nodeName,\n        'targetRef': toJson_ObjectReference(obj.targetRef),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EndpointAddress = toJson_EndpointAddress;\n/**\n * Converts an object of type 'LimitRangeItem' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_LimitRangeItem(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'default': ((obj.default) === undefined) ? undefined : (Object.entries(obj.default).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.value }); }, {})),\n        'defaultRequest': ((obj.defaultRequest) === undefined) ? undefined : (Object.entries(obj.defaultRequest).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.value }); }, {})),\n        'max': ((obj.max) === undefined) ? undefined : (Object.entries(obj.max).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.value }); }, {})),\n        'maxLimitRequestRatio': ((obj.maxLimitRequestRatio) === undefined) ? undefined : (Object.entries(obj.maxLimitRequestRatio).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.value }); }, {})),\n        'min': ((obj.min) === undefined) ? undefined : (Object.entries(obj.min).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.value }); }, {})),\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_LimitRangeItem = toJson_LimitRangeItem;\n/**\n * Converts an object of type 'NodeConfigSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NodeConfigSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'configMap': toJson_ConfigMapNodeConfigSource(obj.configMap),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NodeConfigSource = toJson_NodeConfigSource;\n/**\n * Converts an object of type 'Taint' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Taint(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'effect': obj.effect,\n        'key': obj.key,\n        'timeAdded': (_a = obj.timeAdded) === null || _a === void 0 ? void 0 : _a.toISOString(),\n        'value': obj.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Taint = toJson_Taint;\n/**\n * Converts an object of type 'AwsElasticBlockStoreVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_AwsElasticBlockStoreVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'partition': obj.partition,\n        'readOnly': obj.readOnly,\n        'volumeID': obj.volumeId,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_AwsElasticBlockStoreVolumeSource = toJson_AwsElasticBlockStoreVolumeSource;\n/**\n * Converts an object of type 'AzureDiskVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_AzureDiskVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'cachingMode': obj.cachingMode,\n        'diskName': obj.diskName,\n        'diskURI': obj.diskUri,\n        'fsType': obj.fsType,\n        'kind': obj.kind,\n        'readOnly': obj.readOnly,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_AzureDiskVolumeSource = toJson_AzureDiskVolumeSource;\n/**\n * Converts an object of type 'AzureFilePersistentVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_AzureFilePersistentVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'readOnly': obj.readOnly,\n        'secretName': obj.secretName,\n        'secretNamespace': obj.secretNamespace,\n        'shareName': obj.shareName,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_AzureFilePersistentVolumeSource = toJson_AzureFilePersistentVolumeSource;\n/**\n * Converts an object of type 'CephFsPersistentVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CephFsPersistentVolumeSource(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'monitors': (_a = obj.monitors) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'path': obj.path,\n        'readOnly': obj.readOnly,\n        'secretFile': obj.secretFile,\n        'secretRef': toJson_SecretReference(obj.secretRef),\n        'user': obj.user,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CephFsPersistentVolumeSource = toJson_CephFsPersistentVolumeSource;\n/**\n * Converts an object of type 'CinderPersistentVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CinderPersistentVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'readOnly': obj.readOnly,\n        'secretRef': toJson_SecretReference(obj.secretRef),\n        'volumeID': obj.volumeId,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CinderPersistentVolumeSource = toJson_CinderPersistentVolumeSource;\n/**\n * Converts an object of type 'CsiPersistentVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CsiPersistentVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'controllerExpandSecretRef': toJson_SecretReference(obj.controllerExpandSecretRef),\n        'controllerPublishSecretRef': toJson_SecretReference(obj.controllerPublishSecretRef),\n        'driver': obj.driver,\n        'fsType': obj.fsType,\n        'nodePublishSecretRef': toJson_SecretReference(obj.nodePublishSecretRef),\n        'nodeStageSecretRef': toJson_SecretReference(obj.nodeStageSecretRef),\n        'readOnly': obj.readOnly,\n        'volumeAttributes': ((obj.volumeAttributes) === undefined) ? undefined : (Object.entries(obj.volumeAttributes).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'volumeHandle': obj.volumeHandle,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CsiPersistentVolumeSource = toJson_CsiPersistentVolumeSource;\n/**\n * Converts an object of type 'FcVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_FcVolumeSource(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'lun': obj.lun,\n        'readOnly': obj.readOnly,\n        'targetWWNs': (_a = obj.targetWwNs) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'wwids': (_b = obj.wwids) === null || _b === void 0 ? void 0 : _b.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_FcVolumeSource = toJson_FcVolumeSource;\n/**\n * Converts an object of type 'FlexPersistentVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_FlexPersistentVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'driver': obj.driver,\n        'fsType': obj.fsType,\n        'options': ((obj.options) === undefined) ? undefined : (Object.entries(obj.options).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'readOnly': obj.readOnly,\n        'secretRef': toJson_SecretReference(obj.secretRef),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_FlexPersistentVolumeSource = toJson_FlexPersistentVolumeSource;\n/**\n * Converts an object of type 'FlockerVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_FlockerVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'datasetName': obj.datasetName,\n        'datasetUUID': obj.datasetUuid,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_FlockerVolumeSource = toJson_FlockerVolumeSource;\n/**\n * Converts an object of type 'GcePersistentDiskVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_GcePersistentDiskVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'partition': obj.partition,\n        'pdName': obj.pdName,\n        'readOnly': obj.readOnly,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_GcePersistentDiskVolumeSource = toJson_GcePersistentDiskVolumeSource;\n/**\n * Converts an object of type 'GlusterfsPersistentVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_GlusterfsPersistentVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'endpoints': obj.endpoints,\n        'endpointsNamespace': obj.endpointsNamespace,\n        'path': obj.path,\n        'readOnly': obj.readOnly,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_GlusterfsPersistentVolumeSource = toJson_GlusterfsPersistentVolumeSource;\n/**\n * Converts an object of type 'HostPathVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_HostPathVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'path': obj.path,\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_HostPathVolumeSource = toJson_HostPathVolumeSource;\n/**\n * Converts an object of type 'IscsiPersistentVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_IscsiPersistentVolumeSource(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'chapAuthDiscovery': obj.chapAuthDiscovery,\n        'chapAuthSession': obj.chapAuthSession,\n        'fsType': obj.fsType,\n        'initiatorName': obj.initiatorName,\n        'iqn': obj.iqn,\n        'iscsiInterface': obj.iscsiInterface,\n        'lun': obj.lun,\n        'portals': (_a = obj.portals) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'readOnly': obj.readOnly,\n        'secretRef': toJson_SecretReference(obj.secretRef),\n        'targetPortal': obj.targetPortal,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_IscsiPersistentVolumeSource = toJson_IscsiPersistentVolumeSource;\n/**\n * Converts an object of type 'LocalVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_LocalVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'path': obj.path,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_LocalVolumeSource = toJson_LocalVolumeSource;\n/**\n * Converts an object of type 'NfsVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NfsVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'path': obj.path,\n        'readOnly': obj.readOnly,\n        'server': obj.server,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NfsVolumeSource = toJson_NfsVolumeSource;\n/**\n * Converts an object of type 'VolumeNodeAffinity' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_VolumeNodeAffinity(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'required': toJson_NodeSelector(obj.required),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_VolumeNodeAffinity = toJson_VolumeNodeAffinity;\n/**\n * Converts an object of type 'PhotonPersistentDiskVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PhotonPersistentDiskVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'pdID': obj.pdId,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PhotonPersistentDiskVolumeSource = toJson_PhotonPersistentDiskVolumeSource;\n/**\n * Converts an object of type 'PortworxVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PortworxVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'readOnly': obj.readOnly,\n        'volumeID': obj.volumeId,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PortworxVolumeSource = toJson_PortworxVolumeSource;\n/**\n * Converts an object of type 'QuobyteVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_QuobyteVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'group': obj.group,\n        'readOnly': obj.readOnly,\n        'registry': obj.registry,\n        'tenant': obj.tenant,\n        'user': obj.user,\n        'volume': obj.volume,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_QuobyteVolumeSource = toJson_QuobyteVolumeSource;\n/**\n * Converts an object of type 'RbdPersistentVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_RbdPersistentVolumeSource(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'image': obj.image,\n        'keyring': obj.keyring,\n        'monitors': (_a = obj.monitors) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'pool': obj.pool,\n        'readOnly': obj.readOnly,\n        'secretRef': toJson_SecretReference(obj.secretRef),\n        'user': obj.user,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_RbdPersistentVolumeSource = toJson_RbdPersistentVolumeSource;\n/**\n * Converts an object of type 'ScaleIoPersistentVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ScaleIoPersistentVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'gateway': obj.gateway,\n        'protectionDomain': obj.protectionDomain,\n        'readOnly': obj.readOnly,\n        'secretRef': toJson_SecretReference(obj.secretRef),\n        'sslEnabled': obj.sslEnabled,\n        'storageMode': obj.storageMode,\n        'storagePool': obj.storagePool,\n        'system': obj.system,\n        'volumeName': obj.volumeName,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ScaleIoPersistentVolumeSource = toJson_ScaleIoPersistentVolumeSource;\n/**\n * Converts an object of type 'StorageOsPersistentVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_StorageOsPersistentVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'readOnly': obj.readOnly,\n        'secretRef': toJson_ObjectReference(obj.secretRef),\n        'volumeName': obj.volumeName,\n        'volumeNamespace': obj.volumeNamespace,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_StorageOsPersistentVolumeSource = toJson_StorageOsPersistentVolumeSource;\n/**\n * Converts an object of type 'VsphereVirtualDiskVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_VsphereVirtualDiskVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'storagePolicyID': obj.storagePolicyId,\n        'storagePolicyName': obj.storagePolicyName,\n        'volumePath': obj.volumePath,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_VsphereVirtualDiskVolumeSource = toJson_VsphereVirtualDiskVolumeSource;\n/**\n * Converts an object of type 'TypedLocalObjectReference' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_TypedLocalObjectReference(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiGroup': obj.apiGroup,\n        'kind': obj.kind,\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_TypedLocalObjectReference = toJson_TypedLocalObjectReference;\n/**\n * Converts an object of type 'ResourceRequirements' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ResourceRequirements(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'limits': ((obj.limits) === undefined) ? undefined : (Object.entries(obj.limits).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.value }); }, {})),\n        'requests': ((obj.requests) === undefined) ? undefined : (Object.entries(obj.requests).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.value }); }, {})),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ResourceRequirements = toJson_ResourceRequirements;\n/**\n * Converts an object of type 'Affinity' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Affinity(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'nodeAffinity': toJson_NodeAffinity(obj.nodeAffinity),\n        'podAffinity': toJson_PodAffinity(obj.podAffinity),\n        'podAntiAffinity': toJson_PodAntiAffinity(obj.podAntiAffinity),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Affinity = toJson_Affinity;\n/**\n * Converts an object of type 'Container' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Container(obj) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'args': (_a = obj.args) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'command': (_b = obj.command) === null || _b === void 0 ? void 0 : _b.map(y => y),\n        'env': (_c = obj.env) === null || _c === void 0 ? void 0 : _c.map(y => toJson_EnvVar(y)),\n        'envFrom': (_d = obj.envFrom) === null || _d === void 0 ? void 0 : _d.map(y => toJson_EnvFromSource(y)),\n        'image': obj.image,\n        'imagePullPolicy': obj.imagePullPolicy,\n        'lifecycle': toJson_Lifecycle(obj.lifecycle),\n        'livenessProbe': toJson_Probe(obj.livenessProbe),\n        'name': obj.name,\n        'ports': (_e = obj.ports) === null || _e === void 0 ? void 0 : _e.map(y => toJson_ContainerPort(y)),\n        'readinessProbe': toJson_Probe(obj.readinessProbe),\n        'resources': toJson_ResourceRequirements(obj.resources),\n        'securityContext': toJson_SecurityContext(obj.securityContext),\n        'startupProbe': toJson_Probe(obj.startupProbe),\n        'stdin': obj.stdin,\n        'stdinOnce': obj.stdinOnce,\n        'terminationMessagePath': obj.terminationMessagePath,\n        'terminationMessagePolicy': obj.terminationMessagePolicy,\n        'tty': obj.tty,\n        'volumeDevices': (_f = obj.volumeDevices) === null || _f === void 0 ? void 0 : _f.map(y => toJson_VolumeDevice(y)),\n        'volumeMounts': (_g = obj.volumeMounts) === null || _g === void 0 ? void 0 : _g.map(y => toJson_VolumeMount(y)),\n        'workingDir': obj.workingDir,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Container = toJson_Container;\n/**\n * Converts an object of type 'PodDnsConfig' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodDnsConfig(obj) {\n    var _a, _b, _c;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'nameservers': (_a = obj.nameservers) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'options': (_b = obj.options) === null || _b === void 0 ? void 0 : _b.map(y => toJson_PodDnsConfigOption(y)),\n        'searches': (_c = obj.searches) === null || _c === void 0 ? void 0 : _c.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodDnsConfig = toJson_PodDnsConfig;\n/**\n * Converts an object of type 'EphemeralContainer' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EphemeralContainer(obj) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'args': (_a = obj.args) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'command': (_b = obj.command) === null || _b === void 0 ? void 0 : _b.map(y => y),\n        'env': (_c = obj.env) === null || _c === void 0 ? void 0 : _c.map(y => toJson_EnvVar(y)),\n        'envFrom': (_d = obj.envFrom) === null || _d === void 0 ? void 0 : _d.map(y => toJson_EnvFromSource(y)),\n        'image': obj.image,\n        'imagePullPolicy': obj.imagePullPolicy,\n        'lifecycle': toJson_Lifecycle(obj.lifecycle),\n        'livenessProbe': toJson_Probe(obj.livenessProbe),\n        'name': obj.name,\n        'ports': (_e = obj.ports) === null || _e === void 0 ? void 0 : _e.map(y => toJson_ContainerPort(y)),\n        'readinessProbe': toJson_Probe(obj.readinessProbe),\n        'resources': toJson_ResourceRequirements(obj.resources),\n        'securityContext': toJson_SecurityContext(obj.securityContext),\n        'startupProbe': toJson_Probe(obj.startupProbe),\n        'stdin': obj.stdin,\n        'stdinOnce': obj.stdinOnce,\n        'targetContainerName': obj.targetContainerName,\n        'terminationMessagePath': obj.terminationMessagePath,\n        'terminationMessagePolicy': obj.terminationMessagePolicy,\n        'tty': obj.tty,\n        'volumeDevices': (_f = obj.volumeDevices) === null || _f === void 0 ? void 0 : _f.map(y => toJson_VolumeDevice(y)),\n        'volumeMounts': (_g = obj.volumeMounts) === null || _g === void 0 ? void 0 : _g.map(y => toJson_VolumeMount(y)),\n        'workingDir': obj.workingDir,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EphemeralContainer = toJson_EphemeralContainer;\n/**\n * Converts an object of type 'HostAlias' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_HostAlias(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'hostnames': (_a = obj.hostnames) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'ip': obj.ip,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_HostAlias = toJson_HostAlias;\n/**\n * Converts an object of type 'PodReadinessGate' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodReadinessGate(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'conditionType': obj.conditionType,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodReadinessGate = toJson_PodReadinessGate;\n/**\n * Converts an object of type 'PodSecurityContext' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodSecurityContext(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsGroup': obj.fsGroup,\n        'fsGroupChangePolicy': obj.fsGroupChangePolicy,\n        'runAsGroup': obj.runAsGroup,\n        'runAsNonRoot': obj.runAsNonRoot,\n        'runAsUser': obj.runAsUser,\n        'seLinuxOptions': toJson_SeLinuxOptions(obj.seLinuxOptions),\n        'seccompProfile': toJson_SeccompProfile(obj.seccompProfile),\n        'supplementalGroups': (_a = obj.supplementalGroups) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'sysctls': (_b = obj.sysctls) === null || _b === void 0 ? void 0 : _b.map(y => toJson_Sysctl(y)),\n        'windowsOptions': toJson_WindowsSecurityContextOptions(obj.windowsOptions),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodSecurityContext = toJson_PodSecurityContext;\n/**\n * Converts an object of type 'Toleration' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Toleration(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'effect': obj.effect,\n        'key': obj.key,\n        'operator': obj.operator,\n        'tolerationSeconds': obj.tolerationSeconds,\n        'value': obj.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Toleration = toJson_Toleration;\n/**\n * Converts an object of type 'TopologySpreadConstraint' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_TopologySpreadConstraint(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'labelSelector': toJson_LabelSelector(obj.labelSelector),\n        'maxSkew': obj.maxSkew,\n        'topologyKey': obj.topologyKey,\n        'whenUnsatisfiable': obj.whenUnsatisfiable,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_TopologySpreadConstraint = toJson_TopologySpreadConstraint;\n/**\n * Converts an object of type 'Volume' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Volume(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'awsElasticBlockStore': toJson_AwsElasticBlockStoreVolumeSource(obj.awsElasticBlockStore),\n        'azureDisk': toJson_AzureDiskVolumeSource(obj.azureDisk),\n        'azureFile': toJson_AzureFileVolumeSource(obj.azureFile),\n        'cephfs': toJson_CephFsVolumeSource(obj.cephfs),\n        'cinder': toJson_CinderVolumeSource(obj.cinder),\n        'configMap': toJson_ConfigMapVolumeSource(obj.configMap),\n        'csi': toJson_CsiVolumeSource(obj.csi),\n        'downwardAPI': toJson_DownwardApiVolumeSource(obj.downwardApi),\n        'emptyDir': toJson_EmptyDirVolumeSource(obj.emptyDir),\n        'ephemeral': toJson_EphemeralVolumeSource(obj.ephemeral),\n        'fc': toJson_FcVolumeSource(obj.fc),\n        'flexVolume': toJson_FlexVolumeSource(obj.flexVolume),\n        'flocker': toJson_FlockerVolumeSource(obj.flocker),\n        'gcePersistentDisk': toJson_GcePersistentDiskVolumeSource(obj.gcePersistentDisk),\n        'gitRepo': toJson_GitRepoVolumeSource(obj.gitRepo),\n        'glusterfs': toJson_GlusterfsVolumeSource(obj.glusterfs),\n        'hostPath': toJson_HostPathVolumeSource(obj.hostPath),\n        'iscsi': toJson_IscsiVolumeSource(obj.iscsi),\n        'name': obj.name,\n        'nfs': toJson_NfsVolumeSource(obj.nfs),\n        'persistentVolumeClaim': toJson_PersistentVolumeClaimVolumeSource(obj.persistentVolumeClaim),\n        'photonPersistentDisk': toJson_PhotonPersistentDiskVolumeSource(obj.photonPersistentDisk),\n        'portworxVolume': toJson_PortworxVolumeSource(obj.portworxVolume),\n        'projected': toJson_ProjectedVolumeSource(obj.projected),\n        'quobyte': toJson_QuobyteVolumeSource(obj.quobyte),\n        'rbd': toJson_RbdVolumeSource(obj.rbd),\n        'scaleIO': toJson_ScaleIoVolumeSource(obj.scaleIo),\n        'secret': toJson_SecretVolumeSource(obj.secret),\n        'storageos': toJson_StorageOsVolumeSource(obj.storageos),\n        'vsphereVolume': toJson_VsphereVirtualDiskVolumeSource(obj.vsphereVolume),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Volume = toJson_Volume;\n/**\n * Converts an object of type 'ScopeSelector' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ScopeSelector(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'matchExpressions': (_a = obj.matchExpressions) === null || _a === void 0 ? void 0 : _a.map(y => toJson_ScopedResourceSelectorRequirement(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ScopeSelector = toJson_ScopeSelector;\n/**\n * Converts an object of type 'ServicePort' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ServicePort(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'appProtocol': obj.appProtocol,\n        'name': obj.name,\n        'nodePort': obj.nodePort,\n        'port': obj.port,\n        'protocol': obj.protocol,\n        'targetPort': (_a = obj.targetPort) === null || _a === void 0 ? void 0 : _a.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ServicePort = toJson_ServicePort;\n/**\n * Converts an object of type 'SessionAffinityConfig' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SessionAffinityConfig(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'clientIP': toJson_ClientIpConfig(obj.clientIp),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SessionAffinityConfig = toJson_SessionAffinityConfig;\n/**\n * Converts an object of type 'EndpointConditions' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EndpointConditions(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'ready': obj.ready,\n        'serving': obj.serving,\n        'terminating': obj.terminating,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EndpointConditions = toJson_EndpointConditions;\n/**\n * Converts an object of type 'EndpointHints' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EndpointHints(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'forZones': (_a = obj.forZones) === null || _a === void 0 ? void 0 : _a.map(y => toJson_ForZone(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EndpointHints = toJson_EndpointHints;\n/**\n * Converts an object of type 'EndpointConditionsV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EndpointConditionsV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'ready': obj.ready,\n        'serving': obj.serving,\n        'terminating': obj.terminating,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EndpointConditionsV1Beta1 = toJson_EndpointConditionsV1Beta1;\n/**\n * Converts an object of type 'EndpointHintsV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EndpointHintsV1Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'forZones': (_a = obj.forZones) === null || _a === void 0 ? void 0 : _a.map(y => toJson_ForZoneV1Beta1(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EndpointHintsV1Beta1 = toJson_EndpointHintsV1Beta1;\n/**\n * Converts an object of type 'FlowDistinguisherMethodV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_FlowDistinguisherMethodV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_FlowDistinguisherMethodV1Beta1 = toJson_FlowDistinguisherMethodV1Beta1;\n/**\n * Converts an object of type 'PriorityLevelConfigurationReferenceV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PriorityLevelConfigurationReferenceV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PriorityLevelConfigurationReferenceV1Beta1 = toJson_PriorityLevelConfigurationReferenceV1Beta1;\n/**\n * Converts an object of type 'PolicyRulesWithSubjectsV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PolicyRulesWithSubjectsV1Beta1(obj) {\n    var _a, _b, _c;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'nonResourceRules': (_a = obj.nonResourceRules) === null || _a === void 0 ? void 0 : _a.map(y => toJson_NonResourcePolicyRuleV1Beta1(y)),\n        'resourceRules': (_b = obj.resourceRules) === null || _b === void 0 ? void 0 : _b.map(y => toJson_ResourcePolicyRuleV1Beta1(y)),\n        'subjects': (_c = obj.subjects) === null || _c === void 0 ? void 0 : _c.map(y => toJson_SubjectV1Beta1(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PolicyRulesWithSubjectsV1Beta1 = toJson_PolicyRulesWithSubjectsV1Beta1;\n/**\n * Converts an object of type 'LimitedPriorityLevelConfigurationV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_LimitedPriorityLevelConfigurationV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'assuredConcurrencyShares': obj.assuredConcurrencyShares,\n        'limitResponse': toJson_LimitResponseV1Beta1(obj.limitResponse),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_LimitedPriorityLevelConfigurationV1Beta1 = toJson_LimitedPriorityLevelConfigurationV1Beta1;\n/**\n * Converts an object of type 'IngressBackend' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_IngressBackend(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'resource': toJson_TypedLocalObjectReference(obj.resource),\n        'service': toJson_IngressServiceBackend(obj.service),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_IngressBackend = toJson_IngressBackend;\n/**\n * Converts an object of type 'IngressRule' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_IngressRule(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'host': obj.host,\n        'http': toJson_HttpIngressRuleValue(obj.http),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_IngressRule = toJson_IngressRule;\n/**\n * Converts an object of type 'IngressTls' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_IngressTls(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'hosts': (_a = obj.hosts) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'secretName': obj.secretName,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_IngressTls = toJson_IngressTls;\n/**\n * Converts an object of type 'IngressClassParametersReference' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_IngressClassParametersReference(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiGroup': obj.apiGroup,\n        'kind': obj.kind,\n        'name': obj.name,\n        'namespace': obj.namespace,\n        'scope': obj.scope,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_IngressClassParametersReference = toJson_IngressClassParametersReference;\n/**\n * Converts an object of type 'NetworkPolicyEgressRule' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NetworkPolicyEgressRule(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'ports': (_a = obj.ports) === null || _a === void 0 ? void 0 : _a.map(y => toJson_NetworkPolicyPort(y)),\n        'to': (_b = obj.to) === null || _b === void 0 ? void 0 : _b.map(y => toJson_NetworkPolicyPeer(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NetworkPolicyEgressRule = toJson_NetworkPolicyEgressRule;\n/**\n * Converts an object of type 'NetworkPolicyIngressRule' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NetworkPolicyIngressRule(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'from': (_a = obj.from) === null || _a === void 0 ? void 0 : _a.map(y => toJson_NetworkPolicyPeer(y)),\n        'ports': (_b = obj.ports) === null || _b === void 0 ? void 0 : _b.map(y => toJson_NetworkPolicyPort(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NetworkPolicyIngressRule = toJson_NetworkPolicyIngressRule;\n/**\n * Converts an object of type 'OverheadV1Alpha1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_OverheadV1Alpha1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'podFixed': ((obj.podFixed) === undefined) ? undefined : (Object.entries(obj.podFixed).reduce((r, i) => { var _a; return (i[1] === undefined) ? r : ({ ...r, [i[0]]: (_a = i[1]) === null || _a === void 0 ? void 0 : _a.value }); }, {})),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_OverheadV1Alpha1 = toJson_OverheadV1Alpha1;\n/**\n * Converts an object of type 'SchedulingV1Alpha1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SchedulingV1Alpha1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'nodeSelector': ((obj.nodeSelector) === undefined) ? undefined : (Object.entries(obj.nodeSelector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'tolerations': (_a = obj.tolerations) === null || _a === void 0 ? void 0 : _a.map(y => toJson_Toleration(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SchedulingV1Alpha1 = toJson_SchedulingV1Alpha1;\n/* eslint-enable max-len, quote-props */\n/**\n * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n *\n * @schema IoK8SApimachineryPkgApisMetaV1DeleteOptionsKind\n */\nvar IoK8SApimachineryPkgApisMetaV1DeleteOptionsKind;\n(function (IoK8SApimachineryPkgApisMetaV1DeleteOptionsKind) {\n    /** DeleteOptions */\n    IoK8SApimachineryPkgApisMetaV1DeleteOptionsKind[\"DELETE_OPTIONS\"] = \"DeleteOptions\";\n})(IoK8SApimachineryPkgApisMetaV1DeleteOptionsKind = exports.IoK8SApimachineryPkgApisMetaV1DeleteOptionsKind || (exports.IoK8SApimachineryPkgApisMetaV1DeleteOptionsKind = {}));\n/**\n * Converts an object of type 'Preconditions' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Preconditions(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'resourceVersion': obj.resourceVersion,\n        'uid': obj.uid,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Preconditions = toJson_Preconditions;\n/* eslint-enable max-len, quote-props */\n/**\n * @schema io.k8s.apimachinery.pkg.util.intstr.IntOrString\n */\nclass IntOrString {\n    constructor(value) {\n        this.value = value;\n    }\n    static fromString(value) {\n        return new IntOrString(value);\n    }\n    static fromNumber(value) {\n        return new IntOrString(value);\n    }\n}\nexports.IntOrString = IntOrString;\n/**\n * Converts an object of type 'AllowedCsiDriverV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_AllowedCsiDriverV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_AllowedCsiDriverV1Beta1 = toJson_AllowedCsiDriverV1Beta1;\n/**\n * Converts an object of type 'AllowedFlexVolumeV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_AllowedFlexVolumeV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'driver': obj.driver,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_AllowedFlexVolumeV1Beta1 = toJson_AllowedFlexVolumeV1Beta1;\n/**\n * Converts an object of type 'AllowedHostPathV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_AllowedHostPathV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'pathPrefix': obj.pathPrefix,\n        'readOnly': obj.readOnly,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_AllowedHostPathV1Beta1 = toJson_AllowedHostPathV1Beta1;\n/**\n * Converts an object of type 'FsGroupStrategyOptionsV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_FsGroupStrategyOptionsV1Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'ranges': (_a = obj.ranges) === null || _a === void 0 ? void 0 : _a.map(y => toJson_IdRangeV1Beta1(y)),\n        'rule': obj.rule,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_FsGroupStrategyOptionsV1Beta1 = toJson_FsGroupStrategyOptionsV1Beta1;\n/**\n * Converts an object of type 'HostPortRangeV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_HostPortRangeV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'max': obj.max,\n        'min': obj.min,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_HostPortRangeV1Beta1 = toJson_HostPortRangeV1Beta1;\n/**\n * Converts an object of type 'RunAsGroupStrategyOptionsV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_RunAsGroupStrategyOptionsV1Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'ranges': (_a = obj.ranges) === null || _a === void 0 ? void 0 : _a.map(y => toJson_IdRangeV1Beta1(y)),\n        'rule': obj.rule,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_RunAsGroupStrategyOptionsV1Beta1 = toJson_RunAsGroupStrategyOptionsV1Beta1;\n/**\n * Converts an object of type 'RunAsUserStrategyOptionsV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_RunAsUserStrategyOptionsV1Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'ranges': (_a = obj.ranges) === null || _a === void 0 ? void 0 : _a.map(y => toJson_IdRangeV1Beta1(y)),\n        'rule': obj.rule,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_RunAsUserStrategyOptionsV1Beta1 = toJson_RunAsUserStrategyOptionsV1Beta1;\n/**\n * Converts an object of type 'RuntimeClassStrategyOptionsV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_RuntimeClassStrategyOptionsV1Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'allowedRuntimeClassNames': (_a = obj.allowedRuntimeClassNames) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'defaultRuntimeClassName': obj.defaultRuntimeClassName,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_RuntimeClassStrategyOptionsV1Beta1 = toJson_RuntimeClassStrategyOptionsV1Beta1;\n/**\n * Converts an object of type 'SeLinuxStrategyOptionsV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SeLinuxStrategyOptionsV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'rule': obj.rule,\n        'seLinuxOptions': toJson_SeLinuxOptions(obj.seLinuxOptions),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SeLinuxStrategyOptionsV1Beta1 = toJson_SeLinuxStrategyOptionsV1Beta1;\n/**\n * Converts an object of type 'SupplementalGroupsStrategyOptionsV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SupplementalGroupsStrategyOptionsV1Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'ranges': (_a = obj.ranges) === null || _a === void 0 ? void 0 : _a.map(y => toJson_IdRangeV1Beta1(y)),\n        'rule': obj.rule,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SupplementalGroupsStrategyOptionsV1Beta1 = toJson_SupplementalGroupsStrategyOptionsV1Beta1;\n/**\n * Converts an object of type 'TokenRequest' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_TokenRequest(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'audience': obj.audience,\n        'expirationSeconds': obj.expirationSeconds,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_TokenRequest = toJson_TokenRequest;\n/**\n * Converts an object of type 'CsiNodeDriver' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CsiNodeDriver(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'allocatable': toJson_VolumeNodeResources(obj.allocatable),\n        'name': obj.name,\n        'nodeID': obj.nodeId,\n        'topologyKeys': (_a = obj.topologyKeys) === null || _a === void 0 ? void 0 : _a.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CsiNodeDriver = toJson_CsiNodeDriver;\n/**\n * Converts an object of type 'TopologySelectorLabelRequirement' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_TopologySelectorLabelRequirement(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'key': obj.key,\n        'values': (_a = obj.values) === null || _a === void 0 ? void 0 : _a.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_TopologySelectorLabelRequirement = toJson_TopologySelectorLabelRequirement;\n/**\n * Converts an object of type 'VolumeAttachmentSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_VolumeAttachmentSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'inlineVolumeSpec': toJson_PersistentVolumeSpec(obj.inlineVolumeSpec),\n        'persistentVolumeName': obj.persistentVolumeName,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_VolumeAttachmentSource = toJson_VolumeAttachmentSource;\n/**\n * Converts an object of type 'LabelSelectorRequirement' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_LabelSelectorRequirement(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'key': obj.key,\n        'operator': obj.operator,\n        'values': (_a = obj.values) === null || _a === void 0 ? void 0 : _a.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_LabelSelectorRequirement = toJson_LabelSelectorRequirement;\n/**\n * Converts an object of type 'VolumeAttachmentSourceV1Alpha1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_VolumeAttachmentSourceV1Alpha1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'inlineVolumeSpec': toJson_PersistentVolumeSpec(obj.inlineVolumeSpec),\n        'persistentVolumeName': obj.persistentVolumeName,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_VolumeAttachmentSourceV1Alpha1 = toJson_VolumeAttachmentSourceV1Alpha1;\n/**\n * Converts an object of type 'CustomResourceConversion' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CustomResourceConversion(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'strategy': obj.strategy,\n        'webhook': toJson_WebhookConversion(obj.webhook),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CustomResourceConversion = toJson_CustomResourceConversion;\n/**\n * Converts an object of type 'CustomResourceDefinitionNames' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CustomResourceDefinitionNames(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'categories': (_a = obj.categories) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'kind': obj.kind,\n        'listKind': obj.listKind,\n        'plural': obj.plural,\n        'shortNames': (_b = obj.shortNames) === null || _b === void 0 ? void 0 : _b.map(y => y),\n        'singular': obj.singular,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CustomResourceDefinitionNames = toJson_CustomResourceDefinitionNames;\n/**\n * Converts an object of type 'CustomResourceDefinitionVersion' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CustomResourceDefinitionVersion(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'additionalPrinterColumns': (_a = obj.additionalPrinterColumns) === null || _a === void 0 ? void 0 : _a.map(y => toJson_CustomResourceColumnDefinition(y)),\n        'deprecated': obj.deprecated,\n        'deprecationWarning': obj.deprecationWarning,\n        'name': obj.name,\n        'schema': toJson_CustomResourceValidation(obj.schema),\n        'served': obj.served,\n        'storage': obj.storage,\n        'subresources': toJson_CustomResourceSubresources(obj.subresources),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CustomResourceDefinitionVersion = toJson_CustomResourceDefinitionVersion;\n/**\n * Converts an object of type 'StatusCause' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_StatusCause(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'field': obj.field,\n        'message': obj.message,\n        'reason': obj.reason,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_StatusCause = toJson_StatusCause;\n/**\n * Converts an object of type 'ServiceReference' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ServiceReference(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'namespace': obj.namespace,\n        'path': obj.path,\n        'port': obj.port,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ServiceReference = toJson_ServiceReference;\n/**\n * Converts an object of type 'RollingUpdateDaemonSet' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_RollingUpdateDaemonSet(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'maxSurge': (_a = obj.maxSurge) === null || _a === void 0 ? void 0 : _a.value,\n        'maxUnavailable': (_b = obj.maxUnavailable) === null || _b === void 0 ? void 0 : _b.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_RollingUpdateDaemonSet = toJson_RollingUpdateDaemonSet;\n/**\n * Converts an object of type 'RollingUpdateDeployment' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_RollingUpdateDeployment(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'maxSurge': (_a = obj.maxSurge) === null || _a === void 0 ? void 0 : _a.value,\n        'maxUnavailable': (_b = obj.maxUnavailable) === null || _b === void 0 ? void 0 : _b.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_RollingUpdateDeployment = toJson_RollingUpdateDeployment;\n/**\n * Converts an object of type 'RollingUpdateStatefulSetStrategy' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_RollingUpdateStatefulSetStrategy(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'partition': obj.partition,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_RollingUpdateStatefulSetStrategy = toJson_RollingUpdateStatefulSetStrategy;\n/**\n * Converts an object of type 'ContainerResourceMetricSourceV2Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ContainerResourceMetricSourceV2Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'container': obj.container,\n        'name': obj.name,\n        'targetAverageUtilization': obj.targetAverageUtilization,\n        'targetAverageValue': (_a = obj.targetAverageValue) === null || _a === void 0 ? void 0 : _a.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ContainerResourceMetricSourceV2Beta1 = toJson_ContainerResourceMetricSourceV2Beta1;\n/**\n * Converts an object of type 'ExternalMetricSourceV2Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ExternalMetricSourceV2Beta1(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metricName': obj.metricName,\n        'metricSelector': toJson_LabelSelector(obj.metricSelector),\n        'targetAverageValue': (_a = obj.targetAverageValue) === null || _a === void 0 ? void 0 : _a.value,\n        'targetValue': (_b = obj.targetValue) === null || _b === void 0 ? void 0 : _b.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ExternalMetricSourceV2Beta1 = toJson_ExternalMetricSourceV2Beta1;\n/**\n * Converts an object of type 'ObjectMetricSourceV2Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ObjectMetricSourceV2Beta1(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'averageValue': (_a = obj.averageValue) === null || _a === void 0 ? void 0 : _a.value,\n        'metricName': obj.metricName,\n        'selector': toJson_LabelSelector(obj.selector),\n        'target': toJson_CrossVersionObjectReferenceV2Beta1(obj.target),\n        'targetValue': (_b = obj.targetValue) === null || _b === void 0 ? void 0 : _b.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ObjectMetricSourceV2Beta1 = toJson_ObjectMetricSourceV2Beta1;\n/**\n * Converts an object of type 'PodsMetricSourceV2Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodsMetricSourceV2Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metricName': obj.metricName,\n        'selector': toJson_LabelSelector(obj.selector),\n        'targetAverageValue': (_a = obj.targetAverageValue) === null || _a === void 0 ? void 0 : _a.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodsMetricSourceV2Beta1 = toJson_PodsMetricSourceV2Beta1;\n/**\n * Converts an object of type 'ResourceMetricSourceV2Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ResourceMetricSourceV2Beta1(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'targetAverageUtilization': obj.targetAverageUtilization,\n        'targetAverageValue': (_a = obj.targetAverageValue) === null || _a === void 0 ? void 0 : _a.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ResourceMetricSourceV2Beta1 = toJson_ResourceMetricSourceV2Beta1;\n/**\n * Converts an object of type 'HpaScalingRulesV2Beta2' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_HpaScalingRulesV2Beta2(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'policies': (_a = obj.policies) === null || _a === void 0 ? void 0 : _a.map(y => toJson_HpaScalingPolicyV2Beta2(y)),\n        'selectPolicy': obj.selectPolicy,\n        'stabilizationWindowSeconds': obj.stabilizationWindowSeconds,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_HpaScalingRulesV2Beta2 = toJson_HpaScalingRulesV2Beta2;\n/**\n * Converts an object of type 'ContainerResourceMetricSourceV2Beta2' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ContainerResourceMetricSourceV2Beta2(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'container': obj.container,\n        'name': obj.name,\n        'target': toJson_MetricTargetV2Beta2(obj.target),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ContainerResourceMetricSourceV2Beta2 = toJson_ContainerResourceMetricSourceV2Beta2;\n/**\n * Converts an object of type 'ExternalMetricSourceV2Beta2' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ExternalMetricSourceV2Beta2(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metric': toJson_MetricIdentifierV2Beta2(obj.metric),\n        'target': toJson_MetricTargetV2Beta2(obj.target),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ExternalMetricSourceV2Beta2 = toJson_ExternalMetricSourceV2Beta2;\n/**\n * Converts an object of type 'ObjectMetricSourceV2Beta2' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ObjectMetricSourceV2Beta2(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'describedObject': toJson_CrossVersionObjectReferenceV2Beta2(obj.describedObject),\n        'metric': toJson_MetricIdentifierV2Beta2(obj.metric),\n        'target': toJson_MetricTargetV2Beta2(obj.target),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ObjectMetricSourceV2Beta2 = toJson_ObjectMetricSourceV2Beta2;\n/**\n * Converts an object of type 'PodsMetricSourceV2Beta2' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodsMetricSourceV2Beta2(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metric': toJson_MetricIdentifierV2Beta2(obj.metric),\n        'target': toJson_MetricTargetV2Beta2(obj.target),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodsMetricSourceV2Beta2 = toJson_PodsMetricSourceV2Beta2;\n/**\n * Converts an object of type 'ResourceMetricSourceV2Beta2' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ResourceMetricSourceV2Beta2(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'target': toJson_MetricTargetV2Beta2(obj.target),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ResourceMetricSourceV2Beta2 = toJson_ResourceMetricSourceV2Beta2;\n/**\n * Converts an object of type 'ConfigMapNodeConfigSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ConfigMapNodeConfigSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'kubeletConfigKey': obj.kubeletConfigKey,\n        'name': obj.name,\n        'namespace': obj.namespace,\n        'resourceVersion': obj.resourceVersion,\n        'uid': obj.uid,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ConfigMapNodeConfigSource = toJson_ConfigMapNodeConfigSource;\n/**\n * Converts an object of type 'SecretReference' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SecretReference(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'namespace': obj.namespace,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SecretReference = toJson_SecretReference;\n/**\n * Converts an object of type 'NodeSelector' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NodeSelector(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'nodeSelectorTerms': (_a = obj.nodeSelectorTerms) === null || _a === void 0 ? void 0 : _a.map(y => toJson_NodeSelectorTerm(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NodeSelector = toJson_NodeSelector;\n/**\n * Converts an object of type 'NodeAffinity' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NodeAffinity(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'preferredDuringSchedulingIgnoredDuringExecution': (_a = obj.preferredDuringSchedulingIgnoredDuringExecution) === null || _a === void 0 ? void 0 : _a.map(y => toJson_PreferredSchedulingTerm(y)),\n        'requiredDuringSchedulingIgnoredDuringExecution': toJson_NodeSelector(obj.requiredDuringSchedulingIgnoredDuringExecution),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NodeAffinity = toJson_NodeAffinity;\n/**\n * Converts an object of type 'PodAffinity' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodAffinity(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'preferredDuringSchedulingIgnoredDuringExecution': (_a = obj.preferredDuringSchedulingIgnoredDuringExecution) === null || _a === void 0 ? void 0 : _a.map(y => toJson_WeightedPodAffinityTerm(y)),\n        'requiredDuringSchedulingIgnoredDuringExecution': (_b = obj.requiredDuringSchedulingIgnoredDuringExecution) === null || _b === void 0 ? void 0 : _b.map(y => toJson_PodAffinityTerm(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodAffinity = toJson_PodAffinity;\n/**\n * Converts an object of type 'PodAntiAffinity' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodAntiAffinity(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'preferredDuringSchedulingIgnoredDuringExecution': (_a = obj.preferredDuringSchedulingIgnoredDuringExecution) === null || _a === void 0 ? void 0 : _a.map(y => toJson_WeightedPodAffinityTerm(y)),\n        'requiredDuringSchedulingIgnoredDuringExecution': (_b = obj.requiredDuringSchedulingIgnoredDuringExecution) === null || _b === void 0 ? void 0 : _b.map(y => toJson_PodAffinityTerm(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodAntiAffinity = toJson_PodAntiAffinity;\n/**\n * Converts an object of type 'EnvVar' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EnvVar(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'value': obj.value,\n        'valueFrom': toJson_EnvVarSource(obj.valueFrom),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EnvVar = toJson_EnvVar;\n/**\n * Converts an object of type 'EnvFromSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EnvFromSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'configMapRef': toJson_ConfigMapEnvSource(obj.configMapRef),\n        'prefix': obj.prefix,\n        'secretRef': toJson_SecretEnvSource(obj.secretRef),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EnvFromSource = toJson_EnvFromSource;\n/**\n * Converts an object of type 'Lifecycle' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Lifecycle(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'postStart': toJson_Handler(obj.postStart),\n        'preStop': toJson_Handler(obj.preStop),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Lifecycle = toJson_Lifecycle;\n/**\n * Converts an object of type 'Probe' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Probe(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'exec': toJson_ExecAction(obj.exec),\n        'failureThreshold': obj.failureThreshold,\n        'httpGet': toJson_HttpGetAction(obj.httpGet),\n        'initialDelaySeconds': obj.initialDelaySeconds,\n        'periodSeconds': obj.periodSeconds,\n        'successThreshold': obj.successThreshold,\n        'tcpSocket': toJson_TcpSocketAction(obj.tcpSocket),\n        'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,\n        'timeoutSeconds': obj.timeoutSeconds,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Probe = toJson_Probe;\n/**\n * Converts an object of type 'ContainerPort' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ContainerPort(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'containerPort': obj.containerPort,\n        'hostIP': obj.hostIp,\n        'hostPort': obj.hostPort,\n        'name': obj.name,\n        'protocol': obj.protocol,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ContainerPort = toJson_ContainerPort;\n/**\n * Converts an object of type 'SecurityContext' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SecurityContext(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'allowPrivilegeEscalation': obj.allowPrivilegeEscalation,\n        'capabilities': toJson_Capabilities(obj.capabilities),\n        'privileged': obj.privileged,\n        'procMount': obj.procMount,\n        'readOnlyRootFilesystem': obj.readOnlyRootFilesystem,\n        'runAsGroup': obj.runAsGroup,\n        'runAsNonRoot': obj.runAsNonRoot,\n        'runAsUser': obj.runAsUser,\n        'seLinuxOptions': toJson_SeLinuxOptions(obj.seLinuxOptions),\n        'seccompProfile': toJson_SeccompProfile(obj.seccompProfile),\n        'windowsOptions': toJson_WindowsSecurityContextOptions(obj.windowsOptions),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SecurityContext = toJson_SecurityContext;\n/**\n * Converts an object of type 'VolumeDevice' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_VolumeDevice(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'devicePath': obj.devicePath,\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_VolumeDevice = toJson_VolumeDevice;\n/**\n * Converts an object of type 'VolumeMount' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_VolumeMount(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'mountPath': obj.mountPath,\n        'mountPropagation': obj.mountPropagation,\n        'name': obj.name,\n        'readOnly': obj.readOnly,\n        'subPath': obj.subPath,\n        'subPathExpr': obj.subPathExpr,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_VolumeMount = toJson_VolumeMount;\n/**\n * Converts an object of type 'PodDnsConfigOption' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodDnsConfigOption(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'value': obj.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodDnsConfigOption = toJson_PodDnsConfigOption;\n/**\n * Converts an object of type 'SeLinuxOptions' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SeLinuxOptions(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'level': obj.level,\n        'role': obj.role,\n        'type': obj.type,\n        'user': obj.user,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SeLinuxOptions = toJson_SeLinuxOptions;\n/**\n * Converts an object of type 'SeccompProfile' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SeccompProfile(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'localhostProfile': obj.localhostProfile,\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SeccompProfile = toJson_SeccompProfile;\n/**\n * Converts an object of type 'Sysctl' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Sysctl(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'value': obj.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Sysctl = toJson_Sysctl;\n/**\n * Converts an object of type 'WindowsSecurityContextOptions' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_WindowsSecurityContextOptions(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'gmsaCredentialSpec': obj.gmsaCredentialSpec,\n        'gmsaCredentialSpecName': obj.gmsaCredentialSpecName,\n        'hostProcess': obj.hostProcess,\n        'runAsUserName': obj.runAsUserName,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_WindowsSecurityContextOptions = toJson_WindowsSecurityContextOptions;\n/**\n * Converts an object of type 'AzureFileVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_AzureFileVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'readOnly': obj.readOnly,\n        'secretName': obj.secretName,\n        'shareName': obj.shareName,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_AzureFileVolumeSource = toJson_AzureFileVolumeSource;\n/**\n * Converts an object of type 'CephFsVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CephFsVolumeSource(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'monitors': (_a = obj.monitors) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'path': obj.path,\n        'readOnly': obj.readOnly,\n        'secretFile': obj.secretFile,\n        'secretRef': toJson_LocalObjectReference(obj.secretRef),\n        'user': obj.user,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CephFsVolumeSource = toJson_CephFsVolumeSource;\n/**\n * Converts an object of type 'CinderVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CinderVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'readOnly': obj.readOnly,\n        'secretRef': toJson_LocalObjectReference(obj.secretRef),\n        'volumeID': obj.volumeId,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CinderVolumeSource = toJson_CinderVolumeSource;\n/**\n * Converts an object of type 'ConfigMapVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ConfigMapVolumeSource(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'defaultMode': obj.defaultMode,\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KeyToPath(y)),\n        'name': obj.name,\n        'optional': obj.optional,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ConfigMapVolumeSource = toJson_ConfigMapVolumeSource;\n/**\n * Converts an object of type 'CsiVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CsiVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'driver': obj.driver,\n        'fsType': obj.fsType,\n        'nodePublishSecretRef': toJson_LocalObjectReference(obj.nodePublishSecretRef),\n        'readOnly': obj.readOnly,\n        'volumeAttributes': ((obj.volumeAttributes) === undefined) ? undefined : (Object.entries(obj.volumeAttributes).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CsiVolumeSource = toJson_CsiVolumeSource;\n/**\n * Converts an object of type 'DownwardApiVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_DownwardApiVolumeSource(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'defaultMode': obj.defaultMode,\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_DownwardApiVolumeFile(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_DownwardApiVolumeSource = toJson_DownwardApiVolumeSource;\n/**\n * Converts an object of type 'EmptyDirVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EmptyDirVolumeSource(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'medium': obj.medium,\n        'sizeLimit': (_a = obj.sizeLimit) === null || _a === void 0 ? void 0 : _a.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EmptyDirVolumeSource = toJson_EmptyDirVolumeSource;\n/**\n * Converts an object of type 'EphemeralVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EphemeralVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'volumeClaimTemplate': toJson_PersistentVolumeClaimTemplate(obj.volumeClaimTemplate),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EphemeralVolumeSource = toJson_EphemeralVolumeSource;\n/**\n * Converts an object of type 'FlexVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_FlexVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'driver': obj.driver,\n        'fsType': obj.fsType,\n        'options': ((obj.options) === undefined) ? undefined : (Object.entries(obj.options).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'readOnly': obj.readOnly,\n        'secretRef': toJson_LocalObjectReference(obj.secretRef),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_FlexVolumeSource = toJson_FlexVolumeSource;\n/**\n * Converts an object of type 'GitRepoVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_GitRepoVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'directory': obj.directory,\n        'repository': obj.repository,\n        'revision': obj.revision,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_GitRepoVolumeSource = toJson_GitRepoVolumeSource;\n/**\n * Converts an object of type 'GlusterfsVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_GlusterfsVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'endpoints': obj.endpoints,\n        'path': obj.path,\n        'readOnly': obj.readOnly,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_GlusterfsVolumeSource = toJson_GlusterfsVolumeSource;\n/**\n * Converts an object of type 'IscsiVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_IscsiVolumeSource(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'chapAuthDiscovery': obj.chapAuthDiscovery,\n        'chapAuthSession': obj.chapAuthSession,\n        'fsType': obj.fsType,\n        'initiatorName': obj.initiatorName,\n        'iqn': obj.iqn,\n        'iscsiInterface': obj.iscsiInterface,\n        'lun': obj.lun,\n        'portals': (_a = obj.portals) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'readOnly': obj.readOnly,\n        'secretRef': toJson_LocalObjectReference(obj.secretRef),\n        'targetPortal': obj.targetPortal,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_IscsiVolumeSource = toJson_IscsiVolumeSource;\n/**\n * Converts an object of type 'PersistentVolumeClaimVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PersistentVolumeClaimVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'claimName': obj.claimName,\n        'readOnly': obj.readOnly,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PersistentVolumeClaimVolumeSource = toJson_PersistentVolumeClaimVolumeSource;\n/**\n * Converts an object of type 'ProjectedVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ProjectedVolumeSource(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'defaultMode': obj.defaultMode,\n        'sources': (_a = obj.sources) === null || _a === void 0 ? void 0 : _a.map(y => toJson_VolumeProjection(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ProjectedVolumeSource = toJson_ProjectedVolumeSource;\n/**\n * Converts an object of type 'RbdVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_RbdVolumeSource(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'image': obj.image,\n        'keyring': obj.keyring,\n        'monitors': (_a = obj.monitors) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'pool': obj.pool,\n        'readOnly': obj.readOnly,\n        'secretRef': toJson_LocalObjectReference(obj.secretRef),\n        'user': obj.user,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_RbdVolumeSource = toJson_RbdVolumeSource;\n/**\n * Converts an object of type 'ScaleIoVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ScaleIoVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'gateway': obj.gateway,\n        'protectionDomain': obj.protectionDomain,\n        'readOnly': obj.readOnly,\n        'secretRef': toJson_LocalObjectReference(obj.secretRef),\n        'sslEnabled': obj.sslEnabled,\n        'storageMode': obj.storageMode,\n        'storagePool': obj.storagePool,\n        'system': obj.system,\n        'volumeName': obj.volumeName,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ScaleIoVolumeSource = toJson_ScaleIoVolumeSource;\n/**\n * Converts an object of type 'SecretVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SecretVolumeSource(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'defaultMode': obj.defaultMode,\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KeyToPath(y)),\n        'optional': obj.optional,\n        'secretName': obj.secretName,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SecretVolumeSource = toJson_SecretVolumeSource;\n/**\n * Converts an object of type 'StorageOsVolumeSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_StorageOsVolumeSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fsType': obj.fsType,\n        'readOnly': obj.readOnly,\n        'secretRef': toJson_LocalObjectReference(obj.secretRef),\n        'volumeName': obj.volumeName,\n        'volumeNamespace': obj.volumeNamespace,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_StorageOsVolumeSource = toJson_StorageOsVolumeSource;\n/**\n * Converts an object of type 'ScopedResourceSelectorRequirement' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ScopedResourceSelectorRequirement(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'operator': obj.operator,\n        'scopeName': obj.scopeName,\n        'values': (_a = obj.values) === null || _a === void 0 ? void 0 : _a.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ScopedResourceSelectorRequirement = toJson_ScopedResourceSelectorRequirement;\n/**\n * Converts an object of type 'ClientIpConfig' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ClientIpConfig(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'timeoutSeconds': obj.timeoutSeconds,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ClientIpConfig = toJson_ClientIpConfig;\n/**\n * Converts an object of type 'ForZone' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ForZone(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ForZone = toJson_ForZone;\n/**\n * Converts an object of type 'ForZoneV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ForZoneV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ForZoneV1Beta1 = toJson_ForZoneV1Beta1;\n/**\n * Converts an object of type 'NonResourcePolicyRuleV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NonResourcePolicyRuleV1Beta1(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'nonResourceURLs': (_a = obj.nonResourceUrLs) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'verbs': (_b = obj.verbs) === null || _b === void 0 ? void 0 : _b.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NonResourcePolicyRuleV1Beta1 = toJson_NonResourcePolicyRuleV1Beta1;\n/**\n * Converts an object of type 'ResourcePolicyRuleV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ResourcePolicyRuleV1Beta1(obj) {\n    var _a, _b, _c, _d;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiGroups': (_a = obj.apiGroups) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'clusterScope': obj.clusterScope,\n        'namespaces': (_b = obj.namespaces) === null || _b === void 0 ? void 0 : _b.map(y => y),\n        'resources': (_c = obj.resources) === null || _c === void 0 ? void 0 : _c.map(y => y),\n        'verbs': (_d = obj.verbs) === null || _d === void 0 ? void 0 : _d.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ResourcePolicyRuleV1Beta1 = toJson_ResourcePolicyRuleV1Beta1;\n/**\n * Converts an object of type 'SubjectV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SubjectV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'group': toJson_GroupSubjectV1Beta1(obj.group),\n        'kind': obj.kind,\n        'serviceAccount': toJson_ServiceAccountSubjectV1Beta1(obj.serviceAccount),\n        'user': toJson_UserSubjectV1Beta1(obj.user),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SubjectV1Beta1 = toJson_SubjectV1Beta1;\n/**\n * Converts an object of type 'LimitResponseV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_LimitResponseV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'queuing': toJson_QueuingConfigurationV1Beta1(obj.queuing),\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_LimitResponseV1Beta1 = toJson_LimitResponseV1Beta1;\n/**\n * Converts an object of type 'IngressServiceBackend' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_IngressServiceBackend(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'port': toJson_ServiceBackendPort(obj.port),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_IngressServiceBackend = toJson_IngressServiceBackend;\n/**\n * Converts an object of type 'HttpIngressRuleValue' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_HttpIngressRuleValue(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'paths': (_a = obj.paths) === null || _a === void 0 ? void 0 : _a.map(y => toJson_HttpIngressPath(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_HttpIngressRuleValue = toJson_HttpIngressRuleValue;\n/**\n * Converts an object of type 'NetworkPolicyPort' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NetworkPolicyPort(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'endPort': obj.endPort,\n        'port': (_a = obj.port) === null || _a === void 0 ? void 0 : _a.value,\n        'protocol': obj.protocol,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NetworkPolicyPort = toJson_NetworkPolicyPort;\n/**\n * Converts an object of type 'NetworkPolicyPeer' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NetworkPolicyPeer(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'ipBlock': toJson_IpBlock(obj.ipBlock),\n        'namespaceSelector': toJson_LabelSelector(obj.namespaceSelector),\n        'podSelector': toJson_LabelSelector(obj.podSelector),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NetworkPolicyPeer = toJson_NetworkPolicyPeer;\n/**\n * Converts an object of type 'IdRangeV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_IdRangeV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'max': obj.max,\n        'min': obj.min,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_IdRangeV1Beta1 = toJson_IdRangeV1Beta1;\n/**\n * Converts an object of type 'VolumeNodeResources' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_VolumeNodeResources(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'count': obj.count,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_VolumeNodeResources = toJson_VolumeNodeResources;\n/**\n * Converts an object of type 'WebhookConversion' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_WebhookConversion(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'clientConfig': toJson_WebhookClientConfig(obj.clientConfig),\n        'conversionReviewVersions': (_a = obj.conversionReviewVersions) === null || _a === void 0 ? void 0 : _a.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_WebhookConversion = toJson_WebhookConversion;\n/**\n * Converts an object of type 'CustomResourceColumnDefinition' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CustomResourceColumnDefinition(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'description': obj.description,\n        'format': obj.format,\n        'jsonPath': obj.jsonPath,\n        'name': obj.name,\n        'priority': obj.priority,\n        'type': obj.type,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CustomResourceColumnDefinition = toJson_CustomResourceColumnDefinition;\n/**\n * Converts an object of type 'CustomResourceValidation' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CustomResourceValidation(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'openAPIV3Schema': toJson_JsonSchemaProps(obj.openApiv3Schema),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CustomResourceValidation = toJson_CustomResourceValidation;\n/**\n * Converts an object of type 'CustomResourceSubresources' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CustomResourceSubresources(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'scale': toJson_CustomResourceSubresourceScale(obj.scale),\n        'status': obj.status,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CustomResourceSubresources = toJson_CustomResourceSubresources;\n/**\n * Converts an object of type 'HpaScalingPolicyV2Beta2' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_HpaScalingPolicyV2Beta2(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'periodSeconds': obj.periodSeconds,\n        'type': obj.type,\n        'value': obj.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_HpaScalingPolicyV2Beta2 = toJson_HpaScalingPolicyV2Beta2;\n/**\n * Converts an object of type 'MetricTargetV2Beta2' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_MetricTargetV2Beta2(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'averageUtilization': obj.averageUtilization,\n        'averageValue': (_a = obj.averageValue) === null || _a === void 0 ? void 0 : _a.value,\n        'type': obj.type,\n        'value': (_b = obj.value) === null || _b === void 0 ? void 0 : _b.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_MetricTargetV2Beta2 = toJson_MetricTargetV2Beta2;\n/**\n * Converts an object of type 'MetricIdentifierV2Beta2' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_MetricIdentifierV2Beta2(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'selector': toJson_LabelSelector(obj.selector),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_MetricIdentifierV2Beta2 = toJson_MetricIdentifierV2Beta2;\n/**\n * Converts an object of type 'NodeSelectorTerm' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NodeSelectorTerm(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'matchExpressions': (_a = obj.matchExpressions) === null || _a === void 0 ? void 0 : _a.map(y => toJson_NodeSelectorRequirement(y)),\n        'matchFields': (_b = obj.matchFields) === null || _b === void 0 ? void 0 : _b.map(y => toJson_NodeSelectorRequirement(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NodeSelectorTerm = toJson_NodeSelectorTerm;\n/**\n * Converts an object of type 'PreferredSchedulingTerm' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PreferredSchedulingTerm(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'preference': toJson_NodeSelectorTerm(obj.preference),\n        'weight': obj.weight,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PreferredSchedulingTerm = toJson_PreferredSchedulingTerm;\n/**\n * Converts an object of type 'WeightedPodAffinityTerm' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_WeightedPodAffinityTerm(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'podAffinityTerm': toJson_PodAffinityTerm(obj.podAffinityTerm),\n        'weight': obj.weight,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_WeightedPodAffinityTerm = toJson_WeightedPodAffinityTerm;\n/**\n * Converts an object of type 'PodAffinityTerm' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PodAffinityTerm(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'labelSelector': toJson_LabelSelector(obj.labelSelector),\n        'namespaceSelector': toJson_LabelSelector(obj.namespaceSelector),\n        'namespaces': (_a = obj.namespaces) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'topologyKey': obj.topologyKey,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PodAffinityTerm = toJson_PodAffinityTerm;\n/**\n * Converts an object of type 'EnvVarSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_EnvVarSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'configMapKeyRef': toJson_ConfigMapKeySelector(obj.configMapKeyRef),\n        'fieldRef': toJson_ObjectFieldSelector(obj.fieldRef),\n        'resourceFieldRef': toJson_ResourceFieldSelector(obj.resourceFieldRef),\n        'secretKeyRef': toJson_SecretKeySelector(obj.secretKeyRef),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_EnvVarSource = toJson_EnvVarSource;\n/**\n * Converts an object of type 'ConfigMapEnvSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ConfigMapEnvSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'optional': obj.optional,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ConfigMapEnvSource = toJson_ConfigMapEnvSource;\n/**\n * Converts an object of type 'SecretEnvSource' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SecretEnvSource(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'optional': obj.optional,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SecretEnvSource = toJson_SecretEnvSource;\n/**\n * Converts an object of type 'Handler' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Handler(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'exec': toJson_ExecAction(obj.exec),\n        'httpGet': toJson_HttpGetAction(obj.httpGet),\n        'tcpSocket': toJson_TcpSocketAction(obj.tcpSocket),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Handler = toJson_Handler;\n/**\n * Converts an object of type 'ExecAction' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ExecAction(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'command': (_a = obj.command) === null || _a === void 0 ? void 0 : _a.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ExecAction = toJson_ExecAction;\n/**\n * Converts an object of type 'HttpGetAction' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_HttpGetAction(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'host': obj.host,\n        'httpHeaders': (_a = obj.httpHeaders) === null || _a === void 0 ? void 0 : _a.map(y => toJson_HttpHeader(y)),\n        'path': obj.path,\n        'port': (_b = obj.port) === null || _b === void 0 ? void 0 : _b.value,\n        'scheme': obj.scheme,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_HttpGetAction = toJson_HttpGetAction;\n/**\n * Converts an object of type 'TcpSocketAction' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_TcpSocketAction(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'host': obj.host,\n        'port': (_a = obj.port) === null || _a === void 0 ? void 0 : _a.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_TcpSocketAction = toJson_TcpSocketAction;\n/**\n * Converts an object of type 'Capabilities' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_Capabilities(obj) {\n    var _a, _b;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'add': (_a = obj.add) === null || _a === void 0 ? void 0 : _a.map(y => y),\n        'drop': (_b = obj.drop) === null || _b === void 0 ? void 0 : _b.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_Capabilities = toJson_Capabilities;\n/**\n * Converts an object of type 'KeyToPath' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_KeyToPath(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'key': obj.key,\n        'mode': obj.mode,\n        'path': obj.path,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_KeyToPath = toJson_KeyToPath;\n/**\n * Converts an object of type 'DownwardApiVolumeFile' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_DownwardApiVolumeFile(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'fieldRef': toJson_ObjectFieldSelector(obj.fieldRef),\n        'mode': obj.mode,\n        'path': obj.path,\n        'resourceFieldRef': toJson_ResourceFieldSelector(obj.resourceFieldRef),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_DownwardApiVolumeFile = toJson_DownwardApiVolumeFile;\n/**\n * Converts an object of type 'PersistentVolumeClaimTemplate' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_PersistentVolumeClaimTemplate(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'metadata': toJson_ObjectMeta(obj.metadata),\n        'spec': toJson_PersistentVolumeClaimSpec(obj.spec),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_PersistentVolumeClaimTemplate = toJson_PersistentVolumeClaimTemplate;\n/**\n * Converts an object of type 'VolumeProjection' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_VolumeProjection(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'configMap': toJson_ConfigMapProjection(obj.configMap),\n        'downwardAPI': toJson_DownwardApiProjection(obj.downwardApi),\n        'secret': toJson_SecretProjection(obj.secret),\n        'serviceAccountToken': toJson_ServiceAccountTokenProjection(obj.serviceAccountToken),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_VolumeProjection = toJson_VolumeProjection;\n/**\n * Converts an object of type 'GroupSubjectV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_GroupSubjectV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_GroupSubjectV1Beta1 = toJson_GroupSubjectV1Beta1;\n/**\n * Converts an object of type 'ServiceAccountSubjectV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ServiceAccountSubjectV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'namespace': obj.namespace,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ServiceAccountSubjectV1Beta1 = toJson_ServiceAccountSubjectV1Beta1;\n/**\n * Converts an object of type 'UserSubjectV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_UserSubjectV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_UserSubjectV1Beta1 = toJson_UserSubjectV1Beta1;\n/**\n * Converts an object of type 'QueuingConfigurationV1Beta1' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_QueuingConfigurationV1Beta1(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'handSize': obj.handSize,\n        'queueLengthLimit': obj.queueLengthLimit,\n        'queues': obj.queues,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_QueuingConfigurationV1Beta1 = toJson_QueuingConfigurationV1Beta1;\n/**\n * Converts an object of type 'ServiceBackendPort' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ServiceBackendPort(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'number': obj.number,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ServiceBackendPort = toJson_ServiceBackendPort;\n/**\n * Converts an object of type 'HttpIngressPath' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_HttpIngressPath(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'backend': toJson_IngressBackend(obj.backend),\n        'path': obj.path,\n        'pathType': obj.pathType,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_HttpIngressPath = toJson_HttpIngressPath;\n/**\n * Converts an object of type 'IpBlock' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_IpBlock(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'cidr': obj.cidr,\n        'except': (_a = obj.except) === null || _a === void 0 ? void 0 : _a.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_IpBlock = toJson_IpBlock;\n/**\n * Converts an object of type 'JsonSchemaProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_JsonSchemaProps(obj) {\n    var _a, _b, _c, _d, _e, _f;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        '$ref': obj.ref,\n        '$schema': obj.schema,\n        'additionalItems': obj.additionalItems,\n        'additionalProperties': obj.additionalProperties,\n        'allOf': (_a = obj.allOf) === null || _a === void 0 ? void 0 : _a.map(y => toJson_JsonSchemaProps(y)),\n        'anyOf': (_b = obj.anyOf) === null || _b === void 0 ? void 0 : _b.map(y => toJson_JsonSchemaProps(y)),\n        'default': obj.default,\n        'definitions': ((obj.definitions) === undefined) ? undefined : (Object.entries(obj.definitions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_JsonSchemaProps(i[1]) }), {})),\n        'dependencies': ((obj.dependencies) === undefined) ? undefined : (Object.entries(obj.dependencies).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),\n        'description': obj.description,\n        'enum': (_c = obj.enum) === null || _c === void 0 ? void 0 : _c.map(y => y),\n        'example': obj.example,\n        'exclusiveMaximum': obj.exclusiveMaximum,\n        'exclusiveMinimum': obj.exclusiveMinimum,\n        'externalDocs': toJson_ExternalDocumentation(obj.externalDocs),\n        'format': obj.format,\n        'id': obj.id,\n        'items': obj.items,\n        'maxItems': obj.maxItems,\n        'maxLength': obj.maxLength,\n        'maxProperties': obj.maxProperties,\n        'maximum': obj.maximum,\n        'minItems': obj.minItems,\n        'minLength': obj.minLength,\n        'minProperties': obj.minProperties,\n        'minimum': obj.minimum,\n        'multipleOf': obj.multipleOf,\n        'not': toJson_JsonSchemaProps(obj.not),\n        'nullable': obj.nullable,\n        'oneOf': (_d = obj.oneOf) === null || _d === void 0 ? void 0 : _d.map(y => toJson_JsonSchemaProps(y)),\n        'pattern': obj.pattern,\n        'patternProperties': ((obj.patternProperties) === undefined) ? undefined : (Object.entries(obj.patternProperties).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_JsonSchemaProps(i[1]) }), {})),\n        'properties': ((obj.properties) === undefined) ? undefined : (Object.entries(obj.properties).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_JsonSchemaProps(i[1]) }), {})),\n        'required': (_e = obj.required) === null || _e === void 0 ? void 0 : _e.map(y => y),\n        'title': obj.title,\n        'type': obj.type,\n        'uniqueItems': obj.uniqueItems,\n        'x-kubernetes-embedded-resource': obj.xKubernetesEmbeddedResource,\n        'x-kubernetes-int-or-string': obj.xKubernetesIntOrString,\n        'x-kubernetes-list-map-keys': (_f = obj.xKubernetesListMapKeys) === null || _f === void 0 ? void 0 : _f.map(y => y),\n        'x-kubernetes-list-type': obj.xKubernetesListType,\n        'x-kubernetes-map-type': obj.xKubernetesMapType,\n        'x-kubernetes-preserve-unknown-fields': obj.xKubernetesPreserveUnknownFields,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_JsonSchemaProps = toJson_JsonSchemaProps;\n/**\n * Converts an object of type 'CustomResourceSubresourceScale' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_CustomResourceSubresourceScale(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'labelSelectorPath': obj.labelSelectorPath,\n        'specReplicasPath': obj.specReplicasPath,\n        'statusReplicasPath': obj.statusReplicasPath,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_CustomResourceSubresourceScale = toJson_CustomResourceSubresourceScale;\n/**\n * Converts an object of type 'NodeSelectorRequirement' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_NodeSelectorRequirement(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'key': obj.key,\n        'operator': obj.operator,\n        'values': (_a = obj.values) === null || _a === void 0 ? void 0 : _a.map(y => y),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_NodeSelectorRequirement = toJson_NodeSelectorRequirement;\n/**\n * Converts an object of type 'ConfigMapKeySelector' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ConfigMapKeySelector(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'key': obj.key,\n        'name': obj.name,\n        'optional': obj.optional,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ConfigMapKeySelector = toJson_ConfigMapKeySelector;\n/**\n * Converts an object of type 'ObjectFieldSelector' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ObjectFieldSelector(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'apiVersion': obj.apiVersion,\n        'fieldPath': obj.fieldPath,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ObjectFieldSelector = toJson_ObjectFieldSelector;\n/**\n * Converts an object of type 'ResourceFieldSelector' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ResourceFieldSelector(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'containerName': obj.containerName,\n        'divisor': (_a = obj.divisor) === null || _a === void 0 ? void 0 : _a.value,\n        'resource': obj.resource,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ResourceFieldSelector = toJson_ResourceFieldSelector;\n/**\n * Converts an object of type 'SecretKeySelector' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SecretKeySelector(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'key': obj.key,\n        'name': obj.name,\n        'optional': obj.optional,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SecretKeySelector = toJson_SecretKeySelector;\n/**\n * Converts an object of type 'HttpHeader' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_HttpHeader(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'name': obj.name,\n        'value': obj.value,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_HttpHeader = toJson_HttpHeader;\n/**\n * Converts an object of type 'ConfigMapProjection' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ConfigMapProjection(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KeyToPath(y)),\n        'name': obj.name,\n        'optional': obj.optional,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ConfigMapProjection = toJson_ConfigMapProjection;\n/**\n * Converts an object of type 'DownwardApiProjection' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_DownwardApiProjection(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_DownwardApiVolumeFile(y)),\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_DownwardApiProjection = toJson_DownwardApiProjection;\n/**\n * Converts an object of type 'SecretProjection' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_SecretProjection(obj) {\n    var _a;\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'items': (_a = obj.items) === null || _a === void 0 ? void 0 : _a.map(y => toJson_KeyToPath(y)),\n        'name': obj.name,\n        'optional': obj.optional,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_SecretProjection = toJson_SecretProjection;\n/**\n * Converts an object of type 'ServiceAccountTokenProjection' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ServiceAccountTokenProjection(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'audience': obj.audience,\n        'expirationSeconds': obj.expirationSeconds,\n        'path': obj.path,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ServiceAccountTokenProjection = toJson_ServiceAccountTokenProjection;\n/**\n * Converts an object of type 'ExternalDocumentation' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nfunction toJson_ExternalDocumentation(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        'description': obj.description,\n        'url': obj.url,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});\n}\nexports.toJson_ExternalDocumentation = toJson_ExternalDocumentation;\n/* eslint-enable max-len, quote-props */\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./base\"), exports);\n__exportStar(require(\"./config-map\"), exports);\n__exportStar(require(\"./container\"), exports);\n__exportStar(require(\"./deployment\"), exports);\n__exportStar(require(\"./job\"), exports);\n__exportStar(require(\"./pod\"), exports);\n__exportStar(require(\"./secret\"), exports);\n__exportStar(require(\"./service-account\"), exports);\n__exportStar(require(\"./service\"), exports);\n__exportStar(require(\"./stateful-set\"), exports);\n__exportStar(require(\"./volume\"), exports);\n__exportStar(require(\"./ingress\"), exports);\n__exportStar(require(\"./probe\"), exports);\n__exportStar(require(\"./pvc\"), exports);\n__exportStar(require(\"./pv\"), exports);\n__exportStar(require(\"./handler\"), exports);\n__exportStar(require(\"./workload\"), exports);\n__exportStar(require(\"./daemon-set\"), exports);\n__exportStar(require(\"./role\"), exports);\n__exportStar(require(\"./role-binding\"), exports);\n__exportStar(require(\"./network-policy\"), exports);\n__exportStar(require(\"./namespace\"), exports);\n__exportStar(require(\"./api-resource.generated\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEseUNBQXVCO0FBQ3ZCLCtDQUE2QjtBQUM3Qiw4Q0FBNEI7QUFDNUIsK0NBQTZCO0FBQzdCLHdDQUFzQjtBQUN0Qix3Q0FBc0I7QUFDdEIsMkNBQXlCO0FBQ3pCLG9EQUFrQztBQUNsQyw0Q0FBMEI7QUFDMUIsaURBQStCO0FBQy9CLDJDQUF5QjtBQUN6Qiw0Q0FBMEI7QUFDMUIsMENBQXdCO0FBQ3hCLHdDQUFzQjtBQUN0Qix1Q0FBcUI7QUFDckIsNENBQTBCO0FBQzFCLDZDQUEyQjtBQUMzQiwrQ0FBNkI7QUFDN0IseUNBQXVCO0FBQ3ZCLGlEQUErQjtBQUMvQixtREFBaUM7QUFDakMsOENBQTRCO0FBRTVCLDJEQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYmFzZSc7XG5leHBvcnQgKiBmcm9tICcuL2NvbmZpZy1tYXAnO1xuZXhwb3J0ICogZnJvbSAnLi9jb250YWluZXInO1xuZXhwb3J0ICogZnJvbSAnLi9kZXBsb3ltZW50JztcbmV4cG9ydCAqIGZyb20gJy4vam9iJztcbmV4cG9ydCAqIGZyb20gJy4vcG9kJztcbmV4cG9ydCAqIGZyb20gJy4vc2VjcmV0JztcbmV4cG9ydCAqIGZyb20gJy4vc2VydmljZS1hY2NvdW50JztcbmV4cG9ydCAqIGZyb20gJy4vc2VydmljZSc7XG5leHBvcnQgKiBmcm9tICcuL3N0YXRlZnVsLXNldCc7XG5leHBvcnQgKiBmcm9tICcuL3ZvbHVtZSc7XG5leHBvcnQgKiBmcm9tICcuL2luZ3Jlc3MnO1xuZXhwb3J0ICogZnJvbSAnLi9wcm9iZSc7XG5leHBvcnQgKiBmcm9tICcuL3B2Yyc7XG5leHBvcnQgKiBmcm9tICcuL3B2JztcbmV4cG9ydCAqIGZyb20gJy4vaGFuZGxlcic7XG5leHBvcnQgKiBmcm9tICcuL3dvcmtsb2FkJztcbmV4cG9ydCAqIGZyb20gJy4vZGFlbW9uLXNldCc7XG5leHBvcnQgKiBmcm9tICcuL3JvbGUnO1xuZXhwb3J0ICogZnJvbSAnLi9yb2xlLWJpbmRpbmcnO1xuZXhwb3J0ICogZnJvbSAnLi9uZXR3b3JrLXBvbGljeSc7XG5leHBvcnQgKiBmcm9tICcuL25hbWVzcGFjZSc7XG5cbmV4cG9ydCAqIGZyb20gJy4vYXBpLXJlc291cmNlLmdlbmVyYXRlZCc7XG4iXX0=","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IngressBackend = exports.Ingress = exports.HttpIngressPathType = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst base = require(\"./base\");\nconst k8s = require(\"./imports/k8s\");\n/**\n * Specify how the path is matched against request paths.\n *\n * @see https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types\n */\nvar HttpIngressPathType;\n(function (HttpIngressPathType) {\n    /**\n     * Matches the URL path exactly.\n     */\n    HttpIngressPathType[\"PREFIX\"] = \"Prefix\";\n    /**\n     * Matches based on a URL path prefix split by '/'.\n     */\n    HttpIngressPathType[\"EXACT\"] = \"Exact\";\n    /**\n     * Matching is specified by the underlying IngressClass.\n     */\n    HttpIngressPathType[\"IMPLEMENTATION_SPECIFIC\"] = \"ImplementationSpecific\";\n})(HttpIngressPathType = exports.HttpIngressPathType || (exports.HttpIngressPathType = {}));\n/**\n * Ingress is a collection of rules that allow inbound connections to reach the\n * endpoints defined by a backend. An Ingress can be configured to give services\n * externally-reachable urls, load balance traffic, terminate SSL, offer name\n * based virtual hosting etc.\n */\nclass Ingress extends base.Resource {\n    constructor(scope, id, props = {}) {\n        var _c;\n        super(scope, id);\n        this.resourceType = 'ingresses';\n        this._rulesPerHost = {};\n        this._tlsConfig = [];\n        this.apiObject = new k8s.KubeIngress(this, 'Resource', {\n            metadata: props.metadata,\n            spec: {\n                defaultBackend: cdk8s_1.Lazy.any({ produce: () => { var _c; return (_c = this._defaultBackend) === null || _c === void 0 ? void 0 : _c._toKube(); } }),\n                rules: cdk8s_1.Lazy.any({ produce: () => this.synthRules() }),\n                tls: cdk8s_1.Lazy.any({ produce: () => this.tlsConfig() }),\n            },\n        });\n        if (props.defaultBackend) {\n            this.addDefaultBackend(props.defaultBackend);\n        }\n        this.addRules(...(_c = props.rules) !== null && _c !== void 0 ? _c : []);\n        if (props.tls) {\n            this.addTls(props.tls);\n        }\n        this.node.addValidation({ validate: () => this._validate() });\n    }\n    _validate() {\n        if (!this._defaultBackend && Object.keys(this._rulesPerHost).length === 0) {\n            return ['ingress with no rules or default backend'];\n        }\n        return [];\n    }\n    /**\n     * Defines the default backend for this ingress. A default backend capable of\n     * servicing requests that don't match any rule.\n     *\n     * @param backend The backend to use for requests that do not match any rule.\n     */\n    addDefaultBackend(backend) {\n        this.addRules({ backend });\n    }\n    /**\n     * Specify a default backend for a specific host name. This backend will be used as a catch-all for requests\n     * targeted to this host name (the `Host` header matches this value).\n     *\n     * @param host The host name to match\n     * @param backend The backend to route to\n     */\n    addHostDefaultBackend(host, backend) {\n        if (!host) {\n            throw new Error('host must not be an empty string');\n        }\n        this.addRules({ host, backend });\n    }\n    /**\n     * Adds an ingress rule applied to requests to a specific host and a specific\n     * HTTP path (the `Host` header matches this value).\n     *\n     * @param host The host name\n     * @param path The HTTP path\n     * @param backend The backend to route requests to\n     * @param pathType How the path is matched against request paths\n     */\n    addHostRule(host, path, backend, pathType) {\n        if (!host) {\n            throw new Error('host must not be an empty string');\n        }\n        this.addRules({ host, backend, path, pathType });\n    }\n    /**\n     * Adds an ingress rule applied to requests sent to a specific HTTP path.\n     *\n     * @param path The HTTP path\n     * @param backend The backend to route requests to\n     * @param pathType How the path is matched against request paths\n     */\n    addRule(path, backend, pathType) {\n        this.addRules({ backend, path, pathType });\n    }\n    /**\n     * Adds rules to this ingress.\n     * @param rules The rules to add\n     */\n    addRules(...rules) {\n        var _c, _d, _e, _f;\n        for (const rule of rules) {\n            // default backend is not really a rule\n            if (!rule.host && !rule.path) {\n                if (this._defaultBackend) {\n                    throw new Error('a default backend is already defined for this ingress');\n                }\n                this._defaultBackend = rule.backend;\n                continue;\n            }\n            const host = (_c = rule.host) !== null && _c !== void 0 ? _c : '';\n            const backend = rule.backend;\n            const path = (_d = rule.path) !== null && _d !== void 0 ? _d : '/';\n            const pathType = (_e = rule.pathType) !== null && _e !== void 0 ? _e : HttpIngressPathType.PREFIX;\n            if (path && !path.startsWith('/')) {\n                throw new Error(`ingress paths must begin with a \"/\": ${path}`);\n            }\n            const routes = this._rulesPerHost[host] = (_f = this._rulesPerHost[host]) !== null && _f !== void 0 ? _f : [];\n            // check if we already have a rule for this host/path\n            if (routes.find(r => r.path === path)) {\n                throw new Error(`there is already an ingress rule for ${host}${path}`);\n            }\n            routes.push({\n                backend: backend._toKube(),\n                path,\n                pathType,\n            });\n        }\n    }\n    synthRules() {\n        const rules = new Array();\n        for (const [host, paths] of Object.entries(this._rulesPerHost)) {\n            rules.push({\n                host: host ? host : undefined,\n                http: { paths: paths.sort(sortByPath) },\n            });\n        }\n        return rules.length > 0 ? rules : undefined;\n    }\n    addTls(tls) {\n        this._tlsConfig.push(...tls);\n    }\n    tlsConfig() {\n        var _c;\n        if (this._tlsConfig.length == 0) {\n            return undefined;\n        }\n        const tls = new Array();\n        for (const entry of this._tlsConfig) {\n            tls.push({\n                hosts: entry.hosts,\n                secretName: (_c = entry.secret) === null || _c === void 0 ? void 0 : _c.name,\n            });\n        }\n        return tls;\n    }\n}\nexports.Ingress = Ingress;\n_a = JSII_RTTI_SYMBOL_1;\nIngress[_a] = { fqn: \"cdk8s-plus-22.Ingress\", version: \"2.0.0-rc.2\" };\n/**\n * The backend for an ingress path.\n */\nclass IngressBackend {\n    constructor(backend) {\n        this.backend = backend;\n    }\n    /**\n     * A Kubernetes `Service` to use as the backend for this path.\n     * @param serv The service object.\n     */\n    static fromService(serv, options = {}) {\n        if (serv.ports.length === 0) {\n            throw new Error('service does not expose any ports');\n        }\n        let servicePort;\n        if (serv.ports.length === 1) {\n            servicePort = serv.ports[0].port;\n        }\n        else {\n            if (options.port !== undefined) {\n                const found = serv.ports.find(p => p.port === options.port);\n                if (found) {\n                    servicePort = found.port;\n                }\n                else {\n                    throw new Error(`service exposes ports ${serv.ports.map(p => p.port).join(',')} but backend is defined to use port ${options.port}`);\n                }\n            }\n            else {\n                throw new Error(`unable to determine service port since service exposes multiple ports: ${serv.ports.map(x => x.port).join(',')}`);\n            }\n        }\n        if (options.port !== undefined && servicePort !== options.port) {\n            throw new Error(`backend defines port ${options.port} but service exposes port ${servicePort}`);\n        }\n        return new IngressBackend({\n            service: {\n                name: serv.name,\n                port: { number: servicePort },\n            },\n        });\n    }\n    /**\n     * A Resource backend is an ObjectRef to another Kubernetes resource\n     * within the same namespace as the Ingress object.\n     * A common usage for a Resource backend is to ingress data to an object\n     * storage backend with static assets.\n     */\n    static fromResource(resource) {\n        return new IngressBackend({\n            resource: {\n                kind: resource.kind,\n                name: resource.name,\n                apiGroup: resource.apiGroup,\n            },\n        });\n    }\n    /**\n     * @internal\n     */\n    _toKube() { return this.backend; }\n}\nexports.IngressBackend = IngressBackend;\n_b = JSII_RTTI_SYMBOL_1;\nIngressBackend[_b] = { fqn: \"cdk8s-plus-22.IngressBackend\", version: \"2.0.0-rc.2\" };\nfunction sortByPath(lhs, rhs) {\n    var _c, _d;\n    const p1 = (_c = lhs.path) !== null && _c !== void 0 ? _c : '';\n    const p2 = (_d = rhs.path) !== null && _d !== void 0 ? _d : '';\n    return p1.localeCompare(p2);\n}\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Job = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst k8s = require(\"./imports/k8s\");\nconst pod = require(\"./pod\");\nconst workload = require(\"./workload\");\n/**\n * A Job creates one or more Pods and ensures that a specified number of them successfully terminate. As pods successfully complete,\n * the Job tracks the successful completions. When a specified number of successful completions is reached, the task (ie, Job) is complete.\n * Deleting a Job will clean up the Pods it created. A simple case is to create one Job object in order to reliably run one Pod to completion.\n * The Job object will start a new Pod if the first Pod fails or is deleted (for example due to a node hardware failure or a node reboot).\n * You can also use a Job to run multiple Pods in parallel.\n */\nclass Job extends workload.Workload {\n    constructor(scope, id, props = {}) {\n        super(scope, id, {\n            restartPolicy: pod.RestartPolicy.NEVER,\n            select: false,\n            ...props,\n        });\n        this.resourceType = 'jobs';\n        this.apiObject = new k8s.KubeJob(this, 'Resource', {\n            metadata: props.metadata,\n            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),\n        });\n        this.activeDeadline = props.activeDeadline;\n        this.backoffLimit = props.backoffLimit;\n        this.ttlAfterFinished = props.ttlAfterFinished;\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        var _b;\n        return {\n            template: {\n                metadata: this.podMetadata.toJson(),\n                spec: this._toPodSpec(),\n            },\n            activeDeadlineSeconds: (_b = this.activeDeadline) === null || _b === void 0 ? void 0 : _b.toSeconds(),\n            backoffLimit: this.backoffLimit,\n            ttlSecondsAfterFinished: this.ttlAfterFinished ? this.ttlAfterFinished.toSeconds() : undefined,\n        };\n    }\n}\nexports.Job = Job;\n_a = JSII_RTTI_SYMBOL_1;\nJob[_a] = { fqn: \"cdk8s-plus-22.Job\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9iLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2pvYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGlDQUFrRDtBQUVsRCxxQ0FBcUM7QUFDckMsNkJBQTZCO0FBQzdCLHVDQUF1QztBQW9DdkM7Ozs7OztHQU1HO0FBQ0gsTUFBYSxHQUFJLFNBQVEsUUFBUSxDQUFDLFFBQVE7SUF3QnhDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBa0IsRUFBRTtRQUM1RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUs7WUFDdEMsTUFBTSxFQUFFLEtBQUs7WUFDYixHQUFHLEtBQUs7U0FDVCxDQUFDLENBQUM7UUFQVyxpQkFBWSxHQUFHLE1BQU0sQ0FBQztRQVNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ2pELFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixJQUFJLEVBQUUsWUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztTQUNsRCxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7UUFDM0MsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7SUFFakQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTzs7UUFDWixPQUFPO1lBQ0wsUUFBUSxFQUFFO2dCQUNSLFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtnQkFDbkMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUU7YUFDeEI7WUFDRCxxQkFBcUIsUUFBRSxJQUFJLENBQUMsY0FBYywwQ0FBRSxTQUFTLEVBQUU7WUFDdkQsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQy9CLHVCQUF1QixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTO1NBQy9GLENBQUM7SUFDSixDQUFDOztBQXZESCxrQkF5REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcGlPYmplY3QsIExhenksIER1cmF0aW9uIH0gZnJvbSAnY2RrOHMnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBrOHMgZnJvbSAnLi9pbXBvcnRzL2s4cyc7XG5pbXBvcnQgKiBhcyBwb2QgZnJvbSAnLi9wb2QnO1xuaW1wb3J0ICogYXMgd29ya2xvYWQgZnJvbSAnLi93b3JrbG9hZCc7XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgYEpvYmAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSm9iUHJvcHMgZXh0ZW5kcyB3b3JrbG9hZC5Xb3JrbG9hZFByb3BzIHtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBkdXJhdGlvbiB0aGUgam9iIG1heSBiZSBhY3RpdmUgYmVmb3JlIHRoZSBzeXN0ZW0gdHJpZXMgdG8gdGVybWluYXRlIGl0LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIElmIHVuc2V0LCB0aGVuIHRoZXJlIGlzIG5vIGRlYWRsaW5lLlxuICAgKi9cbiAgcmVhZG9ubHkgYWN0aXZlRGVhZGxpbmU/OiBEdXJhdGlvbjtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgcmV0cmllcyBiZWZvcmUgbWFya2luZyB0aGlzIGpvYiBmYWlsZWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gSWYgbm90IHNldCwgc3lzdGVtIGRlZmF1bHRzIHRvIDYuXG4gICAqL1xuICByZWFkb25seSBiYWNrb2ZmTGltaXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIExpbWl0cyB0aGUgbGlmZXRpbWUgb2YgYSBKb2IgdGhhdCBoYXMgZmluaXNoZWQgZXhlY3V0aW9uIChlaXRoZXIgQ29tcGxldGVcbiAgICogb3IgRmFpbGVkKS4gSWYgdGhpcyBmaWVsZCBpcyBzZXQsIGFmdGVyIHRoZSBKb2IgZmluaXNoZXMsIGl0IGlzIGVsaWdpYmxlIHRvXG4gICAqIGJlIGF1dG9tYXRpY2FsbHkgZGVsZXRlZC4gV2hlbiB0aGUgSm9iIGlzIGJlaW5nIGRlbGV0ZWQsIGl0cyBsaWZlY3ljbGVcbiAgICogZ3VhcmFudGVlcyAoZS5nLiBmaW5hbGl6ZXJzKSB3aWxsIGJlIGhvbm9yZWQuIElmIHRoaXMgZmllbGQgaXMgc2V0IHRvIHplcm8sXG4gICAqIHRoZSBKb2IgYmVjb21lcyBlbGlnaWJsZSB0byBiZSBkZWxldGVkIGltbWVkaWF0ZWx5IGFmdGVyIGl0IGZpbmlzaGVzLiBUaGlzXG4gICAqIGZpZWxkIGlzIGFscGhhLWxldmVsIGFuZCBpcyBvbmx5IGhvbm9yZWQgYnkgc2VydmVycyB0aGF0IGVuYWJsZSB0aGVcbiAgICogYFRUTEFmdGVyRmluaXNoZWRgIGZlYXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gSWYgdGhpcyBmaWVsZCBpcyB1bnNldCwgdGhlIEpvYiB3b24ndCBiZSBhdXRvbWF0aWNhbGx5IGRlbGV0ZWQuXG4gICAqL1xuICByZWFkb25seSB0dGxBZnRlckZpbmlzaGVkPzogRHVyYXRpb247XG5cbn1cblxuLyoqXG4gKiBBIEpvYiBjcmVhdGVzIG9uZSBvciBtb3JlIFBvZHMgYW5kIGVuc3VyZXMgdGhhdCBhIHNwZWNpZmllZCBudW1iZXIgb2YgdGhlbSBzdWNjZXNzZnVsbHkgdGVybWluYXRlLiBBcyBwb2RzIHN1Y2Nlc3NmdWxseSBjb21wbGV0ZSxcbiAqIHRoZSBKb2IgdHJhY2tzIHRoZSBzdWNjZXNzZnVsIGNvbXBsZXRpb25zLiBXaGVuIGEgc3BlY2lmaWVkIG51bWJlciBvZiBzdWNjZXNzZnVsIGNvbXBsZXRpb25zIGlzIHJlYWNoZWQsIHRoZSB0YXNrIChpZSwgSm9iKSBpcyBjb21wbGV0ZS5cbiAqIERlbGV0aW5nIGEgSm9iIHdpbGwgY2xlYW4gdXAgdGhlIFBvZHMgaXQgY3JlYXRlZC4gQSBzaW1wbGUgY2FzZSBpcyB0byBjcmVhdGUgb25lIEpvYiBvYmplY3QgaW4gb3JkZXIgdG8gcmVsaWFibHkgcnVuIG9uZSBQb2QgdG8gY29tcGxldGlvbi5cbiAqIFRoZSBKb2Igb2JqZWN0IHdpbGwgc3RhcnQgYSBuZXcgUG9kIGlmIHRoZSBmaXJzdCBQb2QgZmFpbHMgb3IgaXMgZGVsZXRlZCAoZm9yIGV4YW1wbGUgZHVlIHRvIGEgbm9kZSBoYXJkd2FyZSBmYWlsdXJlIG9yIGEgbm9kZSByZWJvb3QpLlxuICogWW91IGNhbiBhbHNvIHVzZSBhIEpvYiB0byBydW4gbXVsdGlwbGUgUG9kcyBpbiBwYXJhbGxlbC5cbiAqL1xuZXhwb3J0IGNsYXNzIEpvYiBleHRlbmRzIHdvcmtsb2FkLldvcmtsb2FkIHtcblxuICAvKipcbiAgICogRHVyYXRpb24gYmVmb3JlIGpvYiBpcyB0ZXJtaW5hdGVkLiBJZiB1bmRlZmluZWQsIHRoZXJlIGlzIG5vIGRlYWRsaW5lLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGFjdGl2ZURlYWRsaW5lPzogRHVyYXRpb247XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByZXRyaWVzIGJlZm9yZSBtYXJraW5nIGZhaWxlZC5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBiYWNrb2ZmTGltaXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRUTCBiZWZvcmUgdGhlIGpvYiBpcyBkZWxldGVkIGFmdGVyIGl0IGlzIGZpbmlzaGVkLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHR0bEFmdGVyRmluaXNoZWQ/OiBEdXJhdGlvbjtcblxuICAvKipcbiAgICogQHNlZSBiYXNlLlJlc291cmNlLmFwaU9iamVjdFxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGFwaU9iamVjdDogQXBpT2JqZWN0O1xuXG4gIHB1YmxpYyByZWFkb25seSByZXNvdXJjZVR5cGUgPSAnam9icyc7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEpvYlByb3BzID0ge30pIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIHJlc3RhcnRQb2xpY3k6IHBvZC5SZXN0YXJ0UG9saWN5Lk5FVkVSLFxuICAgICAgc2VsZWN0OiBmYWxzZSxcbiAgICAgIC4uLnByb3BzLFxuICAgIH0pO1xuXG4gICAgdGhpcy5hcGlPYmplY3QgPSBuZXcgazhzLkt1YmVKb2IodGhpcywgJ1Jlc291cmNlJywge1xuICAgICAgbWV0YWRhdGE6IHByb3BzLm1ldGFkYXRhLFxuICAgICAgc3BlYzogTGF6eS5hbnkoeyBwcm9kdWNlOiAoKSA9PiB0aGlzLl90b0t1YmUoKSB9KSxcbiAgICB9KTtcblxuICAgIHRoaXMuYWN0aXZlRGVhZGxpbmUgPSBwcm9wcy5hY3RpdmVEZWFkbGluZTtcbiAgICB0aGlzLmJhY2tvZmZMaW1pdCA9IHByb3BzLmJhY2tvZmZMaW1pdDtcbiAgICB0aGlzLnR0bEFmdGVyRmluaXNoZWQgPSBwcm9wcy50dGxBZnRlckZpbmlzaGVkO1xuXG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgX3RvS3ViZSgpOiBrOHMuSm9iU3BlYyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRlbXBsYXRlOiB7XG4gICAgICAgIG1ldGFkYXRhOiB0aGlzLnBvZE1ldGFkYXRhLnRvSnNvbigpLFxuICAgICAgICBzcGVjOiB0aGlzLl90b1BvZFNwZWMoKSxcbiAgICAgIH0sXG4gICAgICBhY3RpdmVEZWFkbGluZVNlY29uZHM6IHRoaXMuYWN0aXZlRGVhZGxpbmU/LnRvU2Vjb25kcygpLFxuICAgICAgYmFja29mZkxpbWl0OiB0aGlzLmJhY2tvZmZMaW1pdCxcbiAgICAgIHR0bFNlY29uZHNBZnRlckZpbmlzaGVkOiB0aGlzLnR0bEFmdGVyRmluaXNoZWQgPyB0aGlzLnR0bEFmdGVyRmluaXNoZWQudG9TZWNvbmRzKCkgOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgfVxuXG59XG4iXX0=","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Namespaces = exports.Namespace = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst constructs_1 = require(\"constructs\");\nconst base = require(\"./base\");\nconst k8s = require(\"./imports/k8s\");\nconst pod = require(\"./pod\");\n/**\n * In Kubernetes, namespaces provides a mechanism for isolating groups of resources within a single cluster.\n * Names of resources need to be unique within a namespace, but not across namespaces.\n * Namespace-based scoping is applicable only for namespaced objects (e.g. Deployments, Services, etc) and\n * not for cluster-wide objects (e.g. StorageClass, Nodes, PersistentVolumes, etc).\n */\nclass Namespace extends base.Resource {\n    constructor(scope, id, props = {}) {\n        super(scope, id);\n        this.resourceType = 'namespaces';\n        this.apiObject = new k8s.KubeNamespace(this, 'Resource', {\n            metadata: props.metadata,\n            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),\n        });\n        this._pods = pod.Pods.all(this, 'Pods', {\n            namespaces: Namespaces.select(this, 'Namespaces', { names: [this.name] }),\n        });\n    }\n    /**\n     * @see INamespaceSelector.toNamespaceSelectorConfig()\n     */\n    toNamespaceSelectorConfig() {\n        return { names: [this.name] };\n    }\n    /**\n     * @see INetworkPolicyPeer.toNetworkPolicyPeerConfig()\n     */\n    toNetworkPolicyPeerConfig() {\n        return this._pods.toNetworkPolicyPeerConfig();\n    }\n    /**\n     * @see INetworkPolicyPeer.toPodSelector()\n     */\n    toPodSelector() {\n        return this._pods.toPodSelector();\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        return {};\n    }\n}\nexports.Namespace = Namespace;\n_a = JSII_RTTI_SYMBOL_1;\nNamespace[_a] = { fqn: \"cdk8s-plus-22.Namespace\", version: \"2.0.0-rc.2\" };\n/**\n * @see https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/#automatic-labelling\n */\nNamespace.NAME_LABEL = 'kubernetes.io/metadata.name';\n/**\n * Represents a group of namespaces.\n */\nclass Namespaces extends constructs_1.Construct {\n    constructor(scope, id, expressions, names, labels) {\n        super(scope, id);\n        this.expressions = expressions;\n        this.names = names;\n        this.labels = labels;\n        this._pods = pod.Pods.all(this, 'Pods', { namespaces: this });\n    }\n    /**\n     * Select specific namespaces.\n     */\n    static select(scope, id, options) {\n        return new Namespaces(scope, id, options.expressions, options.names, options.labels);\n    }\n    /**\n     * Select all namespaces.\n     */\n    static all(scope, id) {\n        return Namespaces.select(scope, id, { expressions: [], labels: {} });\n    }\n    /**\n     * @see INamespaceSelector.toNamespaceSelectorConfig()\n     */\n    toNamespaceSelectorConfig() {\n        return {\n            labelSelector: pod.LabelSelector.of({ expressions: this.expressions, labels: this.labels }),\n            names: this.names,\n        };\n    }\n    /**\n     * @see INetworkPolicyPeer.toNetworkPolicyPeerConfig()\n     */\n    toNetworkPolicyPeerConfig() {\n        return this._pods.toNetworkPolicyPeerConfig();\n    }\n    /**\n     * @see INetworkPolicyPeer.toPodSelector()\n     */\n    toPodSelector() {\n        return this._pods.toPodSelector();\n    }\n}\nexports.Namespaces = Namespaces;\n_b = JSII_RTTI_SYMBOL_1;\nNamespaces[_b] = { fqn: \"cdk8s-plus-22.Namespaces\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validatePeerConfig = exports.NetworkPolicy = exports.NetworkPolicyTrafficDefault = exports.NetworkProtocol = exports.NetworkPolicyIpBlock = exports.NetworkPolicyPort = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst constructs_1 = require(\"constructs\");\nconst base = require(\"./base\");\nconst k8s = require(\"./imports/k8s\");\nconst namespace = require(\"./namespace\");\nconst pod = require(\"./pod\");\nconst utils_1 = require(\"./utils\");\n/**\n * Describes a port to allow traffic on.\n */\nclass NetworkPolicyPort {\n    constructor(port, endPort, protocol) {\n        this.port = port;\n        this.endPort = endPort;\n        this.protocol = protocol;\n    }\n    /**\n     * Distinct TCP ports\n     */\n    static tcp(port) {\n        return new NetworkPolicyPort(k8s.IntOrString.fromNumber(port), undefined, NetworkProtocol.TCP);\n    }\n    /**\n     * A TCP port range\n     */\n    static tcpRange(startPort, endPort) {\n        return new NetworkPolicyPort(k8s.IntOrString.fromNumber(startPort), endPort, NetworkProtocol.TCP);\n    }\n    /**\n     * Any TCP traffic\n     */\n    static allTcp() {\n        return new NetworkPolicyPort(k8s.IntOrString.fromNumber(0), 65535, NetworkProtocol.TCP);\n    }\n    /**\n     * Distinct UDP ports\n     */\n    static udp(port) {\n        return new NetworkPolicyPort(k8s.IntOrString.fromNumber(port), undefined, NetworkProtocol.UDP);\n    }\n    /**\n     * A UDP port range\n     */\n    static udpRange(startPort, endPort) {\n        return new NetworkPolicyPort(k8s.IntOrString.fromNumber(startPort), endPort, NetworkProtocol.UDP);\n    }\n    /**\n     * Any UDP traffic\n     */\n    static allUdp() {\n        return new NetworkPolicyPort(k8s.IntOrString.fromNumber(0), 65535, NetworkProtocol.UDP);\n    }\n    /**\n     * Custom port configuration.\n     */\n    static of(props) {\n        return new NetworkPolicyPort(props.port ? k8s.IntOrString.fromNumber(props.port) : undefined, props.endPort, props.protocol);\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        return { port: this.port, endPort: this.endPort, protocol: this.protocol };\n    }\n}\nexports.NetworkPolicyPort = NetworkPolicyPort;\n_a = JSII_RTTI_SYMBOL_1;\nNetworkPolicyPort[_a] = { fqn: \"cdk8s-plus-22.NetworkPolicyPort\", version: \"2.0.0-rc.2\" };\n/**\n * Describes a particular CIDR (Ex. \"192.168.1.1/24\",\"2001:db9::/64\") that is\n * allowed to the pods matched by a network policy selector.\n * The except entry describes CIDRs that should not be included within this rule.\n */\nclass NetworkPolicyIpBlock extends constructs_1.Construct {\n    constructor(scope, id, \n    /**\n     * A string representing the IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\".\n     */\n    cidr, \n    /**\n     * A slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\".\n     * Except values will be rejected if they are outside the CIDR range.\n     */\n    except) {\n        super(scope, id);\n        this.cidr = cidr;\n        this.except = except;\n    }\n    /**\n     * Create an IPv4 peer from a CIDR\n     */\n    static ipv4(scope, id, cidrIp, except) {\n        const cidrMatch = cidrIp.match(/^(\\d{1,3}\\.){3}\\d{1,3}(\\/\\d+)?$/);\n        if (!cidrMatch) {\n            throw new Error(`Invalid IPv4 CIDR: \"${cidrIp}\"`);\n        }\n        if (!cidrMatch[2]) {\n            throw new Error(`CIDR mask is missing in IPv4: \"${cidrIp}\". Did you mean \"${cidrIp}/32\"?`);\n        }\n        return new NetworkPolicyIpBlock(scope, id, cidrIp, except);\n    }\n    /**\n     * Any IPv4 address\n     */\n    static anyIpv4(scope, id) {\n        return new NetworkPolicyIpBlock(scope, id, '0.0.0.0/0');\n    }\n    /**\n     * Create an IPv6 peer from a CIDR\n     */\n    static ipv6(scope, id, cidrIp, except) {\n        const cidrMatch = cidrIp.match(/^([\\da-f]{0,4}:){2,7}([\\da-f]{0,4})?(\\/\\d+)?$/);\n        if (!cidrMatch) {\n            throw new Error(`Invalid IPv6 CIDR: \"${cidrIp}\"`);\n        }\n        if (!cidrMatch[3]) {\n            throw new Error(`CIDR mask is missing in IPv6: \"${cidrIp}\". Did you mean \"${cidrIp}/128\"?`);\n        }\n        return new NetworkPolicyIpBlock(scope, id, cidrIp, except);\n    }\n    /**\n     * Any IPv6 address\n     */\n    static anyIpv6(scope, id) {\n        return new NetworkPolicyIpBlock(scope, id, '::/0');\n    }\n    /**\n     * @see INetworkPolicyPeer.toNetworkPolicyPeerConfig()\n     */\n    toNetworkPolicyPeerConfig() {\n        return { ipBlock: this };\n    }\n    /**\n     * @see INetworkPolicyPeer.toPodSelector()\n     */\n    toPodSelector() {\n        return undefined;\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        return { cidr: this.cidr, except: this.except };\n    }\n}\nexports.NetworkPolicyIpBlock = NetworkPolicyIpBlock;\n_b = JSII_RTTI_SYMBOL_1;\nNetworkPolicyIpBlock[_b] = { fqn: \"cdk8s-plus-22.NetworkPolicyIpBlock\", version: \"2.0.0-rc.2\" };\n/**\n * Network protocols.\n */\nvar NetworkProtocol;\n(function (NetworkProtocol) {\n    /**\n     * TCP.\n     */\n    NetworkProtocol[\"TCP\"] = \"TCP\";\n    /**\n     * UDP.\n     */\n    NetworkProtocol[\"UDP\"] = \"UDP\";\n    /**\n     * SCTP.\n     */\n    NetworkProtocol[\"SCTP\"] = \"SCTP\";\n})(NetworkProtocol = exports.NetworkProtocol || (exports.NetworkProtocol = {}));\n/**\n * Default behaviors of network traffic in policies.\n */\nvar NetworkPolicyTrafficDefault;\n(function (NetworkPolicyTrafficDefault) {\n    /**\n     * The policy denies all traffic.\n     * Since rules are additive, additional rules or policies can allow\n     * specific traffic.\n     */\n    NetworkPolicyTrafficDefault[\"DENY\"] = \"DENY\";\n    /**\n     * The policy allows all traffic (either ingress or egress).\n     * Since rules are additive, no additional rule or policies can\n     * subsequently deny the traffic.\n     */\n    NetworkPolicyTrafficDefault[\"ALLOW\"] = \"ALLOW\";\n})(NetworkPolicyTrafficDefault = exports.NetworkPolicyTrafficDefault || (exports.NetworkPolicyTrafficDefault = {}));\n/**\n * Control traffic flow at the IP address or port level (OSI layer 3 or 4),\n * network policies are an application-centric construct which allow you\n * to specify how a pod is allowed to communicate with various network peers.\n *\n * - Outgoing traffic is allowed if there are no network policies selecting\n *   the pod (and cluster policy otherwise allows the traffic),\n *   OR if the traffic matches at least one egress rule across all of the\n *   network policies that select the pod.\n *\n * - Incoming traffic is allowed to a pod if there are no network policies\n *   selecting the pod (and cluster policy otherwise allows the traffic),\n *   OR if the traffic source is the pod's local node,\n *   OR if the traffic matches at least one ingress rule across all of\n *   the network policies that select the pod.\n *\n * Network policies do not conflict; they are additive.\n * If any policy or policies apply to a given pod for a given\n * direction, the connections allowed in that direction from\n * that pod is the union of what the applicable policies allow.\n * Thus, order of evaluation does not affect the policy result.\n *\n * For a connection from a source pod to a destination pod to be allowed,\n * both the egress policy on the source pod and the ingress policy on the\n * destination pod need to allow the connection.\n * If either side does not allow the connection, it will not happen.\n *\n * @see https://kubernetes.io/docs/concepts/services-networking/network-policies/#networkpolicy-resource\n */\nclass NetworkPolicy extends base.Resource {\n    constructor(scope, id, props = {}) {\n        var _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n        super(scope, id);\n        this.resourceType = 'networkpolicies';\n        this._egressRules = [];\n        this._ingressRules = [];\n        this._policyTypes = new Set();\n        const podSelector = (_d = props.selector) !== null && _d !== void 0 ? _d : pod.Pods.all(this, 'AllPods');\n        this._podSelectorConfig = podSelector.toPodSelectorConfig();\n        let ns;\n        if (!((_e = props.metadata) === null || _e === void 0 ? void 0 : _e.namespace)) {\n            if (((_f = this._podSelectorConfig.namespaces) === null || _f === void 0 ? void 0 : _f.labelSelector) && !((_g = this._podSelectorConfig.namespaces) === null || _g === void 0 ? void 0 : _g.labelSelector.isEmpty())) {\n                throw new Error(`Unable to create a network policy for a selector (${podSelector.node.path}) that selects pods in namespaces based on labels`);\n            }\n            if (((_h = this._podSelectorConfig.namespaces) === null || _h === void 0 ? void 0 : _h.names) && this._podSelectorConfig.namespaces.names.length > 1) {\n                throw new Error(`Unable to create a network policy for a selector (${podSelector.node.path}) that selects pods in multiple namespaces`);\n            }\n            ns = ((_j = this._podSelectorConfig.namespaces) === null || _j === void 0 ? void 0 : _j.names) ? (_k = this._podSelectorConfig.namespaces) === null || _k === void 0 ? void 0 : _k.names[0] : undefined;\n        }\n        else {\n            ns = props.metadata.namespace;\n        }\n        this.apiObject = new k8s.KubeNetworkPolicy(this, 'Resource', {\n            metadata: { ...props.metadata, namespace: ns },\n            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),\n        });\n        this.configureDefaultBehavior('Egress', (_l = props.egress) === null || _l === void 0 ? void 0 : _l.default);\n        this.configureDefaultBehavior('Ingress', (_m = props.ingress) === null || _m === void 0 ? void 0 : _m.default);\n        for (const rule of (_p = (_o = props.egress) === null || _o === void 0 ? void 0 : _o.rules) !== null && _p !== void 0 ? _p : []) {\n            this.addEgressRule(rule.peer, rule.ports);\n        }\n        for (const rule of (_r = (_q = props.ingress) === null || _q === void 0 ? void 0 : _q.rules) !== null && _r !== void 0 ? _r : []) {\n            this.addIngressRule(rule.peer, rule.ports);\n        }\n    }\n    /**\n     * Allow outgoing traffic to the peer.\n     *\n     * If ports are not passed, traffic will be allowed on all ports.\n     */\n    addEgressRule(peer, ports) {\n        this._policyTypes.add('Egress');\n        this._egressRules.push({ ports: (ports !== null && ports !== void 0 ? ports : []).map(p => p._toKube()), to: this.createNetworkPolicyPeers(peer) });\n    }\n    /**\n     * Allow incoming traffic from the peer.\n     *\n     * If ports are not passed, traffic will be allowed on all ports.\n     */\n    addIngressRule(peer, ports) {\n        this._policyTypes.add('Ingress');\n        this._ingressRules.push({ ports: (ports !== null && ports !== void 0 ? ports : []).map(p => p._toKube()), from: this.createNetworkPolicyPeers(peer) });\n    }\n    createNetworkPolicyPeers(peer) {\n        var _d, _e, _f, _g, _h, _j, _k;\n        const config = peer.toNetworkPolicyPeerConfig();\n        validatePeerConfig(config);\n        if (config.ipBlock) {\n            // ip block is a single peer.\n            return [{ ipBlock: config.ipBlock._toKube() }];\n        }\n        if (!((_d = config.podSelector.namespaces) === null || _d === void 0 ? void 0 : _d.names)) {\n            // when no explicit namespaces are defined we can just use\n            // the selector as is\n            return [{\n                    namespaceSelector: (_f = (_e = config.podSelector.namespaces) === null || _e === void 0 ? void 0 : _e.labelSelector) === null || _f === void 0 ? void 0 : _f._toKube(),\n                    podSelector: config.podSelector.labelSelector._toKube(),\n                }];\n        }\n        // when explicit namespaces are defined, we need to create a separate\n        // peer for each, since a label selector cannot have multiple name labels. (they will conflict)\n        const namespaceSelector = (_k = (_j = (_h = (_g = config.podSelector) === null || _g === void 0 ? void 0 : _g.namespaces) === null || _h === void 0 ? void 0 : _h.labelSelector) === null || _j === void 0 ? void 0 : _j._toKube()) !== null && _k !== void 0 ? _k : {};\n        return config.podSelector.namespaces.names.map(n => ({\n            podSelector: config.podSelector.labelSelector._toKube(),\n            namespaceSelector: {\n                matchExpressions: namespaceSelector.matchExpressions,\n                matchLabels: {\n                    ...namespaceSelector.matchLabels,\n                    [namespace.Namespace.NAME_LABEL]: n,\n                },\n            },\n        }));\n    }\n    configureDefaultBehavior(direction, _default) {\n        if (!_default) {\n            return;\n        }\n        if (_default === NetworkPolicyTrafficDefault.DENY) {\n            // https://kubernetes.io/docs/concepts/services-networking/network-policies/#default-deny-all-egress-traffic\n            this._policyTypes.add(direction);\n        }\n        if (_default === NetworkPolicyTrafficDefault.ALLOW) {\n            // https://kubernetes.io/docs/concepts/services-networking/network-policies/#allow-all-egress-traffic\n            this._policyTypes.add(direction);\n            if (direction === 'Egress') {\n                this._egressRules.push({});\n            }\n            else {\n                this._ingressRules.push({});\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        return {\n            podSelector: this._podSelectorConfig.labelSelector._toKube(),\n            egress: utils_1.undefinedIfEmpty(this._egressRules),\n            ingress: utils_1.undefinedIfEmpty(this._ingressRules),\n            policyTypes: utils_1.undefinedIfEmpty(Array.from(this._policyTypes)),\n        };\n    }\n}\nexports.NetworkPolicy = NetworkPolicy;\n_c = JSII_RTTI_SYMBOL_1;\nNetworkPolicy[_c] = { fqn: \"cdk8s-plus-22.NetworkPolicy\", version: \"2.0.0-rc.2\" };\nfunction validatePeerConfig(peerConfig) {\n    if (!peerConfig.ipBlock && !peerConfig.podSelector) {\n        throw new Error('Inavlid peer: either \\'ipBlock\\' or \\'podSelector\\' must be defined');\n    }\n    if (peerConfig.ipBlock && peerConfig.podSelector) {\n        throw new Error('Inavlid peer: only one of \\'ipBlock\\' and \\'podSelector\\' must be defined');\n    }\n}\nexports.validatePeerConfig = validatePeerConfig;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PodConnections = exports.PodConnectionsIsolation = exports.PodScheduling = exports.Topology = exports.Node = exports.NamedNode = exports.TaintedNode = exports.LabeledNode = exports.Pods = exports.NodeTaintQuery = exports.TaintEffect = exports.LabelExpression = exports.NodeLabelQuery = exports.DnsPolicy = exports.FsGroupChangePolicy = exports.RestartPolicy = exports.PodSecurityContext = exports.PodDns = exports.Pod = exports.LabelSelector = exports.LabelSelectorOptions = exports.AbstractPod = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst constructs_1 = require(\"constructs\");\nconst base = require(\"./base\");\nconst container = require(\"./container\");\nconst k8s = require(\"./imports/k8s\");\nconst networkpolicy = require(\"./network-policy\");\nconst utils_1 = require(\"./utils\");\nclass AbstractPod extends base.Resource {\n    constructor(scope, id, props = {}) {\n        var _t;\n        super(scope, id);\n        this._containers = [];\n        this._initContainers = [];\n        this._hostAliases = [];\n        this._volumes = new Map();\n        this.restartPolicy = props.restartPolicy;\n        this.serviceAccount = props.serviceAccount;\n        this.securityContext = new PodSecurityContext(props.securityContext);\n        this.dns = new PodDns(props.dns);\n        this.dockerRegistryAuth = props.dockerRegistryAuth;\n        this.automountServiceAccountToken = (_t = props.automountServiceAccountToken) !== null && _t !== void 0 ? _t : true;\n        if (props.containers) {\n            props.containers.forEach(c => this.addContainer(c));\n        }\n        if (props.volumes) {\n            props.volumes.forEach(v => this.addVolume(v));\n        }\n        if (props.initContainers) {\n            props.initContainers.forEach(c => this.addInitContainer(c));\n        }\n        if (props.hostAliases) {\n            props.hostAliases.forEach(c => this.addHostAlias(c));\n        }\n    }\n    get containers() {\n        return [...this._containers];\n    }\n    get initContainers() {\n        return [...this._initContainers];\n    }\n    get volumes() {\n        return Array.from(this._volumes.values());\n    }\n    get hostAliases() {\n        return [...this._hostAliases];\n    }\n    /**\n     * @see IPodSelector.toPodSelectorConfig()\n     */\n    toPodSelectorConfig() {\n        const podAddress = this.podMetadata.getLabel(Pod.ADDRESS_LABEL);\n        if (!podAddress) {\n            // shouldn't happen because we add this label automatically in both pods and workloads.\n            throw new Error(`Unable to create a label selector since ${Pod.ADDRESS_LABEL} label is missing`);\n        }\n        return {\n            labelSelector: LabelSelector.of({ labels: { [Pod.ADDRESS_LABEL]: podAddress } }),\n            namespaces: this.metadata.namespace ? {\n                names: [this.metadata.namespace],\n            } : undefined,\n        };\n    }\n    /**\n     * @see INetworkPolicyPeer.toNetworkPolicyPeerConfig()\n     */\n    toNetworkPolicyPeerConfig() {\n        return { podSelector: this.toPodSelectorConfig() };\n    }\n    /**\n     * @see INetworkPolicyPeer.toPodSelector()\n     */\n    toPodSelector() {\n        return this;\n    }\n    addContainer(cont) {\n        const impl = new container.Container(cont);\n        this._containers.push(impl);\n        return impl;\n    }\n    addInitContainer(cont) {\n        var _t;\n        // https://kubernetes.io/docs/concepts/workloads/pods/init-containers/#differences-from-regular-containers\n        if (cont.readiness) {\n            throw new Error('Init containers must not have a readiness probe');\n        }\n        if (cont.liveness) {\n            throw new Error('Init containers must not have a liveness probe');\n        }\n        if (cont.startup) {\n            throw new Error('Init containers must not have a startup probe');\n        }\n        const impl = new container.Container({\n            ...cont,\n            name: (_t = cont.name) !== null && _t !== void 0 ? _t : `init-${this._initContainers.length}`,\n        });\n        this._initContainers.push(impl);\n        return impl;\n    }\n    addHostAlias(hostAlias) {\n        this._hostAliases.push(hostAlias);\n    }\n    addVolume(vol) {\n        const existingVolume = this._volumes.get(vol.name);\n        if (existingVolume) {\n            throw new Error(`Volume with name ${vol.name} already exists`);\n        }\n        this._volumes.set(vol.name, vol);\n    }\n    /**\n     * @see ISubect.toSubjectConfiguration()\n     */\n    toSubjectConfiguration() {\n        var _t, _u;\n        if (!this.serviceAccount && !this.automountServiceAccountToken) {\n            throw new Error(`${this.name} cannot be converted to a role binding subject:`\n                + ' You must either assign a service account to it, or use \\'automountServiceAccountToken: true\\'');\n        }\n        // 'default' is assumed to be the name of the default service account\n        // in the cluster.\n        const serviceAccountName = (_u = (_t = this.serviceAccount) === null || _t === void 0 ? void 0 : _t.name) !== null && _u !== void 0 ? _u : 'default';\n        return {\n            kind: 'ServiceAccount',\n            name: serviceAccountName,\n            apiGroup: '',\n        };\n    }\n    /**\n     * @internal\n     */\n    _toPodSpec() {\n        var _t;\n        if (this.containers.length === 0) {\n            throw new Error('PodSpec must have at least 1 container');\n        }\n        const volumes = new Map();\n        const containers = [];\n        const initContainers = [];\n        for (const cont of this.containers) {\n            // automatically add volume from the container mount\n            // to this pod so thats its available to the container.\n            for (const mount of cont.mounts) {\n                addVolume(mount.volume);\n            }\n            containers.push(cont._toKube());\n        }\n        for (const cont of this.initContainers) {\n            // automatically add volume from the container mount\n            // to this pod so thats its available to the container.\n            for (const mount of cont.mounts) {\n                addVolume(mount.volume);\n            }\n            initContainers.push(cont._toKube());\n        }\n        for (const vol of this.volumes) {\n            addVolume(vol);\n        }\n        function addVolume(vol) {\n            const existingVolume = volumes.get(vol.name);\n            // its ok to call this function twice on the same volume, but its not ok to\n            // call it twice on a different volume with the same name.\n            if (existingVolume && existingVolume !== vol) {\n                throw new Error(`Invalid mount configuration. At least two different volumes have the same name: ${vol.name}`);\n            }\n            volumes.set(vol.name, vol);\n        }\n        const dns = this.dns._toKube();\n        return {\n            restartPolicy: this.restartPolicy,\n            serviceAccountName: (_t = this.serviceAccount) === null || _t === void 0 ? void 0 : _t.name,\n            containers: containers,\n            securityContext: utils_1.undefinedIfEmpty(this.securityContext._toKube()),\n            initContainers: utils_1.undefinedIfEmpty(initContainers),\n            hostAliases: utils_1.undefinedIfEmpty(this.hostAliases),\n            volumes: utils_1.undefinedIfEmpty(Array.from(volumes.values()).map(v => v._toKube())),\n            dnsPolicy: dns.policy,\n            dnsConfig: utils_1.undefinedIfEmpty(dns.config),\n            hostname: dns.hostname,\n            subdomain: dns.subdomain,\n            setHostnameAsFqdn: dns.hostnameAsFQDN,\n            imagePullSecrets: this.dockerRegistryAuth ? [{ name: this.dockerRegistryAuth.name }] : undefined,\n            automountServiceAccountToken: this.automountServiceAccountToken,\n        };\n    }\n}\nexports.AbstractPod = AbstractPod;\n_a = JSII_RTTI_SYMBOL_1;\nAbstractPod[_a] = { fqn: \"cdk8s-plus-22.AbstractPod\", version: \"2.0.0-rc.2\" };\n/**\n * Options for `LabelSelector.of`.\n */\nclass LabelSelectorOptions {\n}\nexports.LabelSelectorOptions = LabelSelectorOptions;\n_b = JSII_RTTI_SYMBOL_1;\nLabelSelectorOptions[_b] = { fqn: \"cdk8s-plus-22.LabelSelectorOptions\", version: \"2.0.0-rc.2\" };\n/**\n * Match a resource by labels.\n */\nclass LabelSelector {\n    constructor(expressions, labels) {\n        this.expressions = expressions;\n        this.labels = labels;\n    }\n    static of(options = {}) {\n        var _t, _u;\n        return new LabelSelector((_t = options.expressions) !== null && _t !== void 0 ? _t : [], (_u = options.labels) !== null && _u !== void 0 ? _u : {});\n    }\n    isEmpty() {\n        return this.expressions.length === 0 && Object.keys(this.labels).length === 0;\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        if (this.isEmpty()) {\n            return {};\n        }\n        return {\n            matchExpressions: utils_1.undefinedIfEmpty(this.expressions.map(q => ({ key: q.key, operator: q.operator, values: q.values }))),\n            matchLabels: utils_1.undefinedIfEmpty(this.labels),\n        };\n    }\n}\nexports.LabelSelector = LabelSelector;\n_c = JSII_RTTI_SYMBOL_1;\nLabelSelector[_c] = { fqn: \"cdk8s-plus-22.LabelSelector\", version: \"2.0.0-rc.2\" };\n/**\n * Pod is a collection of containers that can run on a host. This resource is\n * created by clients and scheduled onto hosts.\n */\nclass Pod extends AbstractPod {\n    constructor(scope, id, props = {}) {\n        super(scope, id, props);\n        this.resourceType = 'pods';\n        this.apiObject = new k8s.KubePod(this, 'Resource', {\n            metadata: props.metadata,\n            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),\n        });\n        this.metadata.addLabel(Pod.ADDRESS_LABEL, cdk8s_1.Names.toLabelValue(this));\n        this.scheduling = new PodScheduling(this);\n        this.connections = new PodConnections(this);\n    }\n    get podMetadata() {\n        return this.metadata;\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        const scheduling = this.scheduling._toKube();\n        return {\n            ...this._toPodSpec(),\n            affinity: scheduling.affinity,\n            nodeName: scheduling.nodeName,\n            tolerations: scheduling.tolerations,\n        };\n    }\n}\nexports.Pod = Pod;\n_d = JSII_RTTI_SYMBOL_1;\nPod[_d] = { fqn: \"cdk8s-plus-22.Pod\", version: \"2.0.0-rc.2\" };\n/**\n * This label is autoamtically added by cdk8s to any pod. It provides\n * a unique and stable identifier for the pod.\n */\nPod.ADDRESS_LABEL = 'cdk8s.io/metadata.addr';\n/**\n * Holds dns settings of the pod.\n */\nclass PodDns {\n    constructor(props = {}) {\n        var _t, _u, _v, _w, _x;\n        this.hostname = props.hostname;\n        this.subdomain = props.subdomain;\n        this.policy = (_t = props.policy) !== null && _t !== void 0 ? _t : DnsPolicy.CLUSTER_FIRST;\n        this.hostnameAsFQDN = (_u = props.hostnameAsFQDN) !== null && _u !== void 0 ? _u : false;\n        this._nameservers = (_v = props.nameservers) !== null && _v !== void 0 ? _v : [];\n        this._searches = (_w = props.searches) !== null && _w !== void 0 ? _w : [];\n        this._options = (_x = props.options) !== null && _x !== void 0 ? _x : [];\n    }\n    /**\n     * Nameservers defined for this pod.\n     */\n    get nameservers() {\n        return [...this._nameservers];\n    }\n    /**\n     * Search domains defined for this pod.\n     */\n    get searches() {\n        return [...this._searches];\n    }\n    /**\n     * Custom dns options defined for this pod.\n     */\n    get options() {\n        return [...this._options];\n    }\n    /**\n     * Add a nameserver.\n     */\n    addNameserver(...nameservers) {\n        this._nameservers.push(...nameservers);\n    }\n    /**\n     * Add a search domain.\n     */\n    addSearch(...searches) {\n        this._searches.push(...searches);\n    }\n    /**\n     * Add a custom option.\n     */\n    addOption(...options) {\n        this._options.push(...options);\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        if (this.policy === DnsPolicy.NONE && this.nameservers.length === 0) {\n            throw new Error('When dns policy is set to NONE, at least one nameserver is required');\n        }\n        if (this.nameservers.length > 3) {\n            throw new Error('There can be at most 3 nameservers specified');\n        }\n        if (this.searches.length > 6) {\n            throw new Error('There can be at most 6 search domains specified');\n        }\n        return {\n            hostname: this.hostname,\n            subdomain: this.subdomain,\n            hostnameAsFQDN: this.hostnameAsFQDN,\n            policy: this.policy,\n            config: {\n                nameservers: utils_1.undefinedIfEmpty(this.nameservers),\n                searches: utils_1.undefinedIfEmpty(this.searches),\n                options: utils_1.undefinedIfEmpty(this.options),\n            },\n        };\n    }\n}\nexports.PodDns = PodDns;\n_e = JSII_RTTI_SYMBOL_1;\nPodDns[_e] = { fqn: \"cdk8s-plus-22.PodDns\", version: \"2.0.0-rc.2\" };\n/**\n * Holds pod-level security attributes and common container settings.\n */\nclass PodSecurityContext {\n    constructor(props = {}) {\n        var _t, _u, _v;\n        this._sysctls = [];\n        this.ensureNonRoot = (_t = props.ensureNonRoot) !== null && _t !== void 0 ? _t : false;\n        this.fsGroupChangePolicy = (_u = props.fsGroupChangePolicy) !== null && _u !== void 0 ? _u : FsGroupChangePolicy.ALWAYS;\n        this.user = props.user;\n        this.group = props.group;\n        this.fsGroup = props.fsGroup;\n        for (const sysctl of (_v = props.sysctls) !== null && _v !== void 0 ? _v : []) {\n            this._sysctls.push(sysctl);\n        }\n    }\n    get sysctls() {\n        return [...this._sysctls];\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        return {\n            runAsGroup: this.group,\n            runAsUser: this.user,\n            fsGroup: this.fsGroup,\n            runAsNonRoot: this.ensureNonRoot,\n            fsGroupChangePolicy: this.fsGroupChangePolicy,\n            sysctls: utils_1.undefinedIfEmpty(this._sysctls),\n        };\n    }\n}\nexports.PodSecurityContext = PodSecurityContext;\n_f = JSII_RTTI_SYMBOL_1;\nPodSecurityContext[_f] = { fqn: \"cdk8s-plus-22.PodSecurityContext\", version: \"2.0.0-rc.2\" };\n/**\n * Restart policy for all containers within the pod.\n */\nvar RestartPolicy;\n(function (RestartPolicy) {\n    /**\n     * Always restart the pod after it exits.\n     */\n    RestartPolicy[\"ALWAYS\"] = \"Always\";\n    /**\n     * Only restart if the pod exits with a non-zero exit code.\n     */\n    RestartPolicy[\"ON_FAILURE\"] = \"OnFailure\";\n    /**\n     * Never restart the pod.\n     */\n    RestartPolicy[\"NEVER\"] = \"Never\";\n})(RestartPolicy = exports.RestartPolicy || (exports.RestartPolicy = {}));\nvar FsGroupChangePolicy;\n(function (FsGroupChangePolicy) {\n    /**\n     * Only change permissions and ownership if permission and ownership of root directory does\n     * not match with expected permissions of the volume.\n     * This could help shorten the time it takes to change ownership and permission of a volume\n     */\n    FsGroupChangePolicy[\"ON_ROOT_MISMATCH\"] = \"OnRootMismatch\";\n    /**\n     * Always change permission and ownership of the volume when volume is mounted.\n     */\n    FsGroupChangePolicy[\"ALWAYS\"] = \"Always\";\n})(FsGroupChangePolicy = exports.FsGroupChangePolicy || (exports.FsGroupChangePolicy = {}));\n/**\n * Pod DNS policies.\n */\nvar DnsPolicy;\n(function (DnsPolicy) {\n    /**\n     * Any DNS query that does not match the configured cluster domain suffix,\n     * such as \"www.kubernetes.io\", is forwarded to the\n     * upstream nameserver inherited from the node.\n     * Cluster administrators may have extra stub-domain and upstream DNS servers configured.\n     */\n    DnsPolicy[\"CLUSTER_FIRST\"] = \"ClusterFirst\";\n    /**\n     * For Pods running with hostNetwork, you should\n     * explicitly set its DNS policy \"ClusterFirstWithHostNet\".\n     */\n    DnsPolicy[\"CLUSTER_FIRST_WITH_HOST_NET\"] = \"ClusterFirstWithHostNet\";\n    /**\n     * The Pod inherits the name resolution configuration\n     * from the node that the pods run on.\n     */\n    DnsPolicy[\"DEFAULT\"] = \"Default\";\n    /**\n     * It allows a Pod to ignore DNS settings from the Kubernetes environment.\n     * All DNS settings are supposed to be provided using the dnsConfig\n     * field in the Pod Spec.\n     */\n    DnsPolicy[\"NONE\"] = \"None\";\n})(DnsPolicy = exports.DnsPolicy || (exports.DnsPolicy = {}));\n/**\n * Represents a query that can be performed against nodes with labels.\n */\nclass NodeLabelQuery {\n    constructor(key, operator, values) {\n        this.key = key;\n        this.operator = operator;\n        this.values = values;\n    }\n    /**\n     * Requires value of label `key` to equal `value`.\n     */\n    static is(key, value) {\n        return NodeLabelQuery.in(key, [value]);\n    }\n    /**\n     * Requires value of label `key` to be one of `values`.\n     */\n    static in(key, values) {\n        return new NodeLabelQuery(key, 'In', values);\n    }\n    /**\n     * Requires value of label `key` to be none of `values`.\n     */\n    static notIn(key, values) {\n        return new NodeLabelQuery(key, 'NotIn', values);\n    }\n    /**\n     * Requires label `key` to exist.\n     */\n    static exists(key) {\n        return new NodeLabelQuery(key, 'Exists', undefined);\n    }\n    /**\n     * Requires label `key` to not exist.\n     */\n    static doesNotExist(key) {\n        return new NodeLabelQuery(key, 'DoesNotExist', undefined);\n    }\n    /**\n     * Requires value of label `key` to greater than all elements in `values`.\n     */\n    static gt(key, values) {\n        return new NodeLabelQuery(key, 'Gt', values);\n    }\n    /**\n     * Requires value of label `key` to less than all elements in `values`.\n     */\n    static lt(key, values) {\n        return new NodeLabelQuery(key, 'Lt', values);\n    }\n}\nexports.NodeLabelQuery = NodeLabelQuery;\n_g = JSII_RTTI_SYMBOL_1;\nNodeLabelQuery[_g] = { fqn: \"cdk8s-plus-22.NodeLabelQuery\", version: \"2.0.0-rc.2\" };\n/**\n * Represents a query that can be performed against resources with labels.\n */\nclass LabelExpression {\n    constructor(key, operator, values) {\n        this.key = key;\n        this.operator = operator;\n        this.values = values;\n    }\n    /**\n     * Requires value of label `key` to be one of `values`.\n     */\n    static in(key, values) {\n        return new LabelExpression(key, 'In', values);\n    }\n    /**\n     * Requires value of label `key` to be none of `values`.\n     */\n    static notIn(key, values) {\n        return new LabelExpression(key, 'NotIn', values);\n    }\n    /**\n     * Requires label `key` to exist.\n     */\n    static exists(key) {\n        return new LabelExpression(key, 'Exists', undefined);\n    }\n    /**\n     * Requires label `key` to not exist.\n     */\n    static doesNotExist(key) {\n        return new LabelExpression(key, 'DoesNotExist', undefined);\n    }\n}\nexports.LabelExpression = LabelExpression;\n_h = JSII_RTTI_SYMBOL_1;\nLabelExpression[_h] = { fqn: \"cdk8s-plus-22.LabelExpression\", version: \"2.0.0-rc.2\" };\n/**\n * Taint effects.\n */\nvar TaintEffect;\n(function (TaintEffect) {\n    /**\n     * This means that no pod will be able to schedule\n     * onto the node unless it has a matching toleration.\n     */\n    TaintEffect[\"NO_SCHEDULE\"] = \"NoSchedule\";\n    /**\n     * This is a \"preference\" or \"soft\" version of `NO_SCHEDULE` -- the system\n     * will try to avoid placing a pod that does not tolerate the taint on the node,\n     * but it is not required\n     */\n    TaintEffect[\"PREFER_NO_SCHEDULE\"] = \"PreferNoSchedule\";\n    /**\n     * This affects pods that are already running on the node as follows:\n     *\n     * - Pods that do not tolerate the taint are evicted immediately.\n     * - Pods that tolerate the taint without specifying `duration` remain bound forever.\n     * - Pods that tolerate the taint with a specified `duration` remain bound for\n     *   the specified amount of time.\n     */\n    TaintEffect[\"NO_EXECUTE\"] = \"NoExecute\";\n})(TaintEffect = exports.TaintEffect || (exports.TaintEffect = {}));\n/**\n * Taint queries that can be perfomed against nodes.\n */\nclass NodeTaintQuery {\n    constructor(operator, key, value, effect, evictAfter) {\n        this.operator = operator;\n        this.key = key;\n        this.value = value;\n        this.effect = effect;\n        this.evictAfter = evictAfter;\n        if (evictAfter && effect !== TaintEffect.NO_EXECUTE) {\n            throw new Error('Only \\'NO_EXECUTE\\' effects can specify \\'evictAfter\\'');\n        }\n    }\n    /**\n     * Matches a taint with a specific key and value.\n     */\n    static is(key, value, options = {}) {\n        return new NodeTaintQuery('Equal', key, value, options.effect, options.evictAfter);\n    }\n    /**\n     * Matches a tain with any value of a specific key.\n     */\n    static exists(key, options = {}) {\n        return new NodeTaintQuery('Exists', key, undefined, options.effect, options.evictAfter);\n    }\n    /**\n     * Matches any taint.\n     */\n    static any() {\n        return new NodeTaintQuery('Exists');\n    }\n}\nexports.NodeTaintQuery = NodeTaintQuery;\n_j = JSII_RTTI_SYMBOL_1;\nNodeTaintQuery[_j] = { fqn: \"cdk8s-plus-22.NodeTaintQuery\", version: \"2.0.0-rc.2\" };\n/**\n * Represents a group of pods.\n */\nclass Pods extends constructs_1.Construct {\n    constructor(scope, id, expressions, labels, namespaces) {\n        super(scope, id);\n        this.expressions = expressions;\n        this.labels = labels;\n        this.namespaces = namespaces;\n    }\n    /**\n     * Select pods in the cluster with various selectors.\n     */\n    static select(scope, id, options) {\n        return new Pods(scope, id, options.expressions, options.labels, options.namespaces);\n    }\n    /**\n     * Select all pods.\n     */\n    static all(scope, id, options = {}) {\n        return Pods.select(scope, id, { namespaces: options.namespaces });\n    }\n    /**\n     * @see IPodSelector.toPodSelectorConfig()\n     */\n    toPodSelectorConfig() {\n        var _t;\n        return {\n            labelSelector: LabelSelector.of({ expressions: this.expressions, labels: this.labels }),\n            namespaces: (_t = this.namespaces) === null || _t === void 0 ? void 0 : _t.toNamespaceSelectorConfig(),\n        };\n    }\n    /**\n     * @see INetworkPolicyPeer.toNetworkPolicyPeerConfig()\n     */\n    toNetworkPolicyPeerConfig() {\n        return { podSelector: this.toPodSelectorConfig() };\n    }\n    /**\n     * @see INetworkPolicyPeer.toPodSelector()\n     */\n    toPodSelector() {\n        return this;\n    }\n}\nexports.Pods = Pods;\n_k = JSII_RTTI_SYMBOL_1;\nPods[_k] = { fqn: \"cdk8s-plus-22.Pods\", version: \"2.0.0-rc.2\" };\n/**\n * A node that is matched by label selectors.\n */\nclass LabeledNode {\n    constructor(labelSelector) {\n        this.labelSelector = labelSelector;\n    }\n    ;\n}\nexports.LabeledNode = LabeledNode;\n_l = JSII_RTTI_SYMBOL_1;\nLabeledNode[_l] = { fqn: \"cdk8s-plus-22.LabeledNode\", version: \"2.0.0-rc.2\" };\n/**\n * A node that is matched by taint selectors.\n */\nclass TaintedNode {\n    constructor(taintSelector) {\n        this.taintSelector = taintSelector;\n    }\n    ;\n}\nexports.TaintedNode = TaintedNode;\n_m = JSII_RTTI_SYMBOL_1;\nTaintedNode[_m] = { fqn: \"cdk8s-plus-22.TaintedNode\", version: \"2.0.0-rc.2\" };\n/**\n * A node that is matched by its name.\n */\nclass NamedNode {\n    constructor(name) {\n        this.name = name;\n    }\n    ;\n}\nexports.NamedNode = NamedNode;\n_o = JSII_RTTI_SYMBOL_1;\nNamedNode[_o] = { fqn: \"cdk8s-plus-22.NamedNode\", version: \"2.0.0-rc.2\" };\n/**\n * Represents a node in the cluster.\n */\nclass Node {\n    /**\n     * Match a node by its labels.\n     */\n    static labeled(...labelSelector) {\n        return new LabeledNode(labelSelector);\n    }\n    /**\n     * Match a node by its name.\n     */\n    static named(nodeName) {\n        return new NamedNode(nodeName);\n    }\n    /**\n     * Match a node by its taints.\n     */\n    static tainted(...taintSelector) {\n        return new TaintedNode(taintSelector);\n    }\n}\nexports.Node = Node;\n_p = JSII_RTTI_SYMBOL_1;\nNode[_p] = { fqn: \"cdk8s-plus-22.Node\", version: \"2.0.0-rc.2\" };\n/**\n * Available topology domains.\n */\nclass Topology {\n    constructor(key) {\n        this.key = key;\n    }\n    /**\n     * Custom key for the node label that the system uses to denote the topology domain.\n     */\n    static custom(key) {\n        return new Topology(key);\n    }\n    ;\n}\nexports.Topology = Topology;\n_q = JSII_RTTI_SYMBOL_1;\nTopology[_q] = { fqn: \"cdk8s-plus-22.Topology\", version: \"2.0.0-rc.2\" };\n/**\n * A hostname represents a single node in the cluster.\n *\n * @see https://kubernetes.io/docs/reference/labels-annotations-taints/#kubernetesiohostname\n */\nTopology.HOSTNAME = new Topology('kubernetes.io/hostname');\n/**\n * A zone represents a logical failure domain. It is common for Kubernetes clusters to\n * span multiple zones for increased availability. While the exact definition of a zone is\n * left to infrastructure implementations, common properties of a zone include very low\n * network latency within a zone, no-cost network traffic within a zone, and failure\n * independence from other zones. For example, nodes within a zone might share a network\n * switch, but nodes in different zones should not.\n *\n * @see https://kubernetes.io/docs/reference/labels-annotations-taints/#topologykubernetesiozone\n */\nTopology.ZONE = new Topology('topology.kubernetes.io/zone');\n/**\n * A region represents a larger domain, made up of one or more zones. It is uncommon\n * for Kubernetes clusters to span multiple regions. While the exact definition of a\n * zone or region is left to infrastructure implementations, common properties of a region\n * include higher network latency between them than within them, non-zero cost for network\n * traffic between them, and failure independence from other zones or regions.\n *\n * For example, nodes within a region might share power infrastructure (e.g. a UPS or generator), but\n * nodes in different regions typically would not.\n *\n * @see https://kubernetes.io/docs/reference/labels-annotations-taints/#topologykubernetesioregion\n */\nTopology.REGION = new Topology('topology.kubernetes.io/region');\n/**\n * Controls the pod scheduling strategy.\n */\nclass PodScheduling {\n    constructor(instance) {\n        this.instance = instance;\n        this._nodeAffinityPreferred = [];\n        this._nodeAffinityRequired = [];\n        this._podAffinityPreferred = [];\n        this._podAffinityRequired = [];\n        this._podAntiAffinityPreferred = [];\n        this._podAntiAffinityRequired = [];\n        this._tolerations = [];\n    }\n    /**\n     * Assign this pod a specific node by name.\n     *\n     * The scheduler ignores the Pod, and the kubelet on the named node\n     * tries to place the Pod on that node. Overrules any affinity rules of the pod.\n     *\n     * Some limitations of static assignment are:\n     *\n     * - If the named node does not exist, the Pod will not run, and in some\n     *   cases may be automatically deleted.\n     * - If the named node does not have the resources to accommodate the Pod,\n     *   the Pod will fail and its reason will indicate why, for example OutOfmemory or OutOfcpu.\n     * - Node names in cloud environments are not always predictable or stable.\n     *\n     * Will throw is the pod is already assigned to named node.\n     *\n     * Under the hood, this method utilizes the `nodeName` property.\n     */\n    assign(node) {\n        if (this._nodeName) {\n            // disallow overriding an static node assignment\n            throw new Error(`Cannot assign ${this.instance.podMetadata.name} to node ${node.name}. It is already assigned to node ${this._nodeName}`);\n        }\n        else {\n            this._nodeName = node.name;\n        }\n    }\n    /**\n     * Allow this pod to tolerate taints matching these tolerations.\n     *\n     * You can put multiple taints on the same node and multiple tolerations on the same pod.\n     * The way Kubernetes processes multiple taints and tolerations is like a filter: start with\n     * all of a node's taints, then ignore the ones for which the pod has a matching toleration;\n     * the remaining un-ignored taints have the indicated effects on the pod. In particular:\n     *\n     * - if there is at least one un-ignored taint with effect NoSchedule then Kubernetes will\n     *   not schedule the pod onto that node\n     * - if there is no un-ignored taint with effect NoSchedule but there is at least one un-ignored\n     *   taint with effect PreferNoSchedule then Kubernetes will try to not schedule the pod onto the node\n     * - if there is at least one un-ignored taint with effect NoExecute then the pod will be evicted from\n     *   the node (if it is already running on the node), and will not be scheduled onto the node (if it is\n     *   not yet running on the node).\n     *\n     * Under the hood, this method utilizes the `tolerations` property.\n     *\n     * @see https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/\n     */\n    tolerate(node) {\n        var _t;\n        for (const query of node.taintSelector) {\n            this._tolerations.push({\n                key: query.key,\n                value: query.value,\n                effect: query.effect,\n                operator: query.operator,\n                tolerationSeconds: (_t = query.evictAfter) === null || _t === void 0 ? void 0 : _t.toSeconds(),\n            });\n        }\n    }\n    /**\n     * Attract this pod to a node matched by selectors.\n     * You can select a node by using `Node.labeled()`.\n     *\n     * Attracting to multiple nodes (i.e invoking this method multiple times) acts as\n     * an OR condition, meaning the pod will be assigned to either one of the nodes.\n     *\n     * Under the hood, this method utilizes the `nodeAffinity` property.\n     *\n     * @see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity\n     */\n    attract(node, options = {}) {\n        const term = this.createNodeAffinityTerm(node);\n        if (options.weight) {\n            this.validateWeight(options.weight);\n            this._nodeAffinityPreferred.push({ weight: options.weight, preference: term });\n        }\n        else {\n            this._nodeAffinityRequired.push(term);\n        }\n    }\n    /**\n     * Co-locate this pod with a scheduling selection.\n     *\n     * A selection can be one of:\n     *\n     * - An instance of a `Pod`.\n     * - An instance of a `Workload` (e.g `Deployment`, `StatefulSet`).\n     * - An un-managed pod that can be selected via `Pods.select()`.\n     *\n     * Co-locating with multiple selections ((i.e invoking this method multiple times)) acts as\n     * an AND condition. meaning the pod will be assigned to a node that satisfies all\n     * selections (i.e runs at least one pod that satisifies each selection).\n     *\n     * Under the hood, this method utilizes the `podAffinity` property.\n     *\n     * @see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n     */\n    colocate(selector, options = {}) {\n        var _t;\n        const topology = (_t = options.topology) !== null && _t !== void 0 ? _t : Topology.HOSTNAME;\n        const term = this.createPodAffinityTerm(topology, selector);\n        if (options.weight) {\n            this.validateWeight(options.weight);\n            this._podAffinityPreferred.push({ weight: options.weight, podAffinityTerm: term });\n        }\n        else {\n            this._podAffinityRequired.push(term);\n        }\n    }\n    /**\n     * Seperate this pod from a scheduling selection.\n     *\n     * A selection can be one of:\n     *\n     * - An instance of a `Pod`.\n     * - An instance of a `Workload` (e.g `Deployment`, `StatefulSet`).\n     * - An un-managed pod that can be selected via `Pods.select()`.\n     *\n     * Seperating from multiple selections acts as an AND condition. meaning the pod\n     * will not be assigned to a node that satisfies all selections (i.e runs at least one pod that satisifies each selection).\n     *\n     * Under the hood, this method utilizes the `podAntiAffinity` property.\n     *\n     * @see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n     */\n    separate(selector, options = {}) {\n        var _t;\n        const topology = (_t = options.topology) !== null && _t !== void 0 ? _t : Topology.HOSTNAME;\n        const term = this.createPodAffinityTerm(topology, selector);\n        if (options.weight) {\n            this.validateWeight(options.weight);\n            this._podAntiAffinityPreferred.push({ weight: options.weight, podAffinityTerm: term });\n        }\n        else {\n            this._podAntiAffinityRequired.push(term);\n        }\n    }\n    createPodAffinityTerm(topology, selector) {\n        var _t, _u, _v;\n        const config = selector.toPodSelectorConfig();\n        return {\n            topologyKey: topology.key,\n            labelSelector: config.labelSelector._toKube(),\n            namespaceSelector: (_u = (_t = config.namespaces) === null || _t === void 0 ? void 0 : _t.labelSelector) === null || _u === void 0 ? void 0 : _u._toKube(),\n            namespaces: (_v = config.namespaces) === null || _v === void 0 ? void 0 : _v.names,\n        };\n    }\n    createNodeAffinityTerm(node) {\n        return { matchExpressions: node.labelSelector.map(s => ({ key: s.key, operator: s.operator, values: s.values })) };\n    }\n    validateWeight(weight) {\n        if (weight < 1 || weight > 100) {\n            // https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity-weight\n            throw new Error(`Invalid affinity weight: ${weight}. Must be in range 1-100`);\n        }\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        const atLeastOne = (...arrays) => {\n            return arrays.flat().length > 0;\n        };\n        const hasNodeAffinity = atLeastOne(this._nodeAffinityPreferred, this._nodeAffinityRequired);\n        const hasPodAffinity = atLeastOne(this._podAffinityPreferred, this._podAffinityRequired);\n        const hasPodAntiAffinty = atLeastOne(this._podAntiAffinityPreferred, this._podAntiAffinityRequired);\n        const hasAffinity = hasNodeAffinity || hasPodAffinity || hasPodAntiAffinty;\n        return {\n            affinity: hasAffinity ? {\n                nodeAffinity: hasNodeAffinity ? {\n                    preferredDuringSchedulingIgnoredDuringExecution: utils_1.undefinedIfEmpty(this._nodeAffinityPreferred),\n                    requiredDuringSchedulingIgnoredDuringExecution: this._nodeAffinityRequired.length > 0 ? {\n                        nodeSelectorTerms: this._nodeAffinityRequired,\n                    } : undefined,\n                } : undefined,\n                podAffinity: hasPodAffinity ? {\n                    preferredDuringSchedulingIgnoredDuringExecution: utils_1.undefinedIfEmpty(this._podAffinityPreferred),\n                    requiredDuringSchedulingIgnoredDuringExecution: utils_1.undefinedIfEmpty(this._podAffinityRequired),\n                } : undefined,\n                podAntiAffinity: hasPodAntiAffinty ? {\n                    preferredDuringSchedulingIgnoredDuringExecution: utils_1.undefinedIfEmpty(this._podAntiAffinityPreferred),\n                    requiredDuringSchedulingIgnoredDuringExecution: utils_1.undefinedIfEmpty(this._podAntiAffinityRequired),\n                } : undefined,\n            } : undefined,\n            nodeName: this._nodeName,\n            tolerations: utils_1.undefinedIfEmpty(this._tolerations),\n        };\n    }\n}\nexports.PodScheduling = PodScheduling;\n_r = JSII_RTTI_SYMBOL_1;\nPodScheduling[_r] = { fqn: \"cdk8s-plus-22.PodScheduling\", version: \"2.0.0-rc.2\" };\n/**\n * Isolation determines which policies are created\n * when allowing connections from a a pod / workload to peers.\n */\nvar PodConnectionsIsolation;\n(function (PodConnectionsIsolation) {\n    /**\n     * Only creates network policies that select the pod.\n     */\n    PodConnectionsIsolation[\"POD\"] = \"POD\";\n    /**\n     * Only creates network policies that select the peer.\n     */\n    PodConnectionsIsolation[\"PEER\"] = \"PEER\";\n})(PodConnectionsIsolation = exports.PodConnectionsIsolation || (exports.PodConnectionsIsolation = {}));\n/**\n * Controls network isolation rules for inter-pod communication.\n */\nclass PodConnections {\n    constructor(instance) {\n        this.instance = instance;\n    }\n    /**\n     * Allow network traffic from this pod to the peer.\n     *\n     * By default, this will create an egress network policy for this pod, and an ingress\n     * network policy for the peer. This is required if both sides are already isolated.\n     * Use `options.isolation` to control this behavior.\n     *\n     * @example\n     *\n     * // create only an egress policy that selects the 'web' pod to allow outgoing traffic\n     * // to the 'redis' pod. this requires the 'redis' pod to not be isolated for ingress.\n     * web.connections.allowTo(redis, { isolation: Isolation.POD })\n     *\n     * // create only an ingress policy that selects the 'redis' peer to allow incoming traffic\n     * // from the 'web' pod. this requires the 'web' pod to not be isolated for egress.\n     * web.connections.allowTo(redis, { isolation: Isolation.PEER })\n     *\n     */\n    allowTo(peer, options = {}) {\n        return this.allow('Egress', peer, { ports: this.extractPorts(peer), ...options });\n    }\n    /**\n     * Allow network traffic from the peer to this pod.\n     *\n     * By default, this will create an ingress network policy for this pod, and an egress\n     * network policy for the peer. This is required if both sides are already isolated.\n     * Use `options.isolation` to control this behavior.\n     *\n     * @example\n     *\n     * // create only an egress policy that selects the 'web' pod to allow outgoing traffic\n     * // to the 'redis' pod. this requires the 'redis' pod to not be isolated for ingress.\n     * redis.connections.allowFrom(web, { isolation: Isolation.PEER })\n     *\n     * // create only an ingress policy that selects the 'redis' peer to allow incoming traffic\n     * // from the 'web' pod. this requires the 'web' pod to not be isolated for egress.\n     * redis.connections.allowFrom(web, { isolation: Isolation.POD })\n     *\n     */\n    allowFrom(peer, options = {}) {\n        return this.allow('Ingress', peer, { ports: this.extractPorts(this.instance), ...options });\n    }\n    allow(direction, peer, options = {}) {\n        const config = peer.toNetworkPolicyPeerConfig();\n        networkpolicy.validatePeerConfig(config);\n        const peerAddress = utils_1.address(peer);\n        if (!options.isolation || options.isolation === PodConnectionsIsolation.POD) {\n            const src = new networkpolicy.NetworkPolicy(this.instance, `Allow${direction}${peerAddress}`, {\n                selector: this.instance,\n                // the policy must be defined in the namespace of the pod\n                // so it can select it.\n                metadata: { namespace: this.instance.metadata.namespace },\n            });\n            switch (direction) {\n                case 'Egress':\n                    src.addEgressRule(peer, options.ports);\n                    break;\n                case 'Ingress':\n                    src.addIngressRule(peer, options.ports);\n            }\n        }\n        if (!options.isolation || options.isolation === PodConnectionsIsolation.PEER) {\n            if (config.ipBlock) {\n                // for an ip block we don't need to create the opposite policies\n                return;\n            }\n            const podSelector = peer.toPodSelector();\n            if (!podSelector) {\n                throw new Error(`Unable to create policies for peer '${peer.node.addr}' since its not a pod selector`);\n            }\n            const oppositeDirection = direction === 'Egress' ? 'Ingress' : 'Egress';\n            const podSelectorConfig = podSelector.toPodSelectorConfig();\n            let namespaces;\n            if (!podSelectorConfig.namespaces) {\n                // if the peer doesn't specify namespaces, we assume the same namespace.\n                namespaces = [this.instance.metadata.namespace];\n            }\n            else {\n                // a peer cannot specify namespaces by labels because\n                // we won't be able to extract the names of those namespaces.\n                if (podSelectorConfig.namespaces.labelSelector && !podSelectorConfig.namespaces.labelSelector.isEmpty()) {\n                    throw new Error(`Unable to create an ${oppositeDirection} policy for peer '${peer.node.path}' (pod=${this.instance.name}). Peer must specify namespaces only by name`);\n                }\n                // a peer must specify namespaces by name.\n                if (!podSelectorConfig.namespaces.names) {\n                    throw new Error(`Unable to create an ${oppositeDirection} policy for peer '${peer.node.path}' (pod=${this.instance.name}). Peer must specify namespace names`);\n                }\n                namespaces = podSelectorConfig.namespaces.names;\n            }\n            for (const name of namespaces) {\n                switch (direction) {\n                    case 'Egress':\n                        new networkpolicy.NetworkPolicy(this.instance, `AllowIngress${name}${peerAddress}`, {\n                            selector: podSelector,\n                            metadata: { namespace: name },\n                            ingress: { rules: [{ peer: this.instance, ports: options.ports }] },\n                        });\n                        break;\n                    case 'Ingress':\n                        new networkpolicy.NetworkPolicy(this.instance, `AllowEgress${name}${peerAddress}`, {\n                            selector: podSelector,\n                            metadata: { namespace: name },\n                            egress: { rules: [{ peer: this.instance, ports: options.ports }] },\n                        });\n                        break;\n                    default:\n                        throw new Error(`Unsupported direction: ${direction}`);\n                }\n            }\n        }\n    }\n    extractPorts(selector) {\n        return container.extractContainerPorts(selector).map(n => networkpolicy.NetworkPolicyPort.tcp(n));\n    }\n}\nexports.PodConnections = PodConnections;\n_s = JSII_RTTI_SYMBOL_1;\nPodConnections[_s] = { fqn: \"cdk8s-plus-22.PodConnections\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Probe = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst _action = require(\"./_action\");\n/**\n * Probe describes a health check to be performed against a container to\n * determine whether it is alive or ready to receive traffic.\n */\nclass Probe {\n    constructor(probeOptions, tcpSocketOptions, commandOptions, httpGetOptions) {\n        this.probeOptions = probeOptions;\n        this.tcpSocketOptions = tcpSocketOptions;\n        this.commandOptions = commandOptions;\n        this.httpGetOptions = httpGetOptions;\n    }\n    /**\n     * Defines a probe based on an HTTP GET request to the IP address of the container.\n     *\n     * @param path The URL path to hit\n     * @param options Options\n     */\n    static fromHttpGet(path, options = {}) {\n        return new Probe(options, undefined, undefined, { path, ...options });\n    }\n    /**\n     * Defines a probe based on a command which is executed within the container.\n     *\n     * @param command The command to execute\n     * @param options Options\n     */\n    static fromCommand(command, options = {}) {\n        return new Probe(options, undefined, { command, ...options }, undefined);\n    }\n    /**\n     * Defines a probe based opening a connection to a TCP socket on the container.\n     *\n     * @param options Options\n     */\n    static fromTcpSocket(options = {}) {\n        return new Probe(options, options, undefined, undefined);\n    }\n    /**\n     * @internal\n     */\n    _toKube(cont) {\n        var _b;\n        const exec = this.commandOptions ? _action.Action.fromCommand(this.commandOptions.command) : undefined;\n        const httpGet = this.httpGetOptions ? _action.Action.fromHttpGet(cont, this.httpGetOptions.path, this.httpGetOptions) : undefined;\n        const tcpSocket = this.tcpSocketOptions ? _action.Action.fromTcpSocket(cont, this.tcpSocketOptions) : undefined;\n        return {\n            failureThreshold: (_b = this.probeOptions.failureThreshold) !== null && _b !== void 0 ? _b : 3,\n            initialDelaySeconds: this.probeOptions.initialDelaySeconds ? this.probeOptions.initialDelaySeconds.toSeconds() : undefined,\n            periodSeconds: this.probeOptions.periodSeconds ? this.probeOptions.periodSeconds.toSeconds() : undefined,\n            successThreshold: this.probeOptions.successThreshold,\n            timeoutSeconds: this.probeOptions.timeoutSeconds ? this.probeOptions.timeoutSeconds.toSeconds() : undefined,\n            exec: exec,\n            httpGet,\n            tcpSocket,\n        };\n    }\n}\nexports.Probe = Probe;\n_a = JSII_RTTI_SYMBOL_1;\nProbe[_a] = { fqn: \"cdk8s-plus-22.Probe\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GCEPersistentDiskPersistentVolume = exports.AzureDiskPersistentVolume = exports.AwsElasticBlockStorePersistentVolume = exports.PersistentVolumeReclaimPolicy = exports.PersistentVolume = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst constructs_1 = require(\"constructs\");\nconst base = require(\"./base\");\nconst k8s = require(\"./imports/k8s\");\nconst pvc = require(\"./pvc\");\nconst volume = require(\"./volume\");\nclass ImportedPersistentVolume extends constructs_1.Construct {\n    constructor(scope, id, name) {\n        super(scope, id);\n        this._name = name;\n    }\n    get name() {\n        return this._name;\n    }\n    get apiVersion() {\n        return k8s.KubePersistentVolume.GVK.apiVersion;\n    }\n    get apiGroup() {\n        return '';\n    }\n    get kind() {\n        return k8s.KubePersistentVolume.GVK.kind;\n    }\n}\n/**\n * A PersistentVolume (PV) is a piece of storage in the cluster that has been\n * provisioned by an administrator or dynamically provisioned using Storage Classes.\n * It is a resource in the cluster just like a node is a cluster resource.\n * PVs are volume plugins like Volumes, but have a lifecycle independent of any\n * individual Pod that uses the PV. This API object captures the details of the\n * implementation of the storage, be that NFS, iSCSI, or a\n * cloud-provider-specific storage system.\n */\nclass PersistentVolume extends base.Resource {\n    constructor(scope, id, props = {}) {\n        var _e, _f;\n        super(scope, id);\n        this.resourceType = 'persistentvolumes';\n        this.storage = props.storage;\n        this.mode = (_e = props.volumeMode) !== null && _e !== void 0 ? _e : pvc.PersistentVolumeMode.FILE_SYSTEM;\n        this.storageClassName = props.storageClassName;\n        this._accessModes = props.accessModes;\n        this.mountOptions = props.mountOptions;\n        this.reclaimPolicy = (_f = props.reclaimPolicy) !== null && _f !== void 0 ? _f : PersistentVolumeReclaimPolicy.RETAIN;\n        if (props.claim) {\n            this.bind(props.claim);\n        }\n        this.apiObject = new k8s.KubePersistentVolume(this, 'Resource', {\n            metadata: props.metadata,\n            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),\n        });\n    }\n    /**\n     * Imports a pv from the cluster as a reference.\n     */\n    static fromPersistentVolumeName(scope, id, volumeName) {\n        return new ImportedPersistentVolume(scope, id, volumeName);\n    }\n    /**\n     * Access modes requirement of this claim.\n     */\n    get accessModes() {\n        return this._accessModes ? [...this._accessModes] : undefined;\n    }\n    /**\n     * PVC this volume is bound to. Undefined means this volume is not yet\n     * claimed by any PVC.\n     */\n    get claim() {\n        return this._claim;\n    }\n    /**\n     * Reserve a `PersistentVolume` by creating a `PersistentVolumeClaim`\n     * that is wired to claim this volume.\n     *\n     * Note that this method will throw in case the volume is already claimed.\n     *\n     * @see https://kubernetes.io/docs/concepts/storage/persistent-volumes/#reserving-a-persistentvolume\n     */\n    reserve() {\n        const claim = new pvc.PersistentVolumeClaim(this, `${this.name}PVC`, {\n            metadata: { name: `pvc-${this.name}`, namespace: this.metadata.namespace },\n            // the storage classes must match, otherwise the claim\n            // will use the default class (or no class at all), which may be different than the class\n            // of this volume. note that other requirements are not needed since\n            // when they are not defined, any volume satisifies them.\n            storageClassName: this.storageClassName,\n        });\n        this.bind(claim);\n        claim.bind(this);\n        return claim;\n    }\n    /**\n     * Bind a volume to a specific claim.\n     * Note that you must also bind the claim to the volume.\n     *\n     * @see https://kubernetes.io/docs/concepts/storage/persistent-volumes/#binding\n     *\n     * @param claim The PVC to bind to.\n     */\n    bind(claim) {\n        if (this._claim && this._claim.name !== claim.name) {\n            throw new Error(`Cannot bind volume '${this.name}' to claim '${claim.name}' since it is already bound to claim '${this._claim.name}'`);\n        }\n        this._claim = claim;\n    }\n    asVolume() {\n        const claim = this.reserve();\n        return volume.Volume.fromPersistentVolumeClaim(this, 'Volume', claim);\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        var _e, _f, _g;\n        const storage = this.storage ? k8s.Quantity.fromString(this.storage.toGibibytes() + 'Gi') : undefined;\n        return {\n            claimRef: this._claim ? { name: (_e = this._claim) === null || _e === void 0 ? void 0 : _e.name } : undefined,\n            accessModes: (_f = this.accessModes) === null || _f === void 0 ? void 0 : _f.map(a => a.toString()),\n            capacity: storage ? { storage } : undefined,\n            mountOptions: (_g = this.mountOptions) === null || _g === void 0 ? void 0 : _g.map(o => o),\n            storageClassName: this.storageClassName,\n            persistentVolumeReclaimPolicy: this.reclaimPolicy,\n            volumeMode: this.mode,\n        };\n    }\n}\nexports.PersistentVolume = PersistentVolume;\n_a = JSII_RTTI_SYMBOL_1;\nPersistentVolume[_a] = { fqn: \"cdk8s-plus-22.PersistentVolume\", version: \"2.0.0-rc.2\" };\n/**\n * Reclaim Policies.\n */\nvar PersistentVolumeReclaimPolicy;\n(function (PersistentVolumeReclaimPolicy) {\n    /**\n     * The Retain reclaim policy allows for manual reclamation of the resource.\n     * When the PersistentVolumeClaim is deleted, the PersistentVolume still exists and the\n     * volume is considered \"released\". But it is not yet available for another claim\n     * because the previous claimant's data remains on the volume.\n     * An administrator can manually reclaim the volume with the following steps:\n     *\n     * 1. Delete the PersistentVolume. The associated storage asset in external\n     *    infrastructure (such as an AWS EBS, GCE PD, Azure Disk, or Cinder volume) still exists after the PV is deleted.\n     * 2. Manually clean up the data on the associated storage asset accordingly.\n     * 3. Manually delete the associated storage asset.\n     *\n     * If you want to reuse the same storage asset, create a new PersistentVolume\n     * with the same storage asset definition.\n     */\n    PersistentVolumeReclaimPolicy[\"RETAIN\"] = \"Retain\";\n    /**\n     * For volume plugins that support the Delete reclaim policy, deletion removes both the\n     * PersistentVolume object from Kubernetes, as well as the associated storage asset in\n     * the external infrastructure, such as an AWS EBS, GCE PD, Azure Disk, or Cinder volume.\n     * Volumes that were dynamically provisioned inherit the reclaim policy of their StorageClass, which defaults to Delete.\n     * The administrator should configure the StorageClass according to users' expectations; otherwise,\n     * the PV must be edited or patched after it is created\n     */\n    PersistentVolumeReclaimPolicy[\"DELETE\"] = \"Delete\";\n})(PersistentVolumeReclaimPolicy = exports.PersistentVolumeReclaimPolicy || (exports.PersistentVolumeReclaimPolicy = {}));\n/**\n * Represents an AWS Disk resource that is attached to a kubelet's host machine and\n * then exposed to the pod.\n *\n * @see https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n */\nclass AwsElasticBlockStorePersistentVolume extends PersistentVolume {\n    constructor(scope, id, props) {\n        var _e, _f;\n        super(scope, id, props);\n        this.volumeId = props.volumeId;\n        this.readOnly = (_e = props.readOnly) !== null && _e !== void 0 ? _e : false;\n        this.fsType = (_f = props.fsType) !== null && _f !== void 0 ? _f : 'ext4';\n        this.partition = props.partition;\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        const spec = super._toKube();\n        return {\n            ...spec,\n            awsElasticBlockStore: {\n                volumeId: this.volumeId,\n                fsType: this.fsType,\n                partition: this.partition,\n                readOnly: this.readOnly,\n            },\n        };\n    }\n}\nexports.AwsElasticBlockStorePersistentVolume = AwsElasticBlockStorePersistentVolume;\n_b = JSII_RTTI_SYMBOL_1;\nAwsElasticBlockStorePersistentVolume[_b] = { fqn: \"cdk8s-plus-22.AwsElasticBlockStorePersistentVolume\", version: \"2.0.0-rc.2\" };\n/**\n * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n */\nclass AzureDiskPersistentVolume extends PersistentVolume {\n    constructor(scope, id, props) {\n        var _e, _f, _g, _h;\n        super(scope, id, props);\n        this.diskName = props.diskName;\n        this.diskUri = props.diskUri;\n        this.cachingMode = (_e = props.cachingMode) !== null && _e !== void 0 ? _e : volume.AzureDiskPersistentVolumeCachingMode.NONE;\n        this.fsType = (_f = props.fsType) !== null && _f !== void 0 ? _f : 'ext4';\n        this.azureKind = (_g = props.kind) !== null && _g !== void 0 ? _g : volume.AzureDiskPersistentVolumeKind.SHARED;\n        this.readOnly = (_h = props.readOnly) !== null && _h !== void 0 ? _h : false;\n    }\n    /**\n     * @internal\n     *\n     * @see https://github.com/kubernetes/examples/blob/master/staging/volumes/azure_disk/README.md\n     */\n    _toKube() {\n        const spec = super._toKube();\n        return {\n            ...spec,\n            azureDisk: {\n                diskName: this.diskName,\n                diskUri: this.diskUri,\n                cachingMode: this.cachingMode,\n                fsType: this.fsType,\n                kind: this.azureKind,\n                readOnly: this.readOnly,\n            },\n        };\n    }\n}\nexports.AzureDiskPersistentVolume = AzureDiskPersistentVolume;\n_c = JSII_RTTI_SYMBOL_1;\nAzureDiskPersistentVolume[_c] = { fqn: \"cdk8s-plus-22.AzureDiskPersistentVolume\", version: \"2.0.0-rc.2\" };\n/**\n * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine\n * and then exposed to the pod. Provisioned by an admin.\n *\n * @see https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n */\nclass GCEPersistentDiskPersistentVolume extends PersistentVolume {\n    constructor(scope, id, props) {\n        var _e, _f;\n        super(scope, id, props);\n        this.pdName = props.pdName;\n        this.readOnly = (_e = props.readOnly) !== null && _e !== void 0 ? _e : false;\n        this.fsType = (_f = props.fsType) !== null && _f !== void 0 ? _f : 'ext4';\n        this.partition = props.partition;\n    }\n    /**\n     * @internal\n     *\n     * @see https://github.com/kubernetes/examples/blob/master/staging/volumes/azure_disk/README.md\n     */\n    _toKube() {\n        const spec = super._toKube();\n        return {\n            ...spec,\n            gcePersistentDisk: {\n                pdName: this.pdName,\n                fsType: this.fsType,\n                partition: this.partition,\n                readOnly: this.readOnly,\n            },\n        };\n    }\n}\nexports.GCEPersistentDiskPersistentVolume = GCEPersistentDiskPersistentVolume;\n_d = JSII_RTTI_SYMBOL_1;\nGCEPersistentDiskPersistentVolume[_d] = { fqn: \"cdk8s-plus-22.GCEPersistentDiskPersistentVolume\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PersistentVolumeMode = exports.PersistentVolumeAccessMode = exports.PersistentVolumeClaim = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst constructs_1 = require(\"constructs\");\nconst base = require(\"./base\");\nconst k8s = require(\"./imports/k8s\");\nclass ImportedPersistentVolumeClaim extends constructs_1.Construct {\n    constructor(scope, id, name) {\n        super(scope, id);\n        this._name = name;\n    }\n    get name() {\n        return this._name;\n    }\n    get apiVersion() {\n        return k8s.KubePersistentVolumeClaim.GVK.apiVersion;\n    }\n    get apiGroup() {\n        return '';\n    }\n    get kind() {\n        return k8s.KubePersistentVolumeClaim.GVK.kind;\n    }\n}\n/**\n * A PersistentVolumeClaim (PVC) is a request for storage by a user.\n * It is similar to a Pod. Pods consume node resources and PVCs consume PV resources.\n * Pods can request specific levels of resources (CPU and Memory).\n * Claims can request specific size and access modes\n */\nclass PersistentVolumeClaim extends base.Resource {\n    constructor(scope, id, props = {}) {\n        var _b;\n        super(scope, id);\n        this.resourceType = 'persistentvolumeclaims';\n        this.storage = props.storage;\n        this.volumeMode = (_b = props.volumeMode) !== null && _b !== void 0 ? _b : PersistentVolumeMode.FILE_SYSTEM;\n        this.storageClassName = props.storageClassName;\n        this._accessModes = props.accessModes;\n        if (props.volume) {\n            this.bind(props.volume);\n        }\n        this.apiObject = new k8s.KubePersistentVolumeClaim(this, 'Resource', {\n            metadata: props.metadata,\n            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),\n        });\n    }\n    /**\n     * Imports a pvc from the cluster as a reference.\n     */\n    static fromClaimName(scope, id, claimName) {\n        return new ImportedPersistentVolumeClaim(scope, id, claimName);\n    }\n    /**\n     * Access modes requirement of this claim.\n     */\n    get accessModes() {\n        return this._accessModes ? [...this._accessModes] : undefined;\n    }\n    /**\n     * PV this claim is bound to. Undefined means the claim is not bound\n     * to any specific volume.\n     */\n    get volume() {\n        return this._volume;\n    }\n    /**\n     * Bind a claim to a specific volume.\n     * Note that you must also bind the volume to the claim.\n     *\n     * @see https://kubernetes.io/docs/concepts/storage/persistent-volumes/#binding\n     *\n     * @param vol The PV to bind to.\n     */\n    bind(vol) {\n        if (this._volume && this._volume.name !== vol.name) {\n            throw new Error(`Cannot bind claim '${this.name}' to volume '${vol.name}' since it is already bound to volume '${this._volume.name}'`);\n        }\n        this._volume = vol;\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        var _b;\n        const storage = this.storage ? k8s.Quantity.fromString(this.storage.toGibibytes() + 'Gi') : undefined;\n        return {\n            volumeName: this.volume ? this.volume.name : undefined,\n            accessModes: (_b = this.accessModes) === null || _b === void 0 ? void 0 : _b.map(a => a.toString()),\n            resources: storage ? { requests: { storage } } : undefined,\n            volumeMode: this.volumeMode,\n            storageClassName: this.storageClassName,\n        };\n    }\n}\nexports.PersistentVolumeClaim = PersistentVolumeClaim;\n_a = JSII_RTTI_SYMBOL_1;\nPersistentVolumeClaim[_a] = { fqn: \"cdk8s-plus-22.PersistentVolumeClaim\", version: \"2.0.0-rc.2\" };\n/**\n * Access Modes.\n */\nvar PersistentVolumeAccessMode;\n(function (PersistentVolumeAccessMode) {\n    /**\n     * The volume can be mounted as read-write by a single node.\n     * ReadWriteOnce access mode still can allow multiple pods to access\n     * the volume when the pods are running on the same node.\n     */\n    PersistentVolumeAccessMode[\"READ_WRITE_ONCE\"] = \"ReadWriteOnce\";\n    /**\n     * The volume can be mounted as read-only by many nodes.\n     */\n    PersistentVolumeAccessMode[\"READ_ONLY_MANY\"] = \"ReadOnlyMany\";\n    /**\n     * The volume can be mounted as read-write by many nodes.\n     */\n    PersistentVolumeAccessMode[\"READ_WRITE_MANY\"] = \"ReadWriteMany\";\n    /**\n     * The volume can be mounted as read-write by a single Pod.\n     * Use ReadWriteOncePod access mode if you want to ensure that\n     * only one pod across whole cluster can read that PVC or write to it.\n     * This is only supported for CSI volumes and Kubernetes version 1.22+.\n     */\n    PersistentVolumeAccessMode[\"READ_WRITE_ONCE_POD\"] = \"ReadWriteOncePod\";\n})(PersistentVolumeAccessMode = exports.PersistentVolumeAccessMode || (exports.PersistentVolumeAccessMode = {}));\n/**\n * Volume Modes.\n */\nvar PersistentVolumeMode;\n(function (PersistentVolumeMode) {\n    /**\n     * Volume is ounted into Pods into a directory.\n     * If the volume is backed by a block device and the device is empty,\n     * Kubernetes creates a filesystem on the device before mounting it\n     * for the first time.\n     */\n    PersistentVolumeMode[\"FILE_SYSTEM\"] = \"Filesystem\";\n    /**\n     * Use a volume as a raw block device. Such volume is presented into a Pod as a block device,\n     * without any filesystem on it. This mode is useful to provide a Pod the fastest possible way\n     * to access a volume, without any filesystem layer between the Pod\n     * and the volume. On the other hand, the application running in\n     * the Pod must know how to handle a raw block device\n     */\n    PersistentVolumeMode[\"BLOCK\"] = \"Block\";\n})(PersistentVolumeMode = exports.PersistentVolumeMode || (exports.PersistentVolumeMode = {}));\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Group = exports.User = exports.ClusterRoleBinding = exports.RoleBinding = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst constructs_1 = require(\"constructs\");\nconst base_1 = require(\"./base\");\nconst k8s = require(\"./imports/k8s\");\nconst utils_1 = require(\"./utils\");\n/**\n * A RoleBinding grants permissions within a specific namespace to a user or\n * set of users.\n */\nclass RoleBinding extends base_1.Resource {\n    constructor(scope, id, props) {\n        super(scope, id);\n        this.resourceType = 'rolebindings';\n        this.role = props.role;\n        this._subjects = new Array();\n        this.apiObject = new k8s.KubeRoleBinding(this, 'Resource', {\n            metadata: props.metadata,\n            subjects: cdk8s_1.Lazy.any({ produce: () => this.synthesizeSubjects() }),\n            roleRef: cdk8s_1.Lazy.any({ produce: () => this.synthesizeRoleRef() }),\n        });\n    }\n    /**\n     * Adds a subject to the role.\n     * @param subjects The subjects to add\n     */\n    addSubjects(...subjects) {\n        for (const subject of subjects) {\n            this._subjects.push(subject);\n        }\n    }\n    get subjects() {\n        return [...this._subjects];\n    }\n    synthesizeRoleRef() {\n        return {\n            apiGroup: this.role.apiGroup,\n            kind: this.role.kind,\n            name: this.role.name,\n        };\n    }\n    synthesizeSubjects() {\n        return this._subjects.map(subject => subject.toSubjectConfiguration()).map((subject) => utils_1.filterUndefined({\n            apiGroup: subject.apiGroup === 'core' ? '' : subject.apiGroup,\n            kind: subject.kind,\n            name: subject.name,\n            namespace: subject.namespace,\n        }));\n    }\n}\nexports.RoleBinding = RoleBinding;\n_a = JSII_RTTI_SYMBOL_1;\nRoleBinding[_a] = { fqn: \"cdk8s-plus-22.RoleBinding\", version: \"2.0.0-rc.2\" };\n/**\n * A ClusterRoleBinding grants permissions cluster-wide to a user or\n * set of users.\n */\nclass ClusterRoleBinding extends base_1.Resource {\n    constructor(scope, id, props) {\n        super(scope, id);\n        this.resourceType = 'clusterrolebindings';\n        this.role = props.role;\n        this._subjects = new Array();\n        this.apiObject = new k8s.KubeClusterRoleBinding(this, 'Resource', {\n            metadata: props.metadata,\n            subjects: cdk8s_1.Lazy.any({ produce: () => this.synthesizeSubjects() }),\n            roleRef: cdk8s_1.Lazy.any({ produce: () => this.synthesizeRoleRef() }),\n        });\n    }\n    /**\n     * Adds a subject to the role.\n     * @param subjects The subjects to add\n     */\n    addSubjects(...subjects) {\n        for (const subject of subjects) {\n            this._subjects.push(subject);\n        }\n    }\n    get subjects() {\n        return [...this._subjects];\n    }\n    synthesizeRoleRef() {\n        return {\n            apiGroup: this.role.apiGroup,\n            kind: this.role.kind,\n            name: this.role.name,\n        };\n    }\n    synthesizeSubjects() {\n        return this._subjects.map(subject => subject.toSubjectConfiguration()).map((subject) => utils_1.filterUndefined({\n            apiGroup: subject.apiGroup === 'core' ? '' : subject.apiGroup,\n            kind: subject.kind,\n            name: subject.name,\n            namespace: subject.namespace,\n        }));\n    }\n}\nexports.ClusterRoleBinding = ClusterRoleBinding;\n_b = JSII_RTTI_SYMBOL_1;\nClusterRoleBinding[_b] = { fqn: \"cdk8s-plus-22.ClusterRoleBinding\", version: \"2.0.0-rc.2\" };\n/**\n * Represents a user.\n */\nclass User extends constructs_1.Construct {\n    constructor(scope, id, name) {\n        super(scope, id);\n        this.apiGroup = 'rbac.authorization.k8s.io';\n        this.kind = 'User';\n        this.name = name;\n    }\n    /**\n     * Reference a user in the cluster by name.\n     */\n    static fromName(scope, id, name) {\n        return new User(scope, id, name);\n    }\n    /**\n     * @see ISubect.toSubjectConfiguration()\n     */\n    toSubjectConfiguration() {\n        return {\n            kind: this.kind,\n            name: this.name,\n            apiGroup: this.apiGroup,\n        };\n    }\n}\nexports.User = User;\n_c = JSII_RTTI_SYMBOL_1;\nUser[_c] = { fqn: \"cdk8s-plus-22.User\", version: \"2.0.0-rc.2\" };\n/**\n * Represents a group.\n */\nclass Group extends constructs_1.Construct {\n    constructor(scope, id, name) {\n        super(scope, id);\n        this.apiGroup = 'rbac.authorization.k8s.io';\n        this.kind = 'Group';\n        this.name = name;\n    }\n    /**\n     * Reference a group by name.\n     */\n    static fromName(scope, id, name) {\n        return new Group(scope, id, name);\n    }\n    /**\n     * @see ISubect.toSubjectConfiguration()\n     */\n    toSubjectConfiguration() {\n        return {\n            kind: this.kind,\n            name: this.name,\n            apiGroup: this.apiGroup,\n        };\n    }\n}\nexports.Group = Group;\n_d = JSII_RTTI_SYMBOL_1;\nGroup[_d] = { fqn: \"cdk8s-plus-22.Group\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClusterRole = exports.Role = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst constructs_1 = require(\"constructs\");\nconst base = require(\"./base\");\nconst k8s = require(\"./imports/k8s\");\nconst rb = require(\"./role-binding\");\nconst utils_1 = require(\"./utils\");\nclass ImportedRole extends constructs_1.Construct {\n    constructor(scope, id, name) {\n        super(scope, id);\n        this._name = name;\n    }\n    get name() {\n        return this._name;\n    }\n    get apiVersion() {\n        return k8s.KubeRole.GVK.apiVersion;\n    }\n    get apiGroup() {\n        return 'rbac.authorization.k8s.io';\n    }\n    get kind() {\n        return k8s.KubeRole.GVK.kind;\n    }\n}\n/**\n * Role is a namespaced, logical grouping of PolicyRules that can be referenced\n * as a unit by a RoleBinding.\n */\nclass Role extends base.Resource {\n    constructor(scope, id, props = {}) {\n        super(scope, id);\n        this.resourceType = 'roles';\n        this._rules = [];\n        this.apiObject = new k8s.KubeRole(this, 'Resource', {\n            metadata: props.metadata,\n            rules: cdk8s_1.Lazy.any({ produce: () => this.synthesizeRules() }),\n        });\n    }\n    /**\n     * Imports a role from the cluster as a reference.\n     */\n    static fromRoleName(scope, id, name) {\n        return new ImportedRole(scope, id, name);\n    }\n    /**\n     * Rules associaated with this Role.\n     * Returns a copy, use `allow` to add rules.\n     */\n    get rules() {\n        return [...this._rules];\n    }\n    /**\n     * Add permission to perform a list of HTTP verbs on a collection of\n     * resources.\n     *\n     * @param resources The resource(s) to apply to\n     * @see https://kubernetes.io/docs/reference/access-authn-authz/authorization/#determine-the-request-verb\n     */\n    allow(verbs, ...resources) {\n        this._rules.push({ verbs, resources });\n    }\n    /**\n     * Add \"create\" permission for the resources.\n     * @param resources The resource(s) to apply to\n     */\n    allowCreate(...resources) {\n        this.allow(['create'], ...resources);\n    }\n    /**\n     * Add \"get\" permission for the resources.\n     * @param resources The resource(s) to apply to\n     */\n    allowGet(...resources) {\n        this.allow(['get'], ...resources);\n    }\n    /**\n     * Add \"list\" permission for the resources.\n     * @param resources The resource(s) to apply to\n     */\n    allowList(...resources) {\n        this.allow(['list'], ...resources);\n    }\n    /**\n     * Add \"watch\" permission for the resources.\n     * @param resources The resource(s) to apply to\n     */\n    allowWatch(...resources) {\n        this.allow(['watch'], ...resources);\n    }\n    /**\n     * Add \"update\" permission for the resources.\n     * @param resources The resource(s) to apply to\n     */\n    allowUpdate(...resources) {\n        this.allow(['update'], ...resources);\n    }\n    /**\n     * Add \"patch\" permission for the resources.\n     * @param resources The resource(s) to apply to\n     */\n    allowPatch(...resources) {\n        this.allow(['patch'], ...resources);\n    }\n    /**\n     * Add \"delete\" permission for the resources.\n     * @param resources The resource(s) to apply to\n     */\n    allowDelete(...resources) {\n        this.allow(['delete'], ...resources);\n    }\n    /**\n     * Add \"deletecollection\" permission for the resources.\n     * @param resources The resource(s) to apply to\n     */\n    allowDeleteCollection(...resources) {\n        this.allow(['deletecollection'], ...resources);\n    }\n    /**\n     * Add \"get\", \"list\", and \"watch\" permissions for the resources.\n     * @param resources The resource(s) to apply to\n     */\n    allowRead(...resources) {\n        this.allow(['get', 'list', 'watch'], ...resources);\n    }\n    /**\n     * Add \"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\", and\n     * \"deletecollection\" permissions for the resources.\n     *\n     * @param resources The resource(s) to apply to\n     */\n    allowReadWrite(...resources) {\n        this.allow(['get', 'list', 'watch', 'create', 'update', 'patch', 'delete', 'deletecollection'], ...resources);\n    }\n    /**\n     * Create a RoleBinding that binds the permissions in this Role\n     * to a list of subjects, that will only apply this role's namespace.\n     * @param subjects a list of subjects to bind to\n     */\n    bind(...subjects) {\n        const subjectsAddress = utils_1.address(...subjects);\n        const binding = new rb.RoleBinding(this, `RoleBinding${subjectsAddress}`, {\n            metadata: {\n                namespace: this.metadata.namespace,\n            },\n            role: this,\n        });\n        binding.addSubjects(...subjects);\n        return binding;\n    }\n    synthesizeRules() {\n        const rules = [];\n        for (const rule of this._rules) {\n            for (const resource of rule.resources) {\n                rules.push({\n                    verbs: rule.verbs,\n                    apiGroups: [resource.apiGroup === 'core' ? '' : resource.apiGroup],\n                    resourceNames: resource.resourceName ? [resource.resourceName] : undefined,\n                    resources: resource.resourceType ? [resource.resourceType] : undefined,\n                });\n            }\n        }\n        return rules;\n    }\n}\nexports.Role = Role;\n_a = JSII_RTTI_SYMBOL_1;\nRole[_a] = { fqn: \"cdk8s-plus-22.Role\", version: \"2.0.0-rc.2\" };\nclass ImportedClusterRole extends constructs_1.Construct {\n    constructor(scope, id, name) {\n        super(scope, id);\n        this._name = name;\n    }\n    get name() {\n        return this._name;\n    }\n    get apiVersion() {\n        return k8s.KubeClusterRole.GVK.apiVersion;\n    }\n    get apiGroup() {\n        return 'rbac.authorization.k8s.io';\n    }\n    get kind() {\n        return k8s.KubeClusterRole.GVK.kind;\n    }\n}\n/**\n * ClusterRole is a cluster level, logical grouping of PolicyRules that can be\n * referenced as a unit by a RoleBinding or ClusterRoleBinding.\n */\nclass ClusterRole extends base.Resource {\n    constructor(scope, id, props = {}) {\n        var _c, _d;\n        super(scope, id);\n        this.resourceType = 'clusterroles';\n        this._labelSelector = {};\n        this._rules = [];\n        this.apiObject = new k8s.KubeClusterRole(this, 'Resource', {\n            metadata: props.metadata,\n            rules: cdk8s_1.Lazy.any({ produce: () => this.synthesizeRules() }),\n            aggregationRule: cdk8s_1.Lazy.any({ produce: () => this.synthesizeAggregationRules() }),\n        });\n        for (const rule of (_c = props.rules) !== null && _c !== void 0 ? _c : []) {\n            this.allow(rule.verbs, ...rule.endpoints);\n        }\n        for (const [key, value] of Object.entries((_d = props.aggregationLabels) !== null && _d !== void 0 ? _d : {})) {\n            this.aggregate(key, value);\n        }\n    }\n    /**\n     * Imports a role from the cluster as a reference.\n     */\n    static fromClusterRoleName(scope, id, name) {\n        return new ImportedClusterRole(scope, id, name);\n    }\n    /**\n     * Rules associaated with this Role.\n     * Returns a copy, use `allow` to add rules.\n     */\n    get rules() {\n        return [...this._rules];\n    }\n    /**\n     * Add permission to perform a list of HTTP verbs on a collection of\n     * resources.\n     *\n     * @param endpoints The endpoints(s) to apply to\n     * @see https://kubernetes.io/docs/reference/access-authn-authz/authorization/#determine-the-request-verb\n     */\n    allow(verbs, ...endpoints) {\n        this._rules.push({ verbs, endpoints });\n    }\n    /**\n     * Add \"create\" permission for the resources.\n     * @param endpoints The resource(s) to apply to\n     */\n    allowCreate(...endpoints) {\n        this.allow(['create'], ...endpoints);\n    }\n    /**\n     * Add \"get\" permission for the resources.\n     * @param endpoints The resource(s) to apply to\n     */\n    allowGet(...endpoints) {\n        this.allow(['get'], ...endpoints);\n    }\n    /**\n     * Add \"list\" permission for the resources.\n     * @param endpoints The resource(s) to apply to\n     */\n    allowList(...endpoints) {\n        this.allow(['list'], ...endpoints);\n    }\n    /**\n     * Add \"watch\" permission for the resources.\n     * @param endpoints The resource(s) to apply to\n     */\n    allowWatch(...endpoints) {\n        this.allow(['watch'], ...endpoints);\n    }\n    /**\n     * Add \"update\" permission for the resources.\n     * @param endpoints The resource(s) to apply to\n     */\n    allowUpdate(...endpoints) {\n        this.allow(['update'], ...endpoints);\n    }\n    /**\n     * Add \"patch\" permission for the resources.\n     * @param endpoints The resource(s) to apply to\n     */\n    allowPatch(...endpoints) {\n        this.allow(['patch'], ...endpoints);\n    }\n    /**\n     * Add \"delete\" permission for the resources.\n     * @param endpoints The resource(s) to apply to\n     */\n    allowDelete(...endpoints) {\n        this.allow(['delete'], ...endpoints);\n    }\n    /**\n     * Add \"deletecollection\" permission for the resources.\n     * @param endpoints The resource(s) to apply to\n     */\n    allowDeleteCollection(...endpoints) {\n        this.allow(['deletecollection'], ...endpoints);\n    }\n    /**\n     * Add \"get\", \"list\", and \"watch\" permissions for the resources.\n     * @param endpoints The resource(s) to apply to\n     */\n    allowRead(...endpoints) {\n        this.allow(['get', 'list', 'watch'], ...endpoints);\n    }\n    /**\n     * Add \"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\", and\n     * \"deletecollection\" permissions for the resources.\n     *\n     * @param endpoints The resource(s) to apply to\n     */\n    allowReadWrite(...endpoints) {\n        this.allow(['get', 'list', 'watch', 'create', 'update', 'patch', 'delete', 'deletecollection'], ...endpoints);\n    }\n    /**\n     * Aggregate rules from roles matching this label selector.\n     */\n    aggregate(key, value) {\n        this._labelSelector[key] = value;\n    }\n    /**\n     * Combines the rules of the argument ClusterRole into this ClusterRole\n     * using aggregation labels.\n     * @param rol\n     */\n    combine(rol) {\n        const key = `cdk8s.cluster-role/aggregate-to-${cdk8s_1.Names.toLabelValue(this)}`;\n        const value = 'true';\n        rol.metadata.addLabel(key, value);\n        this.aggregate(key, value);\n    }\n    /**\n     * Create a RoleBinding that binds the permissions in this ClusterRole\n     * to a list of subjects, that will only apply to the given namespace.\n     * @param namespace the namespace to limit permissions to.\n     * @param subjects a list of subjects to bind to\n     */\n    bindInNamespace(namespace, ...subjects) {\n        const binding = new rb.RoleBinding(this, `RoleBinding-${namespace}`, {\n            metadata: {\n                namespace,\n            },\n            role: this,\n        });\n        binding.addSubjects(...subjects);\n        return binding;\n    }\n    /**\n     * Create a ClusterRoleBinding that binds the permissions in this\n     * ClusterRole to a list of subjects, without namespace restrictions.\n     * @param subjects a list of subjects to bind to\n     */\n    bind(...subjects) {\n        const binding = new rb.ClusterRoleBinding(this, 'ClusterRoleBinding', {\n            role: this,\n        });\n        binding.addSubjects(...subjects);\n        return binding;\n    }\n    synthesizeRules() {\n        const rules = [];\n        for (const rule of this._rules) {\n            for (const endpoint of rule.endpoints) {\n                const resource = endpoint.asApiResource();\n                const nonResource = endpoint.asNonApiResource();\n                if (resource && nonResource) {\n                    throw new Error('Endpoint must be either resource or non resource. not both.');\n                }\n                if (!resource && !nonResource) {\n                    throw new Error('Endpoint must be either resource or non resource. not neither.');\n                }\n                if (resource) {\n                    rules.push({\n                        apiGroups: [resource.apiGroup === 'core' ? '' : resource.apiGroup],\n                        resources: [resource.resourceType],\n                        resourceNames: resource.resourceName ? [resource.resourceName] : [],\n                        verbs: rule.verbs,\n                    });\n                }\n                if (nonResource) {\n                    rules.push({ verbs: rule.verbs, nonResourceUrLs: [nonResource] });\n                }\n            }\n        }\n        return rules;\n    }\n    synthesizeAggregationRules() {\n        if (Object.keys(this._labelSelector).length === 0) {\n            return undefined;\n        }\n        return { clusterRoleSelectors: [{ matchLabels: this._labelSelector }] };\n    }\n}\nexports.ClusterRole = ClusterRole;\n_b = JSII_RTTI_SYMBOL_1;\nClusterRole[_b] = { fqn: \"cdk8s-plus-22.ClusterRole\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a, _b, _c, _d, _e, _f;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DockerConfigSecret = exports.TlsSecret = exports.ServiceAccountTokenSecret = exports.SshAuthSecret = exports.BasicAuthSecret = exports.Secret = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst constructs_1 = require(\"constructs\");\nconst base = require(\"./base\");\nconst k8s = require(\"./imports/k8s\");\nclass ImportedSecret extends constructs_1.Construct {\n    constructor(scope, id, name) {\n        super(scope, id);\n        this._name = name;\n    }\n    get name() {\n        return this._name;\n    }\n    get apiVersion() {\n        return k8s.KubeSecret.GVK.apiVersion;\n    }\n    get apiGroup() {\n        return '';\n    }\n    get kind() {\n        return k8s.KubeSecret.GVK.kind;\n    }\n}\n/**\n * Kubernetes Secrets let you store and manage sensitive information, such as\n * passwords, OAuth tokens, and ssh keys. Storing confidential information in a\n * Secret is safer and more flexible than putting it verbatim in a Pod\n * definition or in a container image.\n *\n * @see https://kubernetes.io/docs/concepts/configuration/secret\n */\nclass Secret extends base.Resource {\n    constructor(scope, id, props = {}) {\n        var _g, _h;\n        super(scope, id);\n        this.resourceType = 'secrets';\n        this.stringData = (_g = props.stringData) !== null && _g !== void 0 ? _g : {};\n        this.immutable = (_h = props.immutable) !== null && _h !== void 0 ? _h : false;\n        this.apiObject = new k8s.KubeSecret(this, 'Resource', {\n            metadata: props.metadata,\n            type: props.type,\n            stringData: this.stringData,\n            immutable: this.immutable,\n        });\n    }\n    /**\n     * Imports a secret from the cluster as a reference.\n     */\n    static fromSecretName(scope, id, name) {\n        return new ImportedSecret(scope, id, name);\n    }\n    /**\n     * Adds a string data field to the secert.\n     * @param key Key\n     * @param value Value\n     */\n    addStringData(key, value) {\n        this.stringData[key] = value;\n    }\n    /**\n     * Gets a string data by key or undefined\n     * @param key Key\n     */\n    getStringData(key) {\n        return this.stringData[key];\n    }\n}\nexports.Secret = Secret;\n_a = JSII_RTTI_SYMBOL_1;\nSecret[_a] = { fqn: \"cdk8s-plus-22.Secret\", version: \"2.0.0-rc.2\" };\n/**\n * Create a secret for basic authentication.\n *\n * @see https://kubernetes.io/docs/concepts/configuration/secret/#basic-authentication-secret\n */\nclass BasicAuthSecret extends Secret {\n    constructor(scope, id, props) {\n        super(scope, id, {\n            type: 'kubernetes.io/basic-auth',\n            stringData: {\n                username: props.username,\n                password: props.password,\n            },\n            immutable: props.immutable,\n        });\n    }\n}\nexports.BasicAuthSecret = BasicAuthSecret;\n_b = JSII_RTTI_SYMBOL_1;\nBasicAuthSecret[_b] = { fqn: \"cdk8s-plus-22.BasicAuthSecret\", version: \"2.0.0-rc.2\" };\n/**\n * Create a secret for ssh authentication.\n *\n * @see https://kubernetes.io/docs/concepts/configuration/secret/#ssh-authentication-secrets\n */\nclass SshAuthSecret extends Secret {\n    constructor(scope, id, props) {\n        super(scope, id, {\n            type: 'kubernetes.io/ssh-auth',\n            stringData: {\n                'ssh-privatekey': props.sshPrivateKey,\n            },\n            immutable: props.immutable,\n        });\n    }\n}\nexports.SshAuthSecret = SshAuthSecret;\n_c = JSII_RTTI_SYMBOL_1;\nSshAuthSecret[_c] = { fqn: \"cdk8s-plus-22.SshAuthSecret\", version: \"2.0.0-rc.2\" };\n/**\n * Create a secret for a service account token.\n *\n * @see https://kubernetes.io/docs/concepts/configuration/secret/#service-account-token-secrets\n */\nclass ServiceAccountTokenSecret extends Secret {\n    constructor(scope, id, props) {\n        super(scope, id, {\n            type: 'kubernetes.io/service-account-token',\n            metadata: {\n                annotations: {\n                    'kubernetes.io/service-account.name': props.serviceAccount.name,\n                },\n            },\n            immutable: props.immutable,\n        });\n    }\n}\nexports.ServiceAccountTokenSecret = ServiceAccountTokenSecret;\n_d = JSII_RTTI_SYMBOL_1;\nServiceAccountTokenSecret[_d] = { fqn: \"cdk8s-plus-22.ServiceAccountTokenSecret\", version: \"2.0.0-rc.2\" };\n/**\n * Create a secret for storing a TLS certificate and its associated key.\n *\n * @see https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets\n */\nclass TlsSecret extends Secret {\n    constructor(scope, id, props) {\n        super(scope, id, {\n            type: 'kubernetes.io/tls',\n            stringData: {\n                'tls.crt': props.tlsCert,\n                'tls.key': props.tlsKey,\n            },\n            immutable: props.immutable,\n        });\n    }\n}\nexports.TlsSecret = TlsSecret;\n_e = JSII_RTTI_SYMBOL_1;\nTlsSecret[_e] = { fqn: \"cdk8s-plus-22.TlsSecret\", version: \"2.0.0-rc.2\" };\n/**\n * Create a secret for storing credentials for accessing a container image\n * registry.\n *\n * @see https://kubernetes.io/docs/concepts/configuration/secret/#docker-config-secrets\n */\nclass DockerConfigSecret extends Secret {\n    constructor(scope, id, props) {\n        super(scope, id, {\n            type: 'kubernetes.io/dockerconfigjson',\n            stringData: {\n                '.dockerconfigjson': JSON.stringify(props.data),\n            },\n            immutable: props.immutable,\n        });\n    }\n}\nexports.DockerConfigSecret = DockerConfigSecret;\n_f = JSII_RTTI_SYMBOL_1;\nDockerConfigSecret[_f] = { fqn: \"cdk8s-plus-22.DockerConfigSecret\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServiceAccount = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst constructs_1 = require(\"constructs\");\nconst base = require(\"./base\");\nconst k8s = require(\"./imports/k8s\");\nconst utils_1 = require(\"./utils\");\nclass ImportedServiceAccount extends constructs_1.Construct {\n    constructor(scope, id, name) {\n        super(scope, id);\n        this._name = name;\n    }\n    get name() {\n        return this._name;\n    }\n    get apiVersion() {\n        return k8s.KubeServiceAccount.GVK.apiVersion;\n    }\n    get apiGroup() {\n        return '';\n    }\n    get kind() {\n        return k8s.KubeServiceAccount.GVK.kind;\n    }\n}\n/**\n * A service account provides an identity for processes that run in a Pod.\n *\n * When you (a human) access the cluster (for example, using kubectl), you are\n * authenticated by the apiserver as a particular User Account (currently this\n * is usually admin, unless your cluster administrator has customized your\n * cluster). Processes in containers inside pods can also contact the apiserver.\n * When they do, they are authenticated as a particular Service Account (for\n * example, default).\n *\n * @see https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account\n */\nclass ServiceAccount extends base.Resource {\n    constructor(scope, id, props = {}) {\n        var _b, _c;\n        super(scope, id);\n        this.resourceType = 'serviceaccounts';\n        this._secrets = (_b = props.secrets) !== null && _b !== void 0 ? _b : [];\n        this.automountToken = (_c = props.automountToken) !== null && _c !== void 0 ? _c : true;\n        this.apiObject = new k8s.KubeServiceAccount(this, 'Resource', {\n            metadata: props.metadata,\n            secrets: cdk8s_1.Lazy.any({ produce: () => utils_1.undefinedIfEmpty(this._secrets.map(s => ({ name: s.name }))) }),\n            automountServiceAccountToken: this.automountToken,\n        });\n    }\n    /**\n     * Imports a service account from the cluster as a reference.\n     * @param name The name of the service account resource.\n     */\n    static fromServiceAccountName(scope, id, name) {\n        return new ImportedServiceAccount(scope, id, name);\n    }\n    /**\n     * Allow a secret to be accessed by pods using this service account.\n     * @param secr The secret\n     */\n    addSecret(secr) {\n        this._secrets.push(secr);\n    }\n    /**\n     * List of secrets allowed to be used by pods running using this service\n     * account.\n     *\n     * Returns a copy. To add a secret, use `addSecret()`.\n     */\n    get secrets() {\n        return [...this._secrets];\n    }\n    /**\n     * @see ISubect.toSubjectConfiguration()\n     */\n    toSubjectConfiguration() {\n        return {\n            kind: this.kind,\n            name: this.name,\n            apiGroup: this.apiGroup,\n        };\n    }\n}\nexports.ServiceAccount = ServiceAccount;\n_a = JSII_RTTI_SYMBOL_1;\nServiceAccount[_a] = { fqn: \"cdk8s-plus-22.ServiceAccount\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS1hY2NvdW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NlcnZpY2UtYWNjb3VudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGlDQUF3QztBQUN4QywyQ0FBdUM7QUFDdkMsK0JBQStCO0FBQy9CLHFDQUFxQztBQUdyQyxtQ0FBMkM7QUE2QjNDLE1BQU0sc0JBQXVCLFNBQVEsc0JBQVM7SUFJNUMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxJQUFZO1FBQ3BELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7SUFDL0MsQ0FBQztJQUVELElBQVcsUUFBUTtRQUNqQixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxJQUFXLElBQUk7UUFDYixPQUFPLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0lBQ3pDLENBQUM7Q0FFRjtBQUVEOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBYSxjQUFlLFNBQVEsSUFBSSxDQUFDLFFBQVE7SUF5Qi9DLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBNkIsRUFBRzs7UUFDeEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQVhILGlCQUFZLEdBQUcsaUJBQWlCLENBQUM7UUFhL0MsSUFBSSxDQUFDLFFBQVEsU0FBRyxLQUFLLENBQUMsT0FBTyxtQ0FBSSxFQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLGNBQWMsU0FBRyxLQUFLLENBQUMsY0FBYyxtQ0FBSSxJQUFJLENBQUM7UUFFbkQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQzVELFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixPQUFPLEVBQUUsWUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyx3QkFBZ0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDbEcsNEJBQTRCLEVBQUUsSUFBSSxDQUFDLGNBQWM7U0FDbEQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQWxDRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsc0JBQXNCLENBQUMsS0FBZ0IsRUFBRSxFQUFVLEVBQUUsSUFBWTtRQUM3RSxPQUFPLElBQUksc0JBQXNCLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBOEJEOzs7T0FHRztJQUNJLFNBQVMsQ0FBQyxJQUFvQjtRQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxJQUFXLE9BQU87UUFDaEIsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7T0FFRztJQUNJLHNCQUFzQjtRQUMzQixPQUFPO1lBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3hCLENBQUM7SUFDSixDQUFDOztBQWpFSCx3Q0FtRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcGlPYmplY3QsIExhenkgfSBmcm9tICdjZGs4cyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCAqIGFzIGJhc2UgZnJvbSAnLi9iYXNlJztcbmltcG9ydCAqIGFzIGs4cyBmcm9tICcuL2ltcG9ydHMvazhzJztcbmltcG9ydCAqIGFzIHJiIGZyb20gJy4vcm9sZS1iaW5kaW5nJztcbmltcG9ydCAqIGFzIHNlY3JldCBmcm9tICcuL3NlY3JldCc7XG5pbXBvcnQgeyB1bmRlZmluZWRJZkVtcHR5IH0gZnJvbSAnLi91dGlscyc7XG5cblxuZXhwb3J0IGludGVyZmFjZSBJU2VydmljZUFjY291bnQgZXh0ZW5kcyBiYXNlLklSZXNvdXJjZSB7XG5cbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBpbml0aWFsaXphdGlvbiBvZiBgU2VydmljZUFjY291bnRgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZpY2VBY2NvdW50UHJvcHMgZXh0ZW5kcyBiYXNlLlJlc291cmNlUHJvcHMge1xuICAvKipcbiAgICogTGlzdCBvZiBzZWNyZXRzIGFsbG93ZWQgdG8gYmUgdXNlZCBieSBwb2RzIHJ1bm5pbmcgdXNpbmcgdGhpc1xuICAgKiBTZXJ2aWNlQWNjb3VudC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9jb25maWd1cmF0aW9uL3NlY3JldFxuICAgKi9cbiAgcmVhZG9ubHkgc2VjcmV0cz86IHNlY3JldC5JU2VjcmV0W107XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHBvZHMgcnVubmluZyBhcyB0aGlzIHNlcnZpY2UgYWNjb3VudFxuICAgKiBzaG91bGQgaGF2ZSBhbiBBUEkgdG9rZW4gYXV0b21hdGljYWxseSBtb3VudGVkLiBDYW4gYmUgb3ZlcnJpZGRlbiBhdCB0aGUgcG9kIGxldmVsLlxuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqIEBzZWUgaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvdGFza3MvY29uZmlndXJlLXBvZC1jb250YWluZXIvY29uZmlndXJlLXNlcnZpY2UtYWNjb3VudC8jdXNlLXRoZS1kZWZhdWx0LXNlcnZpY2UtYWNjb3VudC10by1hY2Nlc3MtdGhlLWFwaS1zZXJ2ZXJcbiAgICovXG4gIHJlYWRvbmx5IGF1dG9tb3VudFRva2VuPzogYm9vbGVhbjtcbn1cblxuY2xhc3MgSW1wb3J0ZWRTZXJ2aWNlQWNjb3VudCBleHRlbmRzIENvbnN0cnVjdCBpbXBsZW1lbnRzIElTZXJ2aWNlQWNjb3VudCB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfbmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIG5hbWU6IHN0cmluZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYXBpVmVyc2lvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiBrOHMuS3ViZVNlcnZpY2VBY2NvdW50LkdWSy5hcGlWZXJzaW9uO1xuICB9XG5cbiAgcHVibGljIGdldCBhcGlHcm91cCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHB1YmxpYyBnZXQga2luZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBrOHMuS3ViZVNlcnZpY2VBY2NvdW50LkdWSy5raW5kO1xuICB9XG5cbn1cblxuLyoqXG4gKiBBIHNlcnZpY2UgYWNjb3VudCBwcm92aWRlcyBhbiBpZGVudGl0eSBmb3IgcHJvY2Vzc2VzIHRoYXQgcnVuIGluIGEgUG9kLlxuICpcbiAqIFdoZW4geW91IChhIGh1bWFuKSBhY2Nlc3MgdGhlIGNsdXN0ZXIgKGZvciBleGFtcGxlLCB1c2luZyBrdWJlY3RsKSwgeW91IGFyZVxuICogYXV0aGVudGljYXRlZCBieSB0aGUgYXBpc2VydmVyIGFzIGEgcGFydGljdWxhciBVc2VyIEFjY291bnQgKGN1cnJlbnRseSB0aGlzXG4gKiBpcyB1c3VhbGx5IGFkbWluLCB1bmxlc3MgeW91ciBjbHVzdGVyIGFkbWluaXN0cmF0b3IgaGFzIGN1c3RvbWl6ZWQgeW91clxuICogY2x1c3RlcikuIFByb2Nlc3NlcyBpbiBjb250YWluZXJzIGluc2lkZSBwb2RzIGNhbiBhbHNvIGNvbnRhY3QgdGhlIGFwaXNlcnZlci5cbiAqIFdoZW4gdGhleSBkbywgdGhleSBhcmUgYXV0aGVudGljYXRlZCBhcyBhIHBhcnRpY3VsYXIgU2VydmljZSBBY2NvdW50IChmb3JcbiAqIGV4YW1wbGUsIGRlZmF1bHQpLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvdGFza3MvY29uZmlndXJlLXBvZC1jb250YWluZXIvY29uZmlndXJlLXNlcnZpY2UtYWNjb3VudFxuICovXG5leHBvcnQgY2xhc3MgU2VydmljZUFjY291bnQgZXh0ZW5kcyBiYXNlLlJlc291cmNlIGltcGxlbWVudHMgSVNlcnZpY2VBY2NvdW50LCByYi5JU3ViamVjdCB7XG5cbiAgLyoqXG4gICAqIEltcG9ydHMgYSBzZXJ2aWNlIGFjY291bnQgZnJvbSB0aGUgY2x1c3RlciBhcyBhIHJlZmVyZW5jZS5cbiAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgYWNjb3VudCByZXNvdXJjZS5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbVNlcnZpY2VBY2NvdW50TmFtZShzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBJU2VydmljZUFjY291bnQge1xuICAgIHJldHVybiBuZXcgSW1wb3J0ZWRTZXJ2aWNlQWNjb3VudChzY29wZSwgaWQsIG5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBzZWUgYmFzZS5SZXNvdXJjZS5hcGlPYmplY3RcbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBhcGlPYmplY3Q6IEFwaU9iamVjdDtcblxuICBwdWJsaWMgcmVhZG9ubHkgcmVzb3VyY2VUeXBlID0gJ3NlcnZpY2VhY2NvdW50cyc7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfc2VjcmV0czogc2VjcmV0LklTZWNyZXRbXTtcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgYSB0b2tlbiBpcyBhdXRvbWF0aWNhbGx5IG1vdW50ZWQgZm9yIHRoaXNcbiAgICogc2VydmljZSBhY2NvdW50LlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGF1dG9tb3VudFRva2VuOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTZXJ2aWNlQWNjb3VudFByb3BzID0geyB9KSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIHRoaXMuX3NlY3JldHMgPSBwcm9wcy5zZWNyZXRzID8/IFtdO1xuICAgIHRoaXMuYXV0b21vdW50VG9rZW4gPSBwcm9wcy5hdXRvbW91bnRUb2tlbiA/PyB0cnVlO1xuXG4gICAgdGhpcy5hcGlPYmplY3QgPSBuZXcgazhzLkt1YmVTZXJ2aWNlQWNjb3VudCh0aGlzLCAnUmVzb3VyY2UnLCB7XG4gICAgICBtZXRhZGF0YTogcHJvcHMubWV0YWRhdGEsXG4gICAgICBzZWNyZXRzOiBMYXp5LmFueSh7IHByb2R1Y2U6ICgpID0+IHVuZGVmaW5lZElmRW1wdHkodGhpcy5fc2VjcmV0cy5tYXAocyA9PiAoeyBuYW1lOiBzLm5hbWUgfSkpKSB9KSxcbiAgICAgIGF1dG9tb3VudFNlcnZpY2VBY2NvdW50VG9rZW46IHRoaXMuYXV0b21vdW50VG9rZW4sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWxsb3cgYSBzZWNyZXQgdG8gYmUgYWNjZXNzZWQgYnkgcG9kcyB1c2luZyB0aGlzIHNlcnZpY2UgYWNjb3VudC5cbiAgICogQHBhcmFtIHNlY3IgVGhlIHNlY3JldFxuICAgKi9cbiAgcHVibGljIGFkZFNlY3JldChzZWNyOiBzZWNyZXQuSVNlY3JldCkge1xuICAgIHRoaXMuX3NlY3JldHMucHVzaChzZWNyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIHNlY3JldHMgYWxsb3dlZCB0byBiZSB1c2VkIGJ5IHBvZHMgcnVubmluZyB1c2luZyB0aGlzIHNlcnZpY2VcbiAgICogYWNjb3VudC5cbiAgICpcbiAgICogUmV0dXJucyBhIGNvcHkuIFRvIGFkZCBhIHNlY3JldCwgdXNlIGBhZGRTZWNyZXQoKWAuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHNlY3JldHMoKSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLl9zZWNyZXRzXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAc2VlIElTdWJlY3QudG9TdWJqZWN0Q29uZmlndXJhdGlvbigpXG4gICAqL1xuICBwdWJsaWMgdG9TdWJqZWN0Q29uZmlndXJhdGlvbigpOiByYi5TdWJqZWN0Q29uZmlndXJhdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IHRoaXMua2luZCxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIGFwaUdyb3VwOiB0aGlzLmFwaUdyb3VwLFxuICAgIH07XG4gIH1cblxufSJdfQ==","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Protocol = exports.Service = exports.ServiceType = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst base = require(\"./base\");\nconst k8s = require(\"./imports/k8s\");\nconst ingress = require(\"./ingress\");\n/**\n * For some parts of your application (for example, frontends) you may want to expose a Service onto an\n * external IP address, that's outside of your cluster.\n * Kubernetes ServiceTypes allow you to specify what kind of Service you want.\n * The default is ClusterIP.\n */\nvar ServiceType;\n(function (ServiceType) {\n    /**\n     * Exposes the Service on a cluster-internal IP.\n     * Choosing this value makes the Service only reachable from within the cluster.\n     * This is the default ServiceType\n     */\n    ServiceType[\"CLUSTER_IP\"] = \"ClusterIP\";\n    /**\n     * Exposes the Service on each Node's IP at a static port (the NodePort).\n     * A ClusterIP Service, to which the NodePort Service routes, is automatically created.\n     * You'll be able to contact the NodePort Service, from outside the cluster,\n     * by requesting <NodeIP>:<NodePort>.\n     */\n    ServiceType[\"NODE_PORT\"] = \"NodePort\";\n    /**\n     * Exposes the Service externally using a cloud provider's load balancer.\n     * NodePort and ClusterIP Services, to which the external load balancer routes,\n     * are automatically created.\n     */\n    ServiceType[\"LOAD_BALANCER\"] = \"LoadBalancer\";\n    /**\n     * Maps the Service to the contents of the externalName field (e.g. foo.bar.example.com), by returning a CNAME record with its value.\n     * No proxying of any kind is set up.\n     *\n     * > Note: You need either kube-dns version 1.7 or CoreDNS version 0.0.8 or higher to use the ExternalName type.\n     */\n    ServiceType[\"EXTERNAL_NAME\"] = \"ExternalName\";\n})(ServiceType = exports.ServiceType || (exports.ServiceType = {}));\n/**\n * An abstract way to expose an application running on a set of Pods as a network service.\n * With Kubernetes you don't need to modify your application to use an unfamiliar service discovery mechanism.\n * Kubernetes gives Pods their own IP addresses and a single DNS name for a set of Pods, and can load-balance across them.\n *\n * For example, consider a stateless image-processing backend which is running with 3 replicas. Those replicas are fungible—frontends do not care which backend they use.\n * While the actual Pods that compose the backend set may change, the frontend clients should not need to be aware of that,\n * nor should they need to keep track of the set of backends themselves.\n * The Service abstraction enables this decoupling.\n *\n * If you're able to use Kubernetes APIs for service discovery in your application, you can query the API server for Endpoints,\n * that get updated whenever the set of Pods in a Service changes. For non-native applications, Kubernetes offers ways to place a network port\n * or load balancer in between your application and the backend Pods.\n */\nclass Service extends base.Resource {\n    constructor(scope, id, props = {}) {\n        var _b, _c, _d;\n        super(scope, id);\n        this.resourceType = 'services';\n        this.apiObject = new k8s.KubeService(this, 'Resource', {\n            metadata: props.metadata,\n            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),\n        });\n        this.clusterIP = props.clusterIP;\n        this.externalName = props.externalName;\n        if (props.externalName !== undefined) {\n            this.type = ServiceType.EXTERNAL_NAME;\n        }\n        else {\n            this.type = (_b = props.type) !== null && _b !== void 0 ? _b : ServiceType.CLUSTER_IP;\n        }\n        this._externalIPs = (_c = props.externalIPs) !== null && _c !== void 0 ? _c : [];\n        this._ports = [];\n        this._selector = {};\n        this._loadBalancerSourceRanges = props.loadBalancerSourceRanges;\n        if (props.selector) {\n            this.select(props.selector);\n        }\n        for (const port of (_d = props.ports) !== null && _d !== void 0 ? _d : []) {\n            this.bind(port.port, port);\n        }\n    }\n    /**\n     * Expose a service via an ingress using the specified path.\n     *\n     * @param path The path to expose the service under.\n     * @param options Additional options.\n     *\n     * @returns The `Ingress` resource that was used.\n     */\n    exposeViaIngress(path, options = {}) {\n        var _b;\n        const ingr = (_b = options.ingress) !== null && _b !== void 0 ? _b : new ingress.Ingress(this, 'Ingress');\n        ingr.addRule(path, ingress.IngressBackend.fromService(this), options.pathType);\n        return ingr;\n    }\n    /**\n     * Ports for this service.\n     *\n     * Use `bind()` to bind additional service ports.\n     */\n    get ports() {\n        return [...this._ports];\n    }\n    /**\n     * Configure a port the service will bind to.\n     * This method can be called multiple times.\n     *\n     * @param port The port definition.\n     */\n    bind(port, options = {}) {\n        this._ports.push({ ...options, port });\n    }\n    /**\n     * Require this service to select pods matching the selector.\n     *\n     * Note that invoking this method multiple times acts as an AND operator\n     * on the resulting labels.\n     */\n    select(selector) {\n        var _b;\n        const labels = (_b = selector.toPodSelectorConfig().labelSelector._toKube().matchLabels) !== null && _b !== void 0 ? _b : {};\n        for (const [key, value] of Object.entries(labels)) {\n            this._selector[key] = value;\n        }\n    }\n    /**\n     * Require this service to select pods with this label.\n     *\n     * Note that invoking this method multiple times acts as an AND operator\n     * on the resulting labels.\n     */\n    selectLabel(key, value) {\n        this._selector[key] = value;\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        if (this._ports.length === 0 && this.type !== ServiceType.EXTERNAL_NAME) {\n            throw new Error('A service must be configured with a port');\n        }\n        if (this.type === ServiceType.EXTERNAL_NAME && this.externalName === undefined) {\n            throw new Error('A service with type EXTERNAL_NAME requires an externalName prop');\n        }\n        const ports = [];\n        for (const port of this._ports) {\n            ports.push({\n                name: port.name,\n                port: port.port,\n                targetPort: port.targetPort ? k8s.IntOrString.fromNumber(port.targetPort) : undefined,\n                nodePort: port.nodePort,\n                protocol: port.protocol,\n            });\n        }\n        return this.type !== ServiceType.EXTERNAL_NAME ? {\n            clusterIp: this.clusterIP,\n            externalIPs: this._externalIPs,\n            externalName: this.externalName,\n            type: this.type,\n            selector: this._selector,\n            ports: ports,\n            loadBalancerSourceRanges: this._loadBalancerSourceRanges,\n        } : {\n            type: this.type,\n            externalName: this.externalName,\n        };\n    }\n}\nexports.Service = Service;\n_a = JSII_RTTI_SYMBOL_1;\nService[_a] = { fqn: \"cdk8s-plus-22.Service\", version: \"2.0.0-rc.2\" };\nvar Protocol;\n(function (Protocol) {\n    Protocol[\"TCP\"] = \"TCP\";\n    Protocol[\"UDP\"] = \"UDP\";\n    Protocol[\"SCTP\"] = \"SCTP\";\n})(Protocol = exports.Protocol || (exports.Protocol = {}));\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StatefulSetUpdateStrategy = exports.StatefulSet = exports.PodManagementPolicy = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst k8s = require(\"./imports/k8s\");\nconst workload = require(\"./workload\");\n/**\n * Controls how pods are created during initial scale up, when replacing pods on nodes,\n * or when scaling down.\n *\n * The default policy is `OrderedReady`, where pods are created in increasing order\n * (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before\n * continuing. When scaling down, the pods are removed in the opposite order.\n *\n * The alternative policy is `Parallel` which will create pods in parallel to match the\n * desired scale without waiting, and on scale down will delete all pods at once.\n */\nvar PodManagementPolicy;\n(function (PodManagementPolicy) {\n    PodManagementPolicy[\"ORDERED_READY\"] = \"OrderedReady\";\n    PodManagementPolicy[\"PARALLEL\"] = \"Parallel\";\n})(PodManagementPolicy = exports.PodManagementPolicy || (exports.PodManagementPolicy = {}));\n/**\n * StatefulSet is the workload API object used to manage stateful applications.\n *\n * Manages the deployment and scaling of a set of Pods, and provides guarantees\n * about the ordering and uniqueness of these Pods.\n *\n * Like a Deployment, a StatefulSet manages Pods that are based on an identical\n * container spec. Unlike a Deployment, a StatefulSet maintains a sticky identity\n * for each of their Pods. These pods are created from the same spec, but are not\n * interchangeable: each has a persistent identifier that it maintains across any\n * rescheduling.\n *\n * If you want to use storage volumes to provide persistence for your workload, you\n * can use a StatefulSet as part of the solution. Although individual Pods in a StatefulSet\n * are susceptible to failure, the persistent Pod identifiers make it easier to match existing\n * volumes to the new Pods that replace any that have failed.\n *\n * Using StatefulSets\n * ------------------\n * StatefulSets are valuable for applications that require one or more of the following.\n *\n * - Stable, unique network identifiers.\n * - Stable, persistent storage.\n * - Ordered, graceful deployment and scaling.\n * - Ordered, automated rolling updates.\n */\nclass StatefulSet extends workload.Workload {\n    constructor(scope, id, props) {\n        var _c, _d, _e, _f;\n        super(scope, id, props);\n        this.resourceType = 'statefulsets';\n        this.apiObject = new k8s.KubeStatefulSet(this, 'Resource', {\n            metadata: props.metadata,\n            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),\n        });\n        this._service = props.service;\n        this.apiObject.addDependency(this._service);\n        this.replicas = (_c = props.replicas) !== null && _c !== void 0 ? _c : 1;\n        this.strategy = (_d = props.strategy) !== null && _d !== void 0 ? _d : StatefulSetUpdateStrategy.rollingUpdate(),\n            this.podManagementPolicy = (_e = props.podManagementPolicy) !== null && _e !== void 0 ? _e : PodManagementPolicy.ORDERED_READY;\n        this.minReady = (_f = props.minReady) !== null && _f !== void 0 ? _f : cdk8s_1.Duration.seconds(0);\n        this._service.select(this);\n    }\n    /**\n      * @internal\n      */\n    _toKube() {\n        return {\n            serviceName: this._service.name,\n            replicas: this.replicas,\n            minReadySeconds: this.minReady.toSeconds(),\n            template: {\n                metadata: this.podMetadata.toJson(),\n                spec: this._toPodSpec(),\n            },\n            selector: this._toLabelSelector(),\n            podManagementPolicy: this.podManagementPolicy,\n            updateStrategy: this.strategy._toKube(),\n        };\n    }\n}\nexports.StatefulSet = StatefulSet;\n_a = JSII_RTTI_SYMBOL_1;\nStatefulSet[_a] = { fqn: \"cdk8s-plus-22.StatefulSet\", version: \"2.0.0-rc.2\" };\n/**\n * StatefulSet update strategies.\n */\nclass StatefulSetUpdateStrategy {\n    constructor(strategy) {\n        this.strategy = strategy;\n    }\n    /**\n     * The controller will not automatically update the Pods in a StatefulSet.\n     * Users must manually delete Pods to cause the controller to create new Pods\n     * that reflect modifications.\n     */\n    static onDelete() {\n        return new StatefulSetUpdateStrategy({\n            type: 'OnDelete',\n        });\n    }\n    /**\n     * The controller will delete and recreate each Pod in the StatefulSet.\n     * It will proceed in the same order as Pod termination (from the largest ordinal to the smallest),\n     * updating each Pod one at a time. The Kubernetes control plane waits until an updated\n     * Pod is Running and Ready prior to updating its predecessor.\n     */\n    static rollingUpdate(options = {}) {\n        var _c;\n        return new StatefulSetUpdateStrategy({\n            type: 'RollingUpdate',\n            rollingUpdate: { partition: (_c = options.partition) !== null && _c !== void 0 ? _c : 0 },\n        });\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        return this.strategy;\n    }\n}\nexports.StatefulSetUpdateStrategy = StatefulSetUpdateStrategy;\n_b = JSII_RTTI_SYMBOL_1;\nStatefulSetUpdateStrategy[_b] = { fqn: \"cdk8s-plus-22.StatefulSetUpdateStrategy\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.address = exports.filterUndefined = exports.undefinedIfEmpty = void 0;\nfunction undefinedIfEmpty(obj) {\n    if (typeof (obj) === 'string' && obj === '') {\n        return undefined;\n    }\n    if (Array.isArray(obj) && obj.length === 0) {\n        return undefined;\n    }\n    if (typeof (obj) === 'object' && (Object.keys(obj).length === 0 || Object.values(obj).filter(x => x).length === 0)) {\n        return undefined;\n    }\n    return obj;\n}\nexports.undefinedIfEmpty = undefinedIfEmpty;\nfunction filterUndefined(obj) {\n    const ret = {};\n    for (const [k, v] of Object.entries(obj)) {\n        if (v !== undefined) {\n            ret[k] = v;\n        }\n    }\n    return ret;\n}\nexports.filterUndefined = filterUndefined;\nfunction address(...constructs) {\n    const addresses = constructs\n        .map(c => c.node.addr)\n        .sort((a, b) => a.localeCompare(b));\n    return addresses.join('');\n}\nexports.address = address;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsU0FBZ0IsZ0JBQWdCLENBQUksR0FBTTtJQUN4QyxJQUFJLE9BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLElBQUksR0FBRyxLQUFLLEVBQUUsRUFBRTtRQUFFLE9BQU8sU0FBUyxDQUFDO0tBQUU7SUFDakUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQUUsT0FBTyxTQUFTLENBQUM7S0FBRTtJQUNqRSxJQUFJLE9BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFBRSxPQUFPLFNBQVMsQ0FBQztLQUFFO0lBQ3hJLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUxELDRDQUtDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLEdBQVE7SUFDdEMsTUFBTSxHQUFHLEdBQVEsRUFBRSxDQUFDO0lBQ3BCLEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3hDLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNuQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ1o7S0FDRjtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQVJELDBDQVFDO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLEdBQUcsVUFBd0I7SUFDakQsTUFBTSxTQUFTLEdBQUcsVUFBVTtTQUN6QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUNyQixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEMsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFMRCwwQkFLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHVuZGVmaW5lZElmRW1wdHk8VD4ob2JqOiBUKTogVCB8IHVuZGVmaW5lZCB7XG4gIGlmICh0eXBlb2Yob2JqKSA9PT0gJ3N0cmluZycgJiYgb2JqID09PSAnJykgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikgJiYgb2JqLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG4gIGlmICh0eXBlb2Yob2JqKSA9PT0gJ29iamVjdCcgJiYgKE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwIHx8IE9iamVjdC52YWx1ZXMob2JqKS5maWx0ZXIoeCA9PiB4KS5sZW5ndGggPT09IDApKSB7IHJldHVybiB1bmRlZmluZWQ7IH1cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclVuZGVmaW5lZChvYmo6IGFueSk6IGFueSB7XG4gIGNvbnN0IHJldDogYW55ID0ge307XG4gIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHtcbiAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXRba10gPSB2O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkcmVzcyguLi5jb25zdHJ1Y3RzOiBJQ29uc3RydWN0W10pIHtcbiAgY29uc3QgYWRkcmVzc2VzID0gY29uc3RydWN0c1xuICAgIC5tYXAoYyA9PiBjLm5vZGUuYWRkcilcbiAgICAuc29ydCgoYSwgYikgPT4gYS5sb2NhbGVDb21wYXJlKGIpKTtcbiAgcmV0dXJuIGFkZHJlc3Nlcy5qb2luKCcnKTtcbn1cbiJdfQ==","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AzureDiskPersistentVolumeCachingMode = exports.AzureDiskPersistentVolumeKind = exports.EmptyDirMedium = exports.Volume = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst constructs_1 = require(\"constructs\");\nconst k8s = require(\"./imports/k8s\");\n/**\n * Volume represents a named volume in a pod that may be accessed by any\n * container in the pod.\n *\n * Docker also has a concept of volumes, though it is somewhat looser and less\n * managed. In Docker, a volume is simply a directory on disk or in another\n * Container. Lifetimes are not managed and until very recently there were only\n * local-disk-backed volumes. Docker now provides volume drivers, but the\n * functionality is very limited for now (e.g. as of Docker 1.7 only one volume\n * driver is allowed per Container and there is no way to pass parameters to\n * volumes).\n *\n * A Kubernetes volume, on the other hand, has an explicit lifetime - the same\n * as the Pod that encloses it. Consequently, a volume outlives any Containers\n * that run within the Pod, and data is preserved across Container restarts. Of\n * course, when a Pod ceases to exist, the volume will cease to exist, too.\n * Perhaps more importantly than this, Kubernetes supports many types of\n * volumes, and a Pod can use any number of them simultaneously.\n *\n * At its core, a volume is just a directory, possibly with some data in it,\n * which is accessible to the Containers in a Pod. How that directory comes to\n * be, the medium that backs it, and the contents of it are determined by the\n * particular volume type used.\n *\n * To use a volume, a Pod specifies what volumes to provide for the Pod (the\n * .spec.volumes field) and where to mount those into Containers (the\n * .spec.containers[*].volumeMounts field).\n *\n * A process in a container sees a filesystem view composed from their Docker\n * image and volumes. The Docker image is at the root of the filesystem\n * hierarchy, and any volumes are mounted at the specified paths within the\n * image. Volumes can not mount onto other volumes\n */\nclass Volume extends constructs_1.Construct {\n    constructor(scope, id, name, config) {\n        super(scope, id);\n        this.name = name;\n        this.config = config;\n    }\n    /**\n     * Mounts an Amazon Web Services (AWS) EBS volume into your pod.\n     * Unlike emptyDir, which is erased when a pod is removed, the contents of an EBS volume are\n     * persisted and the volume is unmounted. This means that an EBS volume can be pre-populated with data,\n     * and that data can be shared between pods.\n     *\n     * There are some restrictions when using an awsElasticBlockStore volume:\n     *\n     * - the nodes on which pods are running must be AWS EC2 instances.\n     * - those instances need to be in the same region and availability zone as the EBS volume.\n     * - EBS only supports a single EC2 instance mounting a volume.\n     */\n    static fromAwsElasticBlockStore(scope, id, volumeId, options = {}) {\n        var _b, _c, _d;\n        return new Volume(scope, id, (_b = options.name) !== null && _b !== void 0 ? _b : `ebs-${volumeId}`, {\n            awsElasticBlockStore: {\n                volumeId,\n                fsType: (_c = options.fsType) !== null && _c !== void 0 ? _c : 'ext4',\n                partition: options.partition,\n                readOnly: (_d = options.readOnly) !== null && _d !== void 0 ? _d : false,\n            },\n        });\n    }\n    /**\n     * Mounts a Microsoft Azure Data Disk into a pod.\n     */\n    static fromAzureDisk(scope, id, diskName, diskUri, options = {}) {\n        var _b, _c, _d, _e, _f;\n        return new Volume(scope, id, (_b = options.name) !== null && _b !== void 0 ? _b : `azuredisk-${diskName}`, {\n            azureDisk: {\n                diskName,\n                diskUri,\n                cachingMode: (_c = options.cachingMode) !== null && _c !== void 0 ? _c : AzureDiskPersistentVolumeCachingMode.NONE,\n                fsType: (_d = options.fsType) !== null && _d !== void 0 ? _d : 'ext4',\n                kind: (_e = options.kind) !== null && _e !== void 0 ? _e : AzureDiskPersistentVolumeKind.SHARED,\n                readOnly: (_f = options.readOnly) !== null && _f !== void 0 ? _f : false,\n            },\n        });\n    }\n    /**\n     * Mounts a Google Compute Engine (GCE) persistent disk (PD) into your Pod.\n     * Unlike emptyDir, which is erased when a pod is removed, the contents of a PD are\n     * preserved and the volume is merely unmounted. This means that a PD can be pre-populated\n     * with data, and that data can be shared between pods.\n     *\n     * There are some restrictions when using a gcePersistentDisk:\n     *\n     * - the nodes on which Pods are running must be GCE VMs\n     * - those VMs need to be in the same GCE project and zone as the persistent disk\n     */\n    static fromGcePersistentDisk(scope, id, pdName, options = {}) {\n        var _b, _c, _d;\n        return new Volume(scope, id, (_b = options.name) !== null && _b !== void 0 ? _b : `gcedisk-${pdName}`, {\n            gcePersistentDisk: {\n                pdName,\n                fsType: (_c = options.fsType) !== null && _c !== void 0 ? _c : 'ext4',\n                partition: options.partition,\n                readOnly: (_d = options.readOnly) !== null && _d !== void 0 ? _d : false,\n            },\n        });\n    }\n    /**\n     * Populate the volume from a ConfigMap.\n     *\n     * The configMap resource provides a way to inject configuration data into\n     * Pods. The data stored in a ConfigMap object can be referenced in a volume\n     * of type configMap and then consumed by containerized applications running\n     * in a Pod.\n     *\n     * When referencing a configMap object, you can simply provide its name in the\n     * volume to reference it. You can also customize the path to use for a\n     * specific entry in the ConfigMap.\n     *\n     * @param configMap The config map to use to populate the volume.\n     * @param options Options\n     */\n    static fromConfigMap(scope, id, configMap, options = {}) {\n        var _b;\n        return new Volume(scope, id, (_b = options.name) !== null && _b !== void 0 ? _b : `configmap-${configMap.name}`, {\n            configMap: {\n                name: configMap.name,\n                defaultMode: options.defaultMode,\n                optional: options.optional,\n                items: Volume.renderItems(options.items),\n            },\n        });\n    }\n    /**\n     * An emptyDir volume is first created when a Pod is assigned to a Node, and\n     * exists as long as that Pod is running on that node. As the name says, it is\n     * initially empty. Containers in the Pod can all read and write the same\n     * files in the emptyDir volume, though that volume can be mounted at the same\n     * or different paths in each Container. When a Pod is removed from a node for\n     * any reason, the data in the emptyDir is deleted forever.\n     *\n     * @see http://kubernetes.io/docs/user-guide/volumes#emptydir\n     *\n     * @param options - Additional options.\n     */\n    static fromEmptyDir(scope, id, name, options = {}) {\n        return new Volume(scope, id, name, {\n            emptyDir: {\n                medium: options.medium,\n                sizeLimit: options.sizeLimit\n                    ? k8s.Quantity.fromString(`${options.sizeLimit.toMebibytes()}Mi`)\n                    : undefined,\n            },\n        });\n    }\n    /**\n     * Populate the volume from a Secret.\n     *\n     * A secret volume is used to pass sensitive information, such as passwords, to Pods.\n     * You can store secrets in the Kubernetes API and mount them as files for use by pods\n     * without coupling to Kubernetes directly.\n     *\n     * secret volumes are backed by tmpfs (a RAM-backed filesystem)\n     * so they are never written to non-volatile storage.\n     *\n     * @see https://kubernetes.io/docs/concepts/storage/volumes/#secret\n     *\n     * @param secr The secret to use to populate the volume.\n     * @param options Options\n     */\n    static fromSecret(scope, id, secr, options = {}) {\n        var _b;\n        return new Volume(scope, id, (_b = options.name) !== null && _b !== void 0 ? _b : `secret-${secr.name}`, {\n            secret: {\n                secretName: secr.name,\n                defaultMode: options.defaultMode,\n                optional: options.optional,\n                items: Volume.renderItems(options.items),\n            },\n        });\n    }\n    /**\n     * Used to mount a PersistentVolume into a Pod.\n     * PersistentVolumeClaims are a way for users to \"claim\" durable storage (such as a GCE PersistentDisk or an iSCSI volume)\n     * without knowing the details of the particular cloud environment.\n     *\n     * @see https://kubernetes.io/docs/concepts/storage/persistent-volumes/\n     */\n    static fromPersistentVolumeClaim(scope, id, claim, options = {}) {\n        var _b, _c;\n        return new Volume(scope, id, (_b = options.name) !== null && _b !== void 0 ? _b : `pvc-${claim.name}`, {\n            persistentVolumeClaim: {\n                claimName: claim.name,\n                readOnly: (_c = options.readOnly) !== null && _c !== void 0 ? _c : false,\n            },\n        });\n    }\n    asVolume() {\n        return this;\n    }\n    /**\n     * @internal\n     */\n    _toKube() {\n        return {\n            name: this.name,\n            ...this.config,\n        };\n    }\n}\nexports.Volume = Volume;\n_a = JSII_RTTI_SYMBOL_1;\nVolume[_a] = { fqn: \"cdk8s-plus-22.Volume\", version: \"2.0.0-rc.2\" };\n/**\n  * @internal\n */\nVolume.renderItems = (items) => {\n    if (!items) {\n        return undefined;\n    }\n    const result = new Array();\n    for (const key of Object.keys(items).sort()) {\n        result.push({\n            key,\n            path: items[key].path,\n            mode: items[key].mode,\n        });\n    }\n    return result;\n};\n/**\n * The medium on which to store the volume.\n */\nvar EmptyDirMedium;\n(function (EmptyDirMedium) {\n    /**\n     * The default volume of the backing node.\n     */\n    EmptyDirMedium[\"DEFAULT\"] = \"\";\n    /**\n     * Mount a tmpfs (RAM-backed filesystem) for you instead. While tmpfs is very\n     * fast, be aware that unlike disks, tmpfs is cleared on node reboot and any\n     * files you write will count against your Container's memory limit.\n     */\n    EmptyDirMedium[\"MEMORY\"] = \"Memory\";\n})(EmptyDirMedium = exports.EmptyDirMedium || (exports.EmptyDirMedium = {}));\n/**\n * Azure Disk kinds.\n */\nvar AzureDiskPersistentVolumeKind;\n(function (AzureDiskPersistentVolumeKind) {\n    /**\n     * Multiple blob disks per storage account.\n     */\n    AzureDiskPersistentVolumeKind[\"SHARED\"] = \"Shared\";\n    /**\n     * Single blob disk per storage account.\n     */\n    AzureDiskPersistentVolumeKind[\"DEDICATED\"] = \"Dedicated\";\n    /**\n     * Azure managed data disk.\n     */\n    AzureDiskPersistentVolumeKind[\"MANAGED\"] = \"Managed\";\n})(AzureDiskPersistentVolumeKind = exports.AzureDiskPersistentVolumeKind || (exports.AzureDiskPersistentVolumeKind = {}));\n/**\n * Azure disk caching modes.\n */\nvar AzureDiskPersistentVolumeCachingMode;\n(function (AzureDiskPersistentVolumeCachingMode) {\n    /**\n     * None.\n     */\n    AzureDiskPersistentVolumeCachingMode[\"NONE\"] = \"None\";\n    /**\n     * ReadOnly.\n     */\n    AzureDiskPersistentVolumeCachingMode[\"READ_ONLY\"] = \"ReadOnly\";\n    /**\n     * ReadWrite.\n     */\n    AzureDiskPersistentVolumeCachingMode[\"READ_WRITE\"] = \"ReadWrite\";\n})(AzureDiskPersistentVolumeCachingMode = exports.AzureDiskPersistentVolumeCachingMode || (exports.AzureDiskPersistentVolumeCachingMode = {}));\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WorkloadScheduling = exports.Workload = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst cdk8s_1 = require(\"cdk8s\");\nconst pod = require(\"./pod\");\nconst utils_1 = require(\"./utils\");\n/**\n * A workload is an application running on Kubernetes. Whether your workload is a single\n * component or several that work together, on Kubernetes you run it inside a set of pods.\n * In Kubernetes, a Pod represents a set of running containers on your cluster.\n */\nclass Workload extends pod.AbstractPod {\n    constructor(scope, id, props = {}) {\n        var _c;\n        super(scope, id, props);\n        this._matchLabels = {};\n        this._matchExpressions = [];\n        this.podMetadata = new cdk8s_1.ApiObjectMetadataDefinition(props.podMetadata);\n        this.scheduling = new WorkloadScheduling(this);\n        this.connections = new pod.PodConnections(this);\n        const matcher = cdk8s_1.Names.toLabelValue(this);\n        this.podMetadata.addLabel(pod.Pod.ADDRESS_LABEL, matcher);\n        if ((_c = props.select) !== null && _c !== void 0 ? _c : true) {\n            this.select(pod.LabelSelector.of({ labels: { [pod.Pod.ADDRESS_LABEL]: matcher } }));\n        }\n    }\n    /**\n     * Configure selectors for this workload.\n     */\n    select(...selectors) {\n        var _c, _d;\n        for (const selector of selectors) {\n            const kube = selector._toKube();\n            this._matchExpressions.push(...(_c = kube.matchExpressions) !== null && _c !== void 0 ? _c : []);\n            for (const [key, value] of Object.entries((_d = kube.matchLabels) !== null && _d !== void 0 ? _d : {})) {\n                this._matchLabels[key] = value;\n            }\n        }\n    }\n    /**\n     * The label matchers this workload will use in order to select pods.\n     *\n     * Returns a a copy. Use `select()` to add label matchers.\n     */\n    get matchLabels() {\n        return { ...this._matchLabels };\n    }\n    /**\n     * The expression matchers this workload will use in order to select pods.\n     *\n     * Returns a a copy. Use `select()` to add expression matchers.\n     */\n    get matchExpressions() {\n        return [...this._matchExpressions];\n    }\n    /**\n     * @internal\n     */\n    _toLabelSelector() {\n        return {\n            matchExpressions: utils_1.undefinedIfEmpty(this._matchExpressions),\n            matchLabels: utils_1.undefinedIfEmpty(this._matchLabels),\n        };\n    }\n    /**\n     * @internal\n     */\n    _toPodSpec() {\n        const scheduling = this.scheduling._toKube();\n        return {\n            ...super._toPodSpec(),\n            affinity: scheduling.affinity,\n            nodeName: scheduling.nodeName,\n            tolerations: scheduling.tolerations,\n        };\n    }\n}\nexports.Workload = Workload;\n_a = JSII_RTTI_SYMBOL_1;\nWorkload[_a] = { fqn: \"cdk8s-plus-22.Workload\", version: \"2.0.0-rc.2\" };\n/**\n * Controls the pod scheduling strategy of this workload.\n * It offers some additional API's on top of the core pod scheduling.\n */\nclass WorkloadScheduling extends pod.PodScheduling {\n    /**\n     * Spread the pods in this workload by the topology key.\n     * A spread is a separation of the pod from itself and is used to\n     * balance out pod replicas across a given topology.\n     */\n    spread(options = {}) {\n        var _c;\n        this.separate(this.instance, { weight: options.weight, topology: (_c = options.topology) !== null && _c !== void 0 ? _c : pod.Topology.HOSTNAME });\n    }\n}\nexports.WorkloadScheduling = WorkloadScheduling;\n_b = JSII_RTTI_SYMBOL_1;\nWorkloadScheduling[_b] = { fqn: \"cdk8s-plus-22.WorkloadScheduling\", version: \"2.0.0-rc.2\" };\n//# sourceMappingURL=data:application/json;base64,","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    if(a===b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","var concatMap = require('concat-map');\nvar balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction identity(e) {\n  return e;\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m || /\\$$/.test(m.pre)) return [str];\n\n  var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isSequence = isNumericSequence || isAlphaSequence;\n  var isOptions = m.body.indexOf(',') >= 0;\n  if (!isSequence && !isOptions) {\n    // {a},b}\n    if (m.post.match(/,.*\\}/)) {\n      str = m.pre + '{' + m.body + escClose + m.post;\n      return expand(str);\n    }\n    return [str];\n  }\n\n  var n;\n  if (isSequence) {\n    n = m.body.split(/\\.\\./);\n  } else {\n    n = parseCommaParts(m.body);\n    if (n.length === 1) {\n      // x{{a,b}}y ==> x{a}y x{b}y\n      n = expand(n[0], false).map(embrace);\n      if (n.length === 1) {\n        var post = m.post.length\n          ? expand(m.post, false)\n          : [''];\n        return post.map(function(p) {\n          return m.pre + n[0] + p;\n        });\n      }\n    }\n  }\n\n  // at this point, n is the parts, and we know it's not a comma set\n  // with a single entry.\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  var N;\n\n  if (isSequence) {\n    var x = numeric(n[0]);\n    var y = numeric(n[1]);\n    var width = Math.max(n[0].length, n[1].length)\n    var incr = n.length == 3\n      ? Math.abs(numeric(n[2]))\n      : 1;\n    var test = lte;\n    var reverse = y < x;\n    if (reverse) {\n      incr *= -1;\n      test = gte;\n    }\n    var pad = n.some(isPadded);\n\n    N = [];\n\n    for (var i = x; test(i, y); i += incr) {\n      var c;\n      if (isAlphaSequence) {\n        c = String.fromCharCode(i);\n        if (c === '\\\\')\n          c = '';\n      } else {\n        c = String(i);\n        if (pad) {\n          var need = width - c.length;\n          if (need > 0) {\n            var z = new Array(need + 1).join('0');\n            if (i < 0)\n              c = '-' + z + c.slice(1);\n            else\n              c = z + c;\n          }\n        }\n      }\n      N.push(c);\n    }\n  } else {\n    N = concatMap(n, function(el) { return expand(el, false) });\n  }\n\n  for (var j = 0; j < N.length; j++) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + N[j] + post[k];\n      if (!isTop || isSequence || expansion)\n        expansions.push(expansion);\n    }\n  }\n\n  return expansions;\n}\n\n","module.exports = function (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        var x = fn(xs[i], i);\n        if (isArray(x)) res.push.apply(res, x);\n        else res.push(x);\n    }\n    return res;\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = (function () { try { return require('path') } catch (e) {}}()) || {\n  sep: '/'\n}\nminimatch.sep = path.sep\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = require('brace-expansion')\n\nvar plTypes = {\n  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},\n  '?': { open: '(?:', close: ')?' },\n  '+': { open: '(?:', close: ')+' },\n  '*': { open: '(?:', close: ')*' },\n  '@': { open: '(?:', close: ')' }\n}\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  b = b || {}\n  var t = {}\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || typeof def !== 'object' || !Object.keys(def).length) {\n    return minimatch\n  }\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n  m.Minimatch.defaults = function defaults (options) {\n    return orig.defaults(ext(def, options)).Minimatch\n  }\n\n  m.filter = function filter (pattern, options) {\n    return orig.filter(pattern, ext(def, options))\n  }\n\n  m.defaults = function defaults (options) {\n    return orig.defaults(ext(def, options))\n  }\n\n  m.makeRe = function makeRe (pattern, options) {\n    return orig.makeRe(pattern, ext(def, options))\n  }\n\n  m.braceExpand = function braceExpand (pattern, options) {\n    return orig.braceExpand(pattern, ext(def, options))\n  }\n\n  m.match = function (list, pattern, options) {\n    return orig.match(list, pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  return minimatch.defaults(def).Minimatch\n}\n\nfunction minimatch (p, pattern, options) {\n  assertValidPattern(pattern)\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options)\n  }\n\n  assertValidPattern(pattern)\n\n  if (!options) options = {}\n\n  pattern = pattern.trim()\n\n  // windows support: need to use /, not \\\n  if (!options.allowWindowsEscape && path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/')\n  }\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n  this.partial = !!options.partial\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.debug = function () {}\n\nMinimatch.prototype.make = make\nfunction make () {\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) this.debug = function debug() { console.error.apply(console, arguments) }\n\n  this.debug(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  this.debug(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  this.debug(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1\n  })\n\n  this.debug(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n  var negate = false\n  var options = this.options\n  var negateOffset = 0\n\n  if (options.nonegate) return\n\n  for (var i = 0, l = pattern.length\n    ; i < l && pattern.charAt(i) === '!'\n    ; i++) {\n    negate = !negate\n    negateOffset++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options)\n}\n\nMinimatch.prototype.braceExpand = braceExpand\n\nfunction braceExpand (pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options\n    } else {\n      options = {}\n    }\n  }\n\n  pattern = typeof pattern === 'undefined'\n    ? this.pattern : pattern\n\n  assertValidPattern(pattern)\n\n  // Thanks to Yeting Li <https://github.com/yetingli> for\n  // improving this regexp to avoid a ReDOS vulnerability.\n  if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\nvar MAX_PATTERN_LENGTH = 1024 * 64\nvar assertValidPattern = function (pattern) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('invalid pattern')\n  }\n\n  if (pattern.length > MAX_PATTERN_LENGTH) {\n    throw new TypeError('pattern is too long')\n  }\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  assertValidPattern(pattern)\n\n  var options = this.options\n\n  // shortcuts\n  if (pattern === '**') {\n    if (!options.noglobstar)\n      return GLOBSTAR\n    else\n      pattern = '*'\n  }\n  if (pattern === '') return ''\n\n  var re = ''\n  var hasMagic = !!options.nocase\n  var escaping = false\n  // ? => one single character\n  var patternListStack = []\n  var negativeLists = []\n  var stateChar\n  var inClass = false\n  var reClassStart = -1\n  var classStart = -1\n  // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))'\n  : '(?!\\\\.)'\n  var self = this\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star\n          hasMagic = true\n        break\n        case '?':\n          re += qmark\n          hasMagic = true\n        break\n        default:\n          re += '\\\\' + stateChar\n        break\n      }\n      self.debug('clearStateChar %j %j', stateChar, re)\n      stateChar = false\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c\n    ; (i < len) && (c = pattern.charAt(i))\n    ; i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c\n      escaping = false\n      continue\n    }\n\n    switch (c) {\n      /* istanbul ignore next */\n      case '/': {\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n      }\n\n      case '\\\\':\n        clearStateChar()\n        escaping = true\n      continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          this.debug('  in class')\n          if (c === '!' && i === classStart + 1) c = '^'\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        self.debug('call clearStateChar %j', stateChar)\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n      continue\n\n      case '(':\n        if (inClass) {\n          re += '('\n          continue\n        }\n\n        if (!stateChar) {\n          re += '\\\\('\n          continue\n        }\n\n        patternListStack.push({\n          type: stateChar,\n          start: i - 1,\n          reStart: re.length,\n          open: plTypes[stateChar].open,\n          close: plTypes[stateChar].close\n        })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'\n        this.debug('plType %j %j', stateChar, re)\n        stateChar = false\n      continue\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)'\n          continue\n        }\n\n        clearStateChar()\n        hasMagic = true\n        var pl = patternListStack.pop()\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        re += pl.close\n        if (pl.type === '!') {\n          negativeLists.push(pl)\n        }\n        pl.reEnd = re.length\n      continue\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|'\n          escaping = false\n          continue\n        }\n\n        clearStateChar()\n        re += '|'\n      continue\n\n      // these are mostly the same in regexp and glob\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += '\\\\' + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n      continue\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c\n          escaping = false\n          continue\n        }\n\n        // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n        // split where the last [ was, make sure we don't have\n        // an invalid re. if so, re-walk the contents of the\n        // would-be class to re-translate any characters that\n        // were passed through as-is\n        // TODO: It would probably be faster to determine this\n        // without a try/catch and a new RegExp, but it's tricky\n        // to do safely.  For now, this is safe and works.\n        var cs = pattern.substring(classStart + 1, i)\n        try {\n          RegExp('[' + cs + ']')\n        } catch (er) {\n          // not a valid class!\n          var sp = this.parse(cs, SUBPARSE)\n          re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]'\n          hasMagic = hasMagic || sp[1]\n          inClass = false\n          continue\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n      continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n          && !(c === '^' && inClass)) {\n          re += '\\\\'\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1)\n    sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + pl.open.length)\n    this.debug('setting tail', re, pl)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\'\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + '|'\n    })\n\n    this.debug('tail=%j\\n   %s', tail, tail, pl, re)\n    var t = pl.type === '*' ? star\n      : pl.type === '?' ? qmark\n      : '\\\\' + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\'\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case '[': case '.': case '(': addPatternStart = true\n  }\n\n  // Hack to work around lack of negative lookbehind in JS\n  // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n  // like 'a.xyz.yz' doesn't match.  So, the first negative\n  // lookahead, has to look ALL the way ahead, to the end of\n  // the pattern.\n  for (var n = negativeLists.length - 1; n > -1; n--) {\n    var nl = negativeLists[n]\n\n    var nlBefore = re.slice(0, nl.reStart)\n    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)\n    var nlAfter = re.slice(nl.reEnd)\n\n    nlLast += nlAfter\n\n    // Handle nested stuff like *(*.js|!(*.json)), where open parens\n    // mean that we should *not* include the ) in the bit that is considered\n    // \"after\" the negated section.\n    var openParensBefore = nlBefore.split('(').length - 1\n    var cleanAfter = nlAfter\n    for (i = 0; i < openParensBefore; i++) {\n      cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n    }\n    nlAfter = cleanAfter\n\n    var dollar = ''\n    if (nlAfter === '' && isSub !== SUBPARSE) {\n      dollar = '$'\n    }\n    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    re = newRe\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== '' && hasMagic) {\n    re = '(?=.)' + re\n  }\n\n  if (addPatternStart) {\n    re = patternStart + re\n  }\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? 'i' : ''\n  try {\n    var regExp = new RegExp('^' + re + '$', flags)\n  } catch (er) /* istanbul ignore next - should be impossible */ {\n    // If it was an invalid regular expression, then it can't match\n    // anything.  This trick looks for a character after the end of\n    // the string, which is of course impossible, except in multi-line\n    // mode, but it's not a /m regex.\n    return new RegExp('$.')\n  }\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) {\n    this.regexp = false\n    return this.regexp\n  }\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n    : options.dot ? twoStarDot\n    : twoStarNoDot\n  var flags = options.nocase ? 'i' : ''\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n      : (typeof p === 'string') ? regExpEscape(p)\n      : p._src\n    }).join('\\\\\\/')\n  }).join('|')\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = '^(?:' + re + ')$'\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = '^(?!' + re + ').*$'\n\n  try {\n    this.regexp = new RegExp(re, flags)\n  } catch (ex) /* istanbul ignore next - should be impossible */ {\n    this.regexp = false\n  }\n  return this.regexp\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {}\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = function match (f, partial) {\n  if (typeof partial === 'undefined') partial = this.partial\n  this.debug('match', f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === ''\n\n  if (f === '/' && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/')\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  this.debug(this.pattern, 'split', f)\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  this.debug(this.pattern, 'set', set)\n\n  // Find the basename of the path by looking for the last non-empty segment\n  var filename\n  var i\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i]\n    if (filename) break\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i]\n    var file = f\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename]\n    }\n    var hit = this.matchOne(file, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  this.debug('matchOne',\n    { 'this': this, file: file, pattern: pattern })\n\n  this.debug('matchOne', file.length, pattern.length)\n\n  for (var fi = 0,\n      pi = 0,\n      fl = file.length,\n      pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi++, pi++) {\n    this.debug('matchOne loop')\n    var p = pattern[pi]\n    var f = file[fi]\n\n    this.debug(pattern, p, f)\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    /* istanbul ignore if */\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n      var pr = pi + 1\n      if (pr === pl) {\n        this.debug('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' ||\n            (!options.dot && file[fi].charAt(0) === '.')) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      while (fr < fl) {\n        var swallowee = file[fr]\n\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' ||\n            (!options.dot && swallowee.charAt(0) === '.')) {\n            this.debug('dot detected!', file, fr, pattern, pr)\n            break\n          }\n\n          // ** swallows a segment, and continue.\n          this.debug('globstar swallow a segment, and continue')\n          fr++\n        }\n      }\n\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n      /* istanbul ignore if */\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === 'string') {\n      hit = f === p\n      this.debug('string match', p, f, hit)\n    } else {\n      hit = f.match(p)\n      this.debug('pattern match', p, f, hit)\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else /* istanbul ignore else */ if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    return (fi === fl - 1) && (file[fi] === '')\n  }\n\n  // should be unreachable.\n  /* istanbul ignore next */\n  throw new Error('wtf?')\n}\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, '$1')\n}\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._child_process = void 0;\n/****************************************************************************************\n * Expose `child_process` via our own object that can be easily patched by jest for tests.\n * Consumers of the `child_process` module should add functions to this object and import it\n * wherever needed.\n */\nconst child_process_1 = require(\"child_process\");\nexports._child_process = {\n    spawnSync: child_process_1.spawnSync,\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2NoaWxkX3Byb2Nlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX2NoaWxkX3Byb2Nlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7R0FJRztBQUNILGlEQUEwQztBQUU3QixRQUFBLGNBQWMsR0FBRztJQUM1QixTQUFTLEVBQUUseUJBQVM7Q0FDckIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBFeHBvc2UgYGNoaWxkX3Byb2Nlc3NgIHZpYSBvdXIgb3duIG9iamVjdCB0aGF0IGNhbiBiZSBlYXNpbHkgcGF0Y2hlZCBieSBqZXN0IGZvciB0ZXN0cy5cbiAqIENvbnN1bWVycyBvZiB0aGUgYGNoaWxkX3Byb2Nlc3NgIG1vZHVsZSBzaG91bGQgYWRkIGZ1bmN0aW9ucyB0byB0aGlzIG9iamVjdCBhbmQgaW1wb3J0IGl0XG4gKiB3aGVyZXZlciBuZWVkZWQuXG4gKi9cbmltcG9ydCB7IHNwYXduU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuXG5leHBvcnQgY29uc3QgX2NoaWxkX3Byb2Nlc3MgPSB7XG4gIHNwYXduU3luYzogc3Bhd25TeW5jLFxufTtcbiJdfQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolve = void 0;\nconst lazy_1 = require(\"./lazy\");\nfunction resolve(value) {\n    if (value == null) {\n        return value;\n    }\n    // cdk8s token\n    if (value instanceof lazy_1.Lazy) {\n        const resolved = value.produce();\n        return resolve(resolved);\n    }\n    // implicit token as generated by the cdk8s-cli (e.g IntOrString)\n    if (typeof (value.resolve) === 'function') {\n        const resolved = value.resolve();\n        return resolve(resolved);\n    }\n    if (typeof (value) !== 'object') {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return value.map(x => resolve(x));\n    }\n    const result = {};\n    for (const [k, v] of Object.entries(value)) {\n        result[k] = resolve(v);\n    }\n    return result;\n}\nexports.resolve = resolve;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3Jlc29sdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX3Jlc29sdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQThCO0FBRTlCLFNBQWdCLE9BQU8sQ0FBQyxLQUFVO0lBRWhDLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtRQUNqQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsY0FBYztJQUNkLElBQUksS0FBSyxZQUFZLFdBQUksRUFBRTtRQUN6QixNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakMsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDMUI7SUFFRCxpRUFBaUU7SUFDakUsSUFBSSxPQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLFVBQVUsRUFBRTtRQUN4QyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakMsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDMUI7SUFFRCxJQUFJLE9BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxRQUFRLEVBQUU7UUFDOUIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN4QixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNuQztJQUVELE1BQU0sTUFBTSxHQUFRLEVBQUUsQ0FBQztJQUV2QixLQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUMxQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3hCO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFFaEIsQ0FBQztBQWxDRCwwQkFrQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMYXp5IH0gZnJvbSAnLi9sYXp5JztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUodmFsdWU6IGFueSk6IGFueSB7XG5cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvLyBjZGs4cyB0b2tlblxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5KSB7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSB2YWx1ZS5wcm9kdWNlKCk7XG4gICAgcmV0dXJuIHJlc29sdmUocmVzb2x2ZWQpO1xuICB9XG5cbiAgLy8gaW1wbGljaXQgdG9rZW4gYXMgZ2VuZXJhdGVkIGJ5IHRoZSBjZGs4cy1jbGkgKGUuZyBJbnRPclN0cmluZylcbiAgaWYgKHR5cGVvZih2YWx1ZS5yZXNvbHZlKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IHJlc29sdmVkID0gdmFsdWUucmVzb2x2ZSgpO1xuICAgIHJldHVybiByZXNvbHZlKHJlc29sdmVkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YodmFsdWUpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoeCA9PiByZXNvbHZlKHgpKTtcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdDogYW55ID0ge307XG5cbiAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXModmFsdWUpKSB7XG4gICAgcmVzdWx0W2tdID0gcmVzb2x2ZSh2KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG5cbn1cbiJdfQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sanitizeValue = void 0;\nfunction sanitizeValue(obj, options = {}) {\n    var _a;\n    if (obj == null) {\n        return undefined;\n    }\n    if (typeof (obj) !== 'object') {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        if (options.filterEmptyArrays && obj.length === 0) {\n            return undefined;\n        }\n        return obj.map(x => sanitizeValue(x, options));\n    }\n    if (obj.constructor.name !== 'Object') {\n        throw new Error(`can't render non-simple object of type '${obj.constructor.name}'`);\n    }\n    const newObj = {};\n    const sortKeys = (_a = options.sortKeys) !== null && _a !== void 0 ? _a : true;\n    const keys = sortKeys ? Object.keys(obj).sort() : Object.keys(obj);\n    for (const key of keys) {\n        const value = obj[key];\n        const newValue = sanitizeValue(value, options);\n        if (newValue != null) {\n            newObj[key] = newValue;\n        }\n    }\n    if (options.filterEmptyObjects && Object.keys(newObj).length === 0) {\n        return undefined;\n    }\n    return newObj;\n}\nexports.sanitizeValue = sanitizeValue;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3V0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvX3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBb0JBLFNBQWdCLGFBQWEsQ0FBQyxHQUFRLEVBQUUsVUFBMkIsRUFBRzs7SUFDcEUsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFO1FBQ2YsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFFRCxJQUFJLE9BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7UUFDNUIsT0FBTyxHQUFHLENBQUM7S0FDWjtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUV0QixJQUFJLE9BQU8sQ0FBQyxpQkFBaUIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNqRCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUVELE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUNoRDtJQUVELElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQ3JDLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztLQUNyRjtJQUVELE1BQU0sTUFBTSxHQUEyQixFQUFHLENBQUM7SUFFM0MsTUFBTSxRQUFRLFNBQUcsT0FBTyxDQUFDLFFBQVEsbUNBQUksSUFBSSxDQUFDO0lBQzFDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuRSxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtRQUN0QixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkIsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQyxJQUFJLFFBQVEsSUFBSSxJQUFJLEVBQUU7WUFDcEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQztTQUN4QjtLQUNGO0lBRUQsSUFBSSxPQUFPLENBQUMsa0JBQWtCLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ2xFLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQXZDRCxzQ0F1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIFNhbml0aXplT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBEbyBub3QgaW5jbHVkZSBlbXB0eSBvYmplY3RzIChubyBrZXlzKS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IGZpbHRlckVtcHR5T2JqZWN0cz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIERvIG5vdCBpbmNsdWRlIGFycmF5cyB3aXRoIG5vIGl0ZW1zLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgZmlsdGVyRW1wdHlBcnJheXM/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTb3J0IGRpY3Rpb25hcnkga2V5cy5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgcmVhZG9ubHkgc29ydEtleXM/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVWYWx1ZShvYmo6IGFueSwgb3B0aW9uczogU2FuaXRpemVPcHRpb25zID0geyB9KTogYW55IHtcbiAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2Yob2JqKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuXG4gICAgaWYgKG9wdGlvbnMuZmlsdGVyRW1wdHlBcnJheXMgJiYgb2JqLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqLm1hcCh4ID0+IHNhbml0aXplVmFsdWUoeCwgb3B0aW9ucykpO1xuICB9XG5cbiAgaWYgKG9iai5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBFcnJvcihgY2FuJ3QgcmVuZGVyIG5vbi1zaW1wbGUgb2JqZWN0IG9mIHR5cGUgJyR7b2JqLmNvbnN0cnVjdG9yLm5hbWV9J2ApO1xuICB9XG5cbiAgY29uc3QgbmV3T2JqOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0geyB9O1xuXG4gIGNvbnN0IHNvcnRLZXlzID0gb3B0aW9ucy5zb3J0S2V5cyA/PyB0cnVlO1xuICBjb25zdCBrZXlzID0gc29ydEtleXMgPyBPYmplY3Qua2V5cyhvYmopLnNvcnQoKSA6IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG9ialtrZXldO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gc2FuaXRpemVWYWx1ZSh2YWx1ZSwgb3B0aW9ucyk7XG4gICAgaWYgKG5ld1ZhbHVlICE9IG51bGwpIHtcbiAgICAgIG5ld09ialtrZXldID0gbmV3VmFsdWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdGlvbnMuZmlsdGVyRW1wdHlPYmplY3RzICYmIE9iamVjdC5rZXlzKG5ld09iaikubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBuZXdPYmo7XG59XG4iXX0=","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApiObject = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst constructs_1 = require(\"constructs\");\nconst _resolve_1 = require(\"./_resolve\");\nconst _util_1 = require(\"./_util\");\nconst chart_1 = require(\"./chart\");\nconst json_patch_1 = require(\"./json-patch\");\nconst metadata_1 = require(\"./metadata\");\nclass ApiObject extends constructs_1.Construct {\n    /**\n     * Defines an API object.\n     *\n     * @param scope the construct scope\n     * @param id namespace\n     * @param props options\n     */\n    constructor(scope, id, props) {\n        var _b, _c, _d, _e, _f;\n        super(scope, id);\n        this.props = props;\n        this.patches = new Array();\n        this.chart = chart_1.Chart.of(this);\n        this.kind = props.kind;\n        this.apiVersion = props.apiVersion;\n        this.apiGroup = parseApiGroup(this.apiVersion);\n        this.name = (_c = (_b = props.metadata) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : this.chart.generateObjectName(this);\n        this.metadata = new metadata_1.ApiObjectMetadataDefinition({\n            name: this.name,\n            // user defined values\n            ...props.metadata,\n            namespace: (_e = (_d = props.metadata) === null || _d === void 0 ? void 0 : _d.namespace) !== null && _e !== void 0 ? _e : this.chart.namespace,\n            labels: {\n                ...this.chart.labels,\n                ...(_f = props.metadata) === null || _f === void 0 ? void 0 : _f.labels,\n            },\n        });\n    }\n    /**\n     * Returns the `ApiObject` named `Resource` which is a child of the given\n     * construct. If `c` is an `ApiObject`, it is returned directly. Throws an\n     * exception if the construct does not have a child named `Default` _or_ if\n     * this child is not an `ApiObject`.\n     *\n     * @param c The higher-level construct\n     */\n    static of(c) {\n        if (c instanceof ApiObject) {\n            return c;\n        }\n        const child = constructs_1.Node.of(c).defaultChild;\n        if (!child) {\n            throw new Error(`cannot find a (direct or indirect) child of type ApiObject for construct ${constructs_1.Node.of(c).path}`);\n        }\n        return ApiObject.of(child);\n    }\n    /**\n     * Create a dependency between this ApiObject and other constructs.\n     * These can be other ApiObjects, Charts, or custom.\n     *\n     * @param dependencies the dependencies to add.\n     */\n    addDependency(...dependencies) {\n        constructs_1.Node.of(this).addDependency(...dependencies);\n    }\n    /**\n     * Applies a set of RFC-6902 JSON-Patch operations to the manifest\n     * synthesized for this API object.\n     *\n     * @param ops The JSON-Patch operations to apply.\n     *\n     * @example\n     *\n     *   kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));\n     *\n     */\n    addJsonPatch(...ops) {\n        this.patches.push(...ops);\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     *\n     * To disable sorting of dictionary keys in output object set the\n     * `CDK8S_DISABLE_SORT` environment variable to any non-empty value.\n     */\n    toJson() {\n        const data = {\n            ...this.props,\n            metadata: this.metadata.toJson(),\n        };\n        const sortKeys = process.env.CDK8S_DISABLE_SORT ? false : true;\n        const json = _util_1.sanitizeValue(_resolve_1.resolve(data), { sortKeys });\n        const patched = json_patch_1.JsonPatch.apply(json, ...this.patches);\n        // reorder top-level keys so that we first have \"apiVersion\", \"kind\" and\n        // \"metadata\" and then all the rest\n        const result = {};\n        const orderedKeys = ['apiVersion', 'kind', 'metadata', ...Object.keys(patched)];\n        for (const k of orderedKeys) {\n            if (k in patched) {\n                result[k] = patched[k];\n            }\n        }\n        return result;\n    }\n}\nexports.ApiObject = ApiObject;\n_a = JSII_RTTI_SYMBOL_1;\nApiObject[_a] = { fqn: \"cdk8s.ApiObject\", version: \"2.3.11\" };\nfunction parseApiGroup(apiVersion) {\n    const v = apiVersion.split('/');\n    // no group means \"core\"\n    // https://kubernetes.io/docs/reference/using-api/api-overview/#api-groups\n    if (v.length === 1) {\n        return 'core';\n    }\n    if (v.length === 2) {\n        return v[0];\n    }\n    throw new Error(`invalid apiVersion ${apiVersion}, expecting GROUP/VERSION. See https://kubernetes.io/docs/reference/using-api/api-overview/#api-groups`);\n}\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.App = exports.YamlOutputType = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst constructs_1 = require(\"constructs\");\nconst api_object_1 = require(\"./api-object\");\nconst chart_1 = require(\"./chart\");\nconst dependency_1 = require(\"./dependency\");\nconst names_1 = require(\"./names\");\nconst yaml_1 = require(\"./yaml\");\n/** The method to divide YAML output into files */\nvar YamlOutputType;\n(function (YamlOutputType) {\n    /** All resources are output into a single YAML file */\n    YamlOutputType[YamlOutputType[\"FILE_PER_APP\"] = 0] = \"FILE_PER_APP\";\n    /** Resources are split into seperate files by chart */\n    YamlOutputType[YamlOutputType[\"FILE_PER_CHART\"] = 1] = \"FILE_PER_CHART\";\n    /** Each resource is output to its own file */\n    YamlOutputType[YamlOutputType[\"FILE_PER_RESOURCE\"] = 2] = \"FILE_PER_RESOURCE\";\n    /** Each chart in its own folder and each resource in its own file */\n    YamlOutputType[YamlOutputType[\"FOLDER_PER_CHART_FILE_PER_RESOURCE\"] = 3] = \"FOLDER_PER_CHART_FILE_PER_RESOURCE\";\n})(YamlOutputType = exports.YamlOutputType || (exports.YamlOutputType = {}));\n/**\n * Represents a cdk8s application.\n */\nclass App extends constructs_1.Construct {\n    /**\n     * Defines an app\n     * @param props configuration options\n     */\n    constructor(props = {}) {\n        var _b, _c, _d, _e;\n        super(undefined, '');\n        this.outdir = (_c = (_b = props.outdir) !== null && _b !== void 0 ? _b : process.env.CDK8S_OUTDIR) !== null && _c !== void 0 ? _c : 'dist';\n        this.outputFileExtension = (_d = props.outputFileExtension) !== null && _d !== void 0 ? _d : '.k8s.yaml';\n        this.yamlOutputType = (_e = props.yamlOutputType) !== null && _e !== void 0 ? _e : YamlOutputType.FILE_PER_CHART;\n    }\n    /**\n     * Synthesize a single chart.\n     *\n     * Each element returned in the resulting array represents a different ApiObject\n     * in the scope of the chart.\n     *\n     * Note that the returned array order is important. It is determined by the various dependencies between\n     * the constructs in the chart, where the first element is the one without dependencies, and so on...\n     *\n     * @returns An array of JSON objects.\n     * @param chart the chart to synthesize.\n     * @internal\n     */\n    static _synthChart(chart) {\n        const app = App.of(chart);\n        // we must prepare the entire app before synthesizing the chart\n        // because the dependency inference happens on the app level.\n        resolveDependencies(app);\n        // validate the app since we want to call onValidate of the relevant constructs.\n        // note this will also call onValidate on constructs from possibly different charts,\n        // but thats ok too since we no longer treat constructs as a self-contained synthesis unit.\n        validate(app);\n        return chartToKube(chart).map(obj => obj.toJson());\n    }\n    static of(c) {\n        const scope = constructs_1.Node.of(c).scope;\n        if (!scope) {\n            // the app is the only construct without a scope.\n            return c;\n        }\n        return App.of(scope);\n    }\n    /**\n     * Returns all the charts in this app, sorted topologically.\n     */\n    get charts() {\n        const isChart = (x) => x instanceof chart_1.Chart;\n        return new dependency_1.DependencyGraph(constructs_1.Node.of(this))\n            .topology()\n            .filter(isChart);\n    }\n    /**\n     * Synthesizes all manifests to the output directory\n     */\n    synth() {\n        fs.mkdirSync(this.outdir, { recursive: true });\n        // Since we plan on removing the distributed synth mechanism, we no longer call `Node.synthesize`, but rather simply implement\n        // the necessary operations. We do however want to preserve the distributed validation.\n        validate(this);\n        // this is kind of sucky, eventually I would like the DependencyGraph\n        // to be able to answer this question.\n        const hasDependantCharts = resolveDependencies(this);\n        const charts = this.charts;\n        switch (this.yamlOutputType) {\n            case YamlOutputType.FILE_PER_APP:\n                let apiObjectList = [];\n                for (const chart of charts) {\n                    apiObjectList.push(...chartToKube(chart));\n                }\n                if (charts.length > 0) {\n                    yaml_1.Yaml.save(path.join(this.outdir, `app${this.outputFileExtension}`), // There is no \"app name\", so we just hardcode the file name\n                    apiObjectList.map((apiObject) => apiObject.toJson()));\n                }\n                break;\n            case YamlOutputType.FILE_PER_CHART:\n                const namer = hasDependantCharts ? new IndexedChartNamer() : new SimpleChartNamer();\n                for (const chart of charts) {\n                    const chartName = namer.name(chart);\n                    const objects = chartToKube(chart);\n                    yaml_1.Yaml.save(path.join(this.outdir, chartName + this.outputFileExtension), objects.map(obj => obj.toJson()));\n                }\n                break;\n            case YamlOutputType.FILE_PER_RESOURCE:\n                for (const chart of charts) {\n                    const apiObjects = chartToKube(chart);\n                    apiObjects.forEach((apiObject) => {\n                        if (!(apiObject === undefined)) {\n                            const fileName = `${`${apiObject.kind}.${apiObject.metadata.name}`\n                                .replace(/[^0-9a-zA-Z-_.]/g, '')}`;\n                            yaml_1.Yaml.save(path.join(this.outdir, fileName + this.outputFileExtension), [apiObject.toJson()]);\n                        }\n                    });\n                }\n                break;\n            case YamlOutputType.FOLDER_PER_CHART_FILE_PER_RESOURCE:\n                const folderNamer = hasDependantCharts ? new IndexedChartFolderNamer() : new SimpleChartFolderNamer();\n                for (const chart of charts) {\n                    const chartName = folderNamer.name(chart);\n                    const apiObjects = chartToKube(chart);\n                    const fullOutDir = path.join(this.outdir, chartName);\n                    fs.mkdirSync(fullOutDir, { recursive: true });\n                    apiObjects.forEach((apiObject) => {\n                        if (!(apiObject === undefined)) {\n                            const fileName = `${`${apiObject.kind}.${apiObject.metadata.name}`\n                                .replace(/[^0-9a-zA-Z-_.]/g, '')}`;\n                            yaml_1.Yaml.save(path.join(fullOutDir, fileName + this.outputFileExtension), [apiObject.toJson()]);\n                        }\n                    });\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Synthesizes the app into a YAML string.\n     *\n     * @returns A string with all YAML objects across all charts in this app.\n     */\n    synthYaml() {\n        validate(this);\n        const charts = this.charts;\n        const docs = [];\n        for (const chart of charts) {\n            const apiObjects = chartToKube(chart);\n            docs.push(...apiObjects.map(apiObject => apiObject.toJson()));\n        }\n        return yaml_1.Yaml.stringify(...docs);\n    }\n}\nexports.App = App;\n_a = JSII_RTTI_SYMBOL_1;\nApp[_a] = { fqn: \"cdk8s.App\", version: \"2.3.11\" };\nfunction validate(app) {\n    const errors = [];\n    for (const child of app.node.findAll()) {\n        const childErrors = child.node.validate();\n        for (const error of childErrors) {\n            errors.push(`[${child.node.path}] ${error}`);\n        }\n    }\n    if (errors.length > 0) {\n        throw new Error(`Validation failed with the following errors:\\n  ${errors.join('\\n  ')}`);\n    }\n}\nfunction resolveDependencies(app) {\n    let hasDependantCharts = false;\n    const deps = [];\n    for (const child of app.node.findAll()) {\n        for (const dep of child.node.dependencies) {\n            deps.push({ source: child, target: dep });\n        }\n    }\n    for (const dep of deps) {\n        // create explicit api object dependencies from implicit construct dependencies\n        const targetApiObjects = constructs_1.Node.of(dep.target).findAll().filter(c => c instanceof api_object_1.ApiObject);\n        const sourceApiObjects = constructs_1.Node.of(dep.source).findAll().filter(c => c instanceof api_object_1.ApiObject);\n        for (const target of targetApiObjects) {\n            for (const source of sourceApiObjects) {\n                if (target !== source) {\n                    constructs_1.Node.of(source).addDependency(target);\n                }\n            }\n        }\n        // create an explicit chart dependency from implicit construct dependencies\n        const sourceChart = chart_1.Chart.of(dep.source);\n        const targetChart = chart_1.Chart.of(dep.target);\n        if (sourceChart !== targetChart) {\n            constructs_1.Node.of(sourceChart).addDependency(targetChart);\n            hasDependantCharts = true;\n        }\n    }\n    const charts = new dependency_1.DependencyGraph(constructs_1.Node.of(app)).topology()\n        .filter(x => x instanceof chart_1.Chart);\n    for (const parentChart of charts) {\n        for (const childChart of constructs_1.Node.of(parentChart).children.filter(x => x instanceof chart_1.Chart)) {\n            // create an explicit chart dependency from nested chart relationships\n            constructs_1.Node.of(parentChart).addDependency(childChart);\n            hasDependantCharts = true;\n        }\n    }\n    return hasDependantCharts;\n}\nfunction chartToKube(chart) {\n    return new dependency_1.DependencyGraph(constructs_1.Node.of(chart)).topology()\n        .filter(x => x instanceof api_object_1.ApiObject)\n        .filter(x => chart_1.Chart.of(x) === chart) // include an object only in its closest parent chart\n        .map(x => x);\n}\nclass SimpleChartNamer {\n    constructor() {\n    }\n    name(chart) {\n        return `${names_1.Names.toDnsLabel(chart)}`;\n    }\n}\nclass IndexedChartNamer extends SimpleChartNamer {\n    constructor() {\n        super();\n        this.index = 0;\n    }\n    name(chart) {\n        const name = `${this.index.toString().padStart(4, '0')}-${super.name(chart)}`;\n        this.index++;\n        return name;\n    }\n}\nclass SimpleChartFolderNamer {\n    constructor() {\n    }\n    name(chart) {\n        return names_1.Names.toDnsLabel(chart);\n    }\n}\nclass IndexedChartFolderNamer extends SimpleChartFolderNamer {\n    constructor() {\n        super();\n        this.index = 0;\n    }\n    name(chart) {\n        const name = `${this.index.toString().padStart(4, '0')}-${super.name(chart)}`;\n        this.index++;\n        return name;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Chart = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst constructs_1 = require(\"constructs\");\nconst app_1 = require(\"./app\");\nconst names_1 = require(\"./names\");\nconst CHART_SYMBOL = Symbol.for('cdk8s.Chart');\nclass Chart extends constructs_1.Construct {\n    constructor(scope, id, props = {}) {\n        var _b;\n        super(scope, id);\n        this.namespace = props.namespace;\n        this._labels = (_b = props.labels) !== null && _b !== void 0 ? _b : {};\n        Object.defineProperty(this, CHART_SYMBOL, { value: true });\n    }\n    /**\n     * Return whether the given object is a Chart.\n     *\n     * We do attribute detection since we can't reliably use 'instanceof'.\n     */\n    static isChart(x) {\n        return x !== null && typeof (x) === 'object' && CHART_SYMBOL in x;\n    }\n    /**\n     * Finds the chart in which a node is defined.\n     * @param c a construct node\n     */\n    static of(c) {\n        if (Chart.isChart(c)) {\n            return c;\n        }\n        const parent = constructs_1.Node.of(c).scope;\n        if (!parent) {\n            throw new Error('cannot find a parent chart (directly or indirectly)');\n        }\n        return Chart.of(parent);\n    }\n    /**\n     * Labels applied to all resources in this chart.\n     *\n     * This is an immutable copy.\n     */\n    get labels() {\n        return { ...this._labels };\n    }\n    /**\n     * Generates a app-unique name for an object given it's construct node path.\n     *\n     * Different resource types may have different constraints on names\n     * (`metadata.name`). The previous version of the name generator was\n     * compatible with DNS_SUBDOMAIN but not with DNS_LABEL.\n     *\n     * For example, `Deployment` names must comply with DNS_SUBDOMAIN while\n     * `Service` names must comply with DNS_LABEL.\n     *\n     * Since there is no formal specification for this, the default name\n     * generation scheme for kubernetes objects in cdk8s was changed to DNS_LABEL,\n     * since it’s the common denominator for all kubernetes resources\n     * (supposedly).\n     *\n     * You can override this method if you wish to customize object names at the\n     * chart level.\n     *\n     * @param apiObject The API object to generate a name for.\n     */\n    generateObjectName(apiObject) {\n        return names_1.Names.toDnsLabel(apiObject);\n    }\n    /**\n     * Create a dependency between this Chart and other constructs.\n     * These can be other ApiObjects, Charts, or custom.\n     *\n     * @param dependencies the dependencies to add.\n     */\n    addDependency(...dependencies) {\n        constructs_1.Node.of(this).addDependency(...dependencies);\n    }\n    /**\n     * Renders this chart to a set of Kubernetes JSON resources.\n     * @returns array of resource manifests\n     */\n    toJson() {\n        return app_1.App._synthChart(this);\n    }\n}\nexports.Chart = Chart;\n_a = JSII_RTTI_SYMBOL_1;\nChart[_a] = { fqn: \"cdk8s.Chart\", version: \"2.3.11\" };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY2hhcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBeUQ7QUFFekQsK0JBQTRCO0FBQzVCLG1DQUFnQztBQUVoQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBb0IvQyxNQUFhLEtBQU0sU0FBUSxzQkFBUztJQXFDbEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxRQUFvQixFQUFHOztRQUMvRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxTQUFHLEtBQUssQ0FBQyxNQUFNLG1DQUFJLEVBQUUsQ0FBQztRQUVsQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBMUNEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQU07UUFDMUIsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLE9BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksWUFBWSxJQUFJLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFhO1FBQzVCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNwQixPQUFPLENBQUMsQ0FBQztTQUNWO1FBRUQsTUFBTSxNQUFNLEdBQUcsaUJBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBa0IsQ0FBQztRQUM3QyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsTUFBTSxJQUFJLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFvQkQ7Ozs7T0FJRztJQUNILElBQVcsTUFBTTtRQUNmLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FtQkc7SUFDSSxrQkFBa0IsQ0FBQyxTQUFvQjtRQUM1QyxPQUFPLGFBQUssQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksYUFBYSxDQUFDLEdBQUcsWUFBMEI7UUFDaEQsaUJBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE1BQU07UUFDWCxPQUFPLFNBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7QUE5Rkgsc0JBK0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0LCBOb2RlLCBJQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBBcGlPYmplY3QgfSBmcm9tICcuL2FwaS1vYmplY3QnO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSAnLi9hcHAnO1xuaW1wb3J0IHsgTmFtZXMgfSBmcm9tICcuL25hbWVzJztcblxuY29uc3QgQ0hBUlRfU1lNQk9MID0gU3ltYm9sLmZvcignY2RrOHMuQ2hhcnQnKTtcblxuZXhwb3J0IGludGVyZmFjZSBDaGFydFByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IG5hbWVzcGFjZSBmb3IgYWxsIG9iamVjdHMgZGVmaW5lZCBpbiB0aGlzIGNoYXJ0IChkaXJlY3RseSBvclxuICAgKiBpbmRpcmVjdGx5KS4gVGhpcyBuYW1lc3BhY2Ugd2lsbCBvbmx5IGFwcGx5IHRvIG9iamVjdHMgdGhhdCBkb24ndCBoYXZlIGFcbiAgICogYG5hbWVzcGFjZWAgZXhwbGljaXRseSBkZWZpbmVkIGZvciB0aGVtLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIG5vIG5hbWVzcGFjZSBpcyBzeW50aGVzaXplZCAodXN1YWxseSB0aGlzIGltcGxpZXMgXCJkZWZhdWx0XCIpXG4gICAqL1xuICByZWFkb25seSBuYW1lc3BhY2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIExhYmVscyB0byBhcHBseSB0byBhbGwgcmVzb3VyY2VzIGluIHRoaXMgY2hhcnQuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbm8gY29tbW9uIGxhYmVsc1xuICAgKi9cbiAgcmVhZG9ubHkgbGFiZWxzPzogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH07XG59XG5cbmV4cG9ydCBjbGFzcyBDaGFydCBleHRlbmRzIENvbnN0cnVjdCB7XG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGEgQ2hhcnQuXG4gICAqXG4gICAqIFdlIGRvIGF0dHJpYnV0ZSBkZXRlY3Rpb24gc2luY2Ugd2UgY2FuJ3QgcmVsaWFibHkgdXNlICdpbnN0YW5jZW9mJy5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaXNDaGFydCh4OiBhbnkpOiB4IGlzIENoYXJ0IHtcbiAgICByZXR1cm4geCAhPT0gbnVsbCAmJiB0eXBlb2YoeCkgPT09ICdvYmplY3QnICYmIENIQVJUX1NZTUJPTCBpbiB4O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBjaGFydCBpbiB3aGljaCBhIG5vZGUgaXMgZGVmaW5lZC5cbiAgICogQHBhcmFtIGMgYSBjb25zdHJ1Y3Qgbm9kZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBvZihjOiBJQ29uc3RydWN0KTogQ2hhcnQge1xuICAgIGlmIChDaGFydC5pc0NoYXJ0KGMpKSB7XG4gICAgICByZXR1cm4gYztcbiAgICB9XG5cbiAgICBjb25zdCBwYXJlbnQgPSBOb2RlLm9mKGMpLnNjb3BlIGFzIENvbnN0cnVjdDtcbiAgICBpZiAoIXBhcmVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgZmluZCBhIHBhcmVudCBjaGFydCAoZGlyZWN0bHkgb3IgaW5kaXJlY3RseSknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gQ2hhcnQub2YocGFyZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBuYW1lc3BhY2UgZm9yIGFsbCBvYmplY3RzIGluIHRoaXMgY2hhcnQuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbmFtZXNwYWNlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDaGFydC1sZXZlbCBsYWJlbHMuXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IF9sYWJlbHM/OiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfTtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQ2hhcnRQcm9wcyA9IHsgfSkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gICAgdGhpcy5uYW1lc3BhY2UgPSBwcm9wcy5uYW1lc3BhY2U7XG4gICAgdGhpcy5fbGFiZWxzID0gcHJvcHMubGFiZWxzID8/IHt9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIENIQVJUX1NZTUJPTCwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMYWJlbHMgYXBwbGllZCB0byBhbGwgcmVzb3VyY2VzIGluIHRoaXMgY2hhcnQuXG4gICAqXG4gICAqIFRoaXMgaXMgYW4gaW1tdXRhYmxlIGNvcHkuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGxhYmVscygpOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfSB7XG4gICAgcmV0dXJuIHsgLi4udGhpcy5fbGFiZWxzIH07XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgYXBwLXVuaXF1ZSBuYW1lIGZvciBhbiBvYmplY3QgZ2l2ZW4gaXQncyBjb25zdHJ1Y3Qgbm9kZSBwYXRoLlxuICAgKlxuICAgKiBEaWZmZXJlbnQgcmVzb3VyY2UgdHlwZXMgbWF5IGhhdmUgZGlmZmVyZW50IGNvbnN0cmFpbnRzIG9uIG5hbWVzXG4gICAqIChgbWV0YWRhdGEubmFtZWApLiBUaGUgcHJldmlvdXMgdmVyc2lvbiBvZiB0aGUgbmFtZSBnZW5lcmF0b3Igd2FzXG4gICAqIGNvbXBhdGlibGUgd2l0aCBETlNfU1VCRE9NQUlOIGJ1dCBub3Qgd2l0aCBETlNfTEFCRUwuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCBgRGVwbG95bWVudGAgbmFtZXMgbXVzdCBjb21wbHkgd2l0aCBETlNfU1VCRE9NQUlOIHdoaWxlXG4gICAqIGBTZXJ2aWNlYCBuYW1lcyBtdXN0IGNvbXBseSB3aXRoIEROU19MQUJFTC5cbiAgICpcbiAgICogU2luY2UgdGhlcmUgaXMgbm8gZm9ybWFsIHNwZWNpZmljYXRpb24gZm9yIHRoaXMsIHRoZSBkZWZhdWx0IG5hbWVcbiAgICogZ2VuZXJhdGlvbiBzY2hlbWUgZm9yIGt1YmVybmV0ZXMgb2JqZWN0cyBpbiBjZGs4cyB3YXMgY2hhbmdlZCB0byBETlNfTEFCRUwsXG4gICAqIHNpbmNlIGl04oCZcyB0aGUgY29tbW9uIGRlbm9taW5hdG9yIGZvciBhbGwga3ViZXJuZXRlcyByZXNvdXJjZXNcbiAgICogKHN1cHBvc2VkbHkpLlxuICAgKlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoaXMgbWV0aG9kIGlmIHlvdSB3aXNoIHRvIGN1c3RvbWl6ZSBvYmplY3QgbmFtZXMgYXQgdGhlXG4gICAqIGNoYXJ0IGxldmVsLlxuICAgKlxuICAgKiBAcGFyYW0gYXBpT2JqZWN0IFRoZSBBUEkgb2JqZWN0IHRvIGdlbmVyYXRlIGEgbmFtZSBmb3IuXG4gICAqL1xuICBwdWJsaWMgZ2VuZXJhdGVPYmplY3ROYW1lKGFwaU9iamVjdDogQXBpT2JqZWN0KSB7XG4gICAgcmV0dXJuIE5hbWVzLnRvRG5zTGFiZWwoYXBpT2JqZWN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBkZXBlbmRlbmN5IGJldHdlZW4gdGhpcyBDaGFydCBhbmQgb3RoZXIgY29uc3RydWN0cy5cbiAgICogVGhlc2UgY2FuIGJlIG90aGVyIEFwaU9iamVjdHMsIENoYXJ0cywgb3IgY3VzdG9tLlxuICAgKlxuICAgKiBAcGFyYW0gZGVwZW5kZW5jaWVzIHRoZSBkZXBlbmRlbmNpZXMgdG8gYWRkLlxuICAgKi9cbiAgcHVibGljIGFkZERlcGVuZGVuY3koLi4uZGVwZW5kZW5jaWVzOiBJQ29uc3RydWN0W10pIHtcbiAgICBOb2RlLm9mKHRoaXMpLmFkZERlcGVuZGVuY3koLi4uZGVwZW5kZW5jaWVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgY2hhcnQgdG8gYSBzZXQgb2YgS3ViZXJuZXRlcyBKU09OIHJlc291cmNlcy5cbiAgICogQHJldHVybnMgYXJyYXkgb2YgcmVzb3VyY2UgbWFuaWZlc3RzXG4gICAqL1xuICBwdWJsaWMgdG9Kc29uKCk6IGFueVtdIHtcbiAgICByZXR1cm4gQXBwLl9zeW50aENoYXJ0KHRoaXMpO1xuICB9XG59XG5cbiJdfQ==","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DependencyVertex = exports.DependencyGraph = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst constructs_1 = require(\"constructs\");\n/**\n * Represents the dependency graph for a given Node.\n *\n * This graph includes the dependency relationships between all nodes in the\n * node (construct) sub-tree who's root is this Node.\n *\n * Note that this means that lonely nodes (no dependencies and no dependants) are also included in this graph as\n * childless children of the root node of the graph.\n *\n * The graph does not include cross-scope dependencies. That is, if a child on the current scope depends on a node\n * from a different scope, that relationship is not represented in this graph.\n *\n */\nclass DependencyGraph {\n    constructor(node) {\n        this._fosterParent = new DependencyVertex();\n        const nodes = {};\n        function putVertex(construct) {\n            nodes[constructs_1.Node.of(construct).path] = new DependencyVertex(construct);\n        }\n        function getVertex(construct) {\n            return nodes[constructs_1.Node.of(construct).path];\n        }\n        // create all vertices of the graph.\n        for (const n of node.findAll()) {\n            putVertex(n);\n        }\n        const deps = [];\n        for (const child of node.findAll()) {\n            for (const dep of child.node.dependencies) {\n                deps.push({ source: child, target: dep });\n            }\n        }\n        // create all the edges of the graph.\n        for (const dep of deps) {\n            if (!getVertex(dep.target)) {\n                // dont cross scope boundaries.\n                // since charts only renders its own children, this is ok and\n                // has the benefit of simplifying the graph. we should reconsider this behavior when moving\n                // to a more general purpose use-case.\n                continue;\n            }\n            const sourceDepNode = getVertex(dep.source);\n            const targetDepNode = getVertex(dep.target);\n            sourceDepNode.addChild(targetDepNode);\n        }\n        // create the root.\n        for (const n of Object.values(nodes)) {\n            if (n.inbound.length === 0) {\n                // orphans are dependency roots. lets adopt them!\n                this._fosterParent.addChild(n);\n            }\n        }\n    }\n    /**\n     * Returns the root of the graph.\n     *\n     * Note that this vertex will always have `null` as its `.value` since it is an artifical root\n     * that binds all the connected spaces of the graph.\n     */\n    get root() {\n        return this._fosterParent;\n    }\n    /**\n     * @see Vertex.topology()\n     */\n    topology() {\n        return this._fosterParent.topology();\n    }\n}\nexports.DependencyGraph = DependencyGraph;\n_a = JSII_RTTI_SYMBOL_1;\nDependencyGraph[_a] = { fqn: \"cdk8s.DependencyGraph\", version: \"2.3.11\" };\n/**\n * Represents a vertex in the graph.\n *\n * The value of each vertex is an `IConstruct` that is accessible via the `.value` getter.\n */\nclass DependencyVertex {\n    constructor(value = undefined) {\n        this._children = new Set();\n        this._parents = new Set();\n        this._value = value;\n    }\n    /**\n     * Returns the IConstruct this graph vertex represents.\n     *\n     * `null` in case this is the root of the graph.\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * Returns the children of the vertex (i.e dependencies)\n     */\n    get outbound() {\n        return Array.from(this._children);\n    }\n    /**\n     * Returns the parents of the vertex (i.e dependants)\n     */\n    get inbound() {\n        return Array.from(this._parents);\n    }\n    /**\n     * Returns a topologically sorted array of the constructs in the sub-graph.\n     */\n    topology() {\n        const found = new Set();\n        const topology = [];\n        function visit(n) {\n            for (const c of n.outbound) {\n                visit(c);\n            }\n            if (!found.has(n)) {\n                topology.push(n);\n                found.add(n);\n            }\n        }\n        visit(this);\n        return topology.filter(d => d.value).map(d => d.value);\n    }\n    /**\n     * Adds a vertex as a dependency of the current node.\n     * Also updates the parents of `dep`, so that it contains this node as a parent.\n     *\n     * This operation will fail in case it creates a cycle in the graph.\n     *\n     * @param dep The dependency\n     */\n    addChild(dep) {\n        const cycle = dep.findRoute(this);\n        if (cycle.length !== 0) {\n            cycle.push(dep);\n            throw new Error(`Dependency cycle detected: ${cycle.filter(d => d.value).map(d => constructs_1.Node.of(d.value).path).join(' => ')}`);\n        }\n        this._children.add(dep);\n        dep.addParent(this);\n    }\n    addParent(dep) {\n        this._parents.add(dep);\n    }\n    findRoute(dst) {\n        const route = [];\n        visit(this);\n        return route;\n        function visit(n) {\n            route.push(n);\n            let found = false;\n            for (const c of n.outbound) {\n                if (c === dst) {\n                    route.push(c);\n                    return true;\n                }\n                found = visit(c);\n            }\n            if (!found) {\n                route.pop();\n            }\n            return found;\n        }\n    }\n}\nexports.DependencyVertex = DependencyVertex;\n_b = JSII_RTTI_SYMBOL_1;\nDependencyVertex[_b] = { fqn: \"cdk8s.DependencyVertex\", version: \"2.3.11\" };\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Duration = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\n/**\n * Represents a length of time.\n *\n * The amount can be specified either as a literal value (e.g: `10`) which\n * cannot be negative.\n *\n */\nclass Duration {\n    constructor(amount, unit) {\n        if (amount < 0) {\n            throw new Error(`Duration amounts cannot be negative. Received: ${amount}`);\n        }\n        this.amount = amount;\n        this.unit = unit;\n    }\n    /**\n     * Create a Duration representing an amount of milliseconds\n     *\n     * @param amount the amount of Milliseconds the `Duration` will represent.\n     * @returns a new `Duration` representing `amount` ms.\n     */\n    static millis(amount) {\n        return new Duration(amount, TimeUnit.Milliseconds);\n    }\n    /**\n     * Create a Duration representing an amount of seconds\n     *\n     * @param amount the amount of Seconds the `Duration` will represent.\n     * @returns a new `Duration` representing `amount` Seconds.\n     */\n    static seconds(amount) {\n        return new Duration(amount, TimeUnit.Seconds);\n    }\n    /**\n     * Create a Duration representing an amount of minutes\n     *\n     * @param amount the amount of Minutes the `Duration` will represent.\n     * @returns a new `Duration` representing `amount` Minutes.\n     */\n    static minutes(amount) {\n        return new Duration(amount, TimeUnit.Minutes);\n    }\n    /**\n     * Create a Duration representing an amount of hours\n     *\n     * @param amount the amount of Hours the `Duration` will represent.\n     * @returns a new `Duration` representing `amount` Hours.\n     */\n    static hours(amount) {\n        return new Duration(amount, TimeUnit.Hours);\n    }\n    /**\n     * Create a Duration representing an amount of days\n     *\n     * @param amount the amount of Days the `Duration` will represent.\n     * @returns a new `Duration` representing `amount` Days.\n     */\n    static days(amount) {\n        return new Duration(amount, TimeUnit.Days);\n    }\n    /**\n     * Parse a period formatted according to the ISO 8601 standard\n     *\n     * @see https://www.iso.org/fr/standard/70907.html\n     * @param duration an ISO-formtted duration to be parsed.\n     * @returns the parsed `Duration`.\n     */\n    static parse(duration) {\n        const matches = duration.match(/^PT(?:(\\d+)D)?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?$/);\n        if (!matches) {\n            throw new Error(`Not a valid ISO duration: ${duration}`);\n        }\n        const [, days, hours, minutes, seconds] = matches;\n        if (!days && !hours && !minutes && !seconds) {\n            throw new Error(`Not a valid ISO duration: ${duration}`);\n        }\n        return Duration.millis(_toInt(seconds) * TimeUnit.Seconds.inMillis\n            + (_toInt(minutes) * TimeUnit.Minutes.inMillis)\n            + (_toInt(hours) * TimeUnit.Hours.inMillis)\n            + (_toInt(days) * TimeUnit.Days.inMillis));\n        function _toInt(str) {\n            if (!str) {\n                return 0;\n            }\n            return Number(str);\n        }\n    }\n    /**\n     * Return the total number of milliseconds in this Duration\n     *\n     * @returns the value of this `Duration` expressed in Milliseconds.\n     */\n    toMilliseconds(opts = {}) {\n        return convert(this.amount, this.unit, TimeUnit.Milliseconds, opts);\n    }\n    /**\n     * Return the total number of seconds in this Duration\n     *\n     * @returns the value of this `Duration` expressed in Seconds.\n     */\n    toSeconds(opts = {}) {\n        return convert(this.amount, this.unit, TimeUnit.Seconds, opts);\n    }\n    /**\n     * Return the total number of minutes in this Duration\n     *\n     * @returns the value of this `Duration` expressed in Minutes.\n     */\n    toMinutes(opts = {}) {\n        return convert(this.amount, this.unit, TimeUnit.Minutes, opts);\n    }\n    /**\n     * Return the total number of hours in this Duration\n     *\n     * @returns the value of this `Duration` expressed in Hours.\n     */\n    toHours(opts = {}) {\n        return convert(this.amount, this.unit, TimeUnit.Hours, opts);\n    }\n    /**\n     * Return the total number of days in this Duration\n     *\n     * @returns the value of this `Duration` expressed in Days.\n     */\n    toDays(opts = {}) {\n        return convert(this.amount, this.unit, TimeUnit.Days, opts);\n    }\n    /**\n     * Return an ISO 8601 representation of this period\n     *\n     * @returns a string starting with 'PT' describing the period\n     * @see https://www.iso.org/fr/standard/70907.html\n     */\n    toIsoString() {\n        if (this.amount === 0) {\n            return 'PT0S';\n        }\n        switch (this.unit) {\n            case TimeUnit.Seconds: return `PT${this.fractionDuration('S', 60, Duration.minutes)}`;\n            case TimeUnit.Minutes: return `PT${this.fractionDuration('M', 60, Duration.hours)}`;\n            case TimeUnit.Hours: return `PT${this.fractionDuration('H', 24, Duration.days)}`;\n            case TimeUnit.Days: return `PT${this.amount}D`;\n            default:\n                throw new Error(`Unexpected time unit: ${this.unit}`);\n        }\n    }\n    /**\n     * Turn this duration into a human-readable string\n     */\n    toHumanString() {\n        if (this.amount === 0) {\n            return fmtUnit(0, this.unit);\n        }\n        let millis = convert(this.amount, this.unit, TimeUnit.Milliseconds, { integral: false });\n        const parts = new Array();\n        for (const unit of [TimeUnit.Days, TimeUnit.Hours, TimeUnit.Hours, TimeUnit.Minutes, TimeUnit.Seconds]) {\n            const wholeCount = Math.floor(convert(millis, TimeUnit.Milliseconds, unit, { integral: false }));\n            if (wholeCount > 0) {\n                parts.push(fmtUnit(wholeCount, unit));\n                millis -= wholeCount * unit.inMillis;\n            }\n        }\n        // Remainder in millis\n        if (millis > 0) {\n            parts.push(fmtUnit(millis, TimeUnit.Milliseconds));\n        }\n        // 2 significant parts, that's totally enough for humans\n        return parts.slice(0, 2).join(' ');\n        function fmtUnit(amount, unit) {\n            if (amount === 1) {\n                // All of the labels end in 's'\n                return `${amount} ${unit.label.substring(0, unit.label.length - 1)}`;\n            }\n            return `${amount} ${unit.label}`;\n        }\n    }\n    fractionDuration(symbol, modulus, next) {\n        if (this.amount < modulus) {\n            return `${this.amount}${symbol}`;\n        }\n        const remainder = this.amount % modulus;\n        const quotient = next((this.amount - remainder) / modulus).toIsoString().slice(2);\n        return remainder > 0\n            ? `${quotient}${remainder}${symbol}`\n            : quotient;\n    }\n}\nexports.Duration = Duration;\n_a = JSII_RTTI_SYMBOL_1;\nDuration[_a] = { fqn: \"cdk8s.Duration\", version: \"2.3.11\" };\nclass TimeUnit {\n    constructor(label, inMillis) {\n        this.label = label;\n        this.inMillis = inMillis;\n        // MAX_SAFE_INTEGER is 2^53, so by representing our duration in millis (the lowest\n        // common unit) the highest duration we can represent is\n        // 2^53 / 86*10^6 ~= 104 * 10^6 days (about 100 million days).\n    }\n    toString() {\n        return this.label;\n    }\n}\nTimeUnit.Milliseconds = new TimeUnit('millis', 1);\nTimeUnit.Seconds = new TimeUnit('seconds', 1000);\nTimeUnit.Minutes = new TimeUnit('minutes', 60000);\nTimeUnit.Hours = new TimeUnit('hours', 3600000);\nTimeUnit.Days = new TimeUnit('days', 86400000);\nfunction convert(amount, fromUnit, toUnit, { integral = true }) {\n    if (fromUnit.inMillis === toUnit.inMillis) {\n        return amount;\n    }\n    const multiplier = fromUnit.inMillis / toUnit.inMillis;\n    const value = amount * multiplier;\n    if (!Number.isInteger(value) && integral) {\n        throw new Error(`'${amount} ${fromUnit}' cannot be converted into a whole number of ${toUnit}.`);\n    }\n    return value;\n}\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Helm = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst yaml = require(\"yaml\");\nconst _child_process_1 = require(\"./_child_process\");\nconst include_1 = require(\"./include\");\nconst names_1 = require(\"./names\");\nconst MAX_HELM_BUFFER = 10 * 1024 * 1024;\n/**\n * Represents a Helm deployment.\n *\n * Use this construct to import an existing Helm chart and incorporate it into your constructs.\n */\nclass Helm extends include_1.Include {\n    constructor(scope, id, props) {\n        var _b, _c;\n        const workdir = fs.mkdtempSync(path.join(os.tmpdir(), 'cdk8s-helm-'));\n        const args = new Array();\n        args.push('template');\n        // values\n        if (props.values && Object.keys(props.values).length > 0) {\n            const valuesPath = path.join(workdir, 'overrides.yaml');\n            fs.writeFileSync(valuesPath, yaml.stringify(props.values));\n            args.push('-f', valuesPath);\n        }\n        // custom flags\n        if (props.helmFlags) {\n            args.push(...props.helmFlags);\n        }\n        // release name\n        // constraints: https://github.com/helm/helm/issues/6006\n        const releaseName = (_b = props.releaseName) !== null && _b !== void 0 ? _b : names_1.Names.toDnsLabel(scope, { maxLen: 53, extra: [id] });\n        args.push(releaseName);\n        // chart\n        args.push(props.chart);\n        const prog = (_c = props.helmExecutable) !== null && _c !== void 0 ? _c : 'helm';\n        const outputFile = renderTemplate(workdir, prog, args);\n        super(scope, id, { url: outputFile });\n        this.releaseName = releaseName;\n    }\n}\nexports.Helm = Helm;\n_a = JSII_RTTI_SYMBOL_1;\nHelm[_a] = { fqn: \"cdk8s.Helm\", version: \"2.3.11\" };\nfunction renderTemplate(workdir, prog, args) {\n    const helm = _child_process_1._child_process.spawnSync(prog, args, {\n        maxBuffer: MAX_HELM_BUFFER,\n    });\n    if (helm.error) {\n        const err = helm.error.message;\n        if (err.includes('ENOENT')) {\n            throw new Error(`unable to execute '${prog}' to render Helm chart. Is it installed on your system?`);\n        }\n        throw new Error(`error while rendering a helm chart: ${err}`);\n    }\n    if (helm.status !== 0) {\n        throw new Error(helm.stderr.toString());\n    }\n    const outputFile = path.join(workdir, 'chart.yaml');\n    const stdout = helm.stdout;\n    fs.writeFileSync(outputFile, stdout);\n    return outputFile;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVsbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9oZWxtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFFN0IsNkJBQTZCO0FBQzdCLHFEQUFrRDtBQUNsRCx1Q0FBb0M7QUFDcEMsbUNBQWdDO0FBRWhDLE1BQU0sZUFBZSxHQUFHLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBOEN6Qzs7OztHQUlHO0FBQ0gsTUFBYSxJQUFLLFNBQVEsaUJBQU87SUFNL0IsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFnQjs7UUFDeEQsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBRXRFLE1BQU0sSUFBSSxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV0QixTQUFTO1FBQ1QsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDeEQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUN4RCxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQzdCO1FBRUQsZUFBZTtRQUNmLElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQy9CO1FBRUQsZUFBZTtRQUNmLHdEQUF3RDtRQUN4RCxNQUFNLFdBQVcsU0FBRyxLQUFLLENBQUMsV0FBVyxtQ0FBSSxhQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzlGLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFdkIsUUFBUTtRQUNSLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXZCLE1BQU0sSUFBSSxTQUFHLEtBQUssQ0FBQyxjQUFjLG1DQUFJLE1BQU0sQ0FBQztRQUM1QyxNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV2RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBRXRDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQ2pDLENBQUM7O0FBdENILG9CQXVDQzs7O0FBRUQsU0FBUyxjQUFjLENBQUMsT0FBZSxFQUFFLElBQVksRUFBRSxJQUFjO0lBQ25FLE1BQU0sSUFBSSxHQUFHLCtCQUFjLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUU7UUFDaEQsU0FBUyxFQUFFLGVBQWU7S0FDM0IsQ0FBQyxDQUFDO0lBRUgsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ2QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDL0IsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLElBQUkseURBQXlELENBQUMsQ0FBQztTQUN0RztRQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLEdBQUcsRUFBRSxDQUFDLENBQUM7S0FDL0Q7SUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0tBQ3pDO0lBRUQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDcEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMzQixFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyQyxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgeWFtbCBmcm9tICd5YW1sJztcbmltcG9ydCB7IF9jaGlsZF9wcm9jZXNzIH0gZnJvbSAnLi9fY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBJbmNsdWRlIH0gZnJvbSAnLi9pbmNsdWRlJztcbmltcG9ydCB7IE5hbWVzIH0gZnJvbSAnLi9uYW1lcyc7XG5cbmNvbnN0IE1BWF9IRUxNX0JVRkZFUiA9IDEwICogMTAyNCAqIDEwMjQ7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYEhlbG1gLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEhlbG1Qcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgY2hhcnQgbmFtZSB0byB1c2UuIEl0IGNhbiBiZSBhIGNoYXJ0IGZyb20gYSBoZWxtIHJlcG9zaXRvcnkgb3IgYSBsb2NhbCBkaXJlY3RvcnkuXG4gICAqXG4gICAqIFRoaXMgbmFtZSBpcyBwYXNzZWQgdG8gYGhlbG0gdGVtcGxhdGVgIGFuZCBoYXMgYWxsIHRoZSByZWxldmFudCBzZW1hbnRpY3MuXG4gICAqXG4gICAqIEBleGFtcGxlIFwiLi9teXNxbFwiXG4gICAqIEBleGFtcGxlIFwiYml0bmFtaS9yZWRpc1wiXG4gICAqL1xuICByZWFkb25seSBjaGFydDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVsZWFzZSBuYW1lLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vaGVsbS5zaC9kb2NzL2ludHJvL3VzaW5nX2hlbG0vI3RocmVlLWJpZy1jb25jZXB0c1xuICAgKiBAZGVmYXVsdCAtIGlmIHVuc3BlY2lmaWVkLCBhIG5hbWUgd2lsbCBiZSBhbGxvY2F0ZWQgYmFzZWQgb24gdGhlIGNvbnN0cnVjdCBwYXRoXG4gICAqL1xuICByZWFkb25seSByZWxlYXNlTmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogVmFsdWVzIHRvIHBhc3MgdG8gdGhlIGNoYXJ0LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIElmIG5vIHZhbHVlcyBhcmUgc3BlY2lmaWVkLCBjaGFydCB3aWxsIHVzZSB0aGUgZGVmYXVsdHMuXG4gICAqL1xuICByZWFkb25seSB2YWx1ZXM/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xuXG4gIC8qKlxuICAgKiBUaGUgbG9jYWwgaGVsbSBleGVjdXRhYmxlIHRvIHVzZSBpbiBvcmRlciB0byBjcmVhdGUgdGhlIG1hbmlmZXN0IHRoZSBjaGFydC5cbiAgICpcbiAgICogQGRlZmF1bHQgXCJoZWxtXCJcbiAgICovXG4gIHJlYWRvbmx5IGhlbG1FeGVjdXRhYmxlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGZsYWdzIHRvIGFkZCB0byB0aGUgYGhlbG1gIGV4ZWN1dGlvbi5cbiAgICpcbiAgICogQGRlZmF1bHQgW11cbiAgICovXG4gIHJlYWRvbmx5IGhlbG1GbGFncz86IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBIZWxtIGRlcGxveW1lbnQuXG4gKlxuICogVXNlIHRoaXMgY29uc3RydWN0IHRvIGltcG9ydCBhbiBleGlzdGluZyBIZWxtIGNoYXJ0IGFuZCBpbmNvcnBvcmF0ZSBpdCBpbnRvIHlvdXIgY29uc3RydWN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEhlbG0gZXh0ZW5kcyBJbmNsdWRlIHtcbiAgLyoqXG4gICAqIFRoZSBoZWxtIHJlbGVhc2UgbmFtZS5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSByZWxlYXNlTmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBIZWxtUHJvcHMpIHtcbiAgICBjb25zdCB3b3JrZGlyID0gZnMubWtkdGVtcFN5bmMocGF0aC5qb2luKG9zLnRtcGRpcigpLCAnY2RrOHMtaGVsbS0nKSk7XG5cbiAgICBjb25zdCBhcmdzID0gbmV3IEFycmF5PHN0cmluZz4oKTtcbiAgICBhcmdzLnB1c2goJ3RlbXBsYXRlJyk7XG5cbiAgICAvLyB2YWx1ZXNcbiAgICBpZiAocHJvcHMudmFsdWVzICYmIE9iamVjdC5rZXlzKHByb3BzLnZhbHVlcykubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgdmFsdWVzUGF0aCA9IHBhdGguam9pbih3b3JrZGlyLCAnb3ZlcnJpZGVzLnlhbWwnKTtcbiAgICAgIGZzLndyaXRlRmlsZVN5bmModmFsdWVzUGF0aCwgeWFtbC5zdHJpbmdpZnkocHJvcHMudmFsdWVzKSk7XG4gICAgICBhcmdzLnB1c2goJy1mJywgdmFsdWVzUGF0aCk7XG4gICAgfVxuXG4gICAgLy8gY3VzdG9tIGZsYWdzXG4gICAgaWYgKHByb3BzLmhlbG1GbGFncykge1xuICAgICAgYXJncy5wdXNoKC4uLnByb3BzLmhlbG1GbGFncyk7XG4gICAgfVxuXG4gICAgLy8gcmVsZWFzZSBuYW1lXG4gICAgLy8gY29uc3RyYWludHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9oZWxtL2hlbG0vaXNzdWVzLzYwMDZcbiAgICBjb25zdCByZWxlYXNlTmFtZSA9IHByb3BzLnJlbGVhc2VOYW1lID8/IE5hbWVzLnRvRG5zTGFiZWwoc2NvcGUsIHsgbWF4TGVuOiA1MywgZXh0cmE6IFtpZF0gfSk7XG4gICAgYXJncy5wdXNoKHJlbGVhc2VOYW1lKTtcblxuICAgIC8vIGNoYXJ0XG4gICAgYXJncy5wdXNoKHByb3BzLmNoYXJ0KTtcblxuICAgIGNvbnN0IHByb2cgPSBwcm9wcy5oZWxtRXhlY3V0YWJsZSA/PyAnaGVsbSc7XG4gICAgY29uc3Qgb3V0cHV0RmlsZSA9IHJlbmRlclRlbXBsYXRlKHdvcmtkaXIsIHByb2csIGFyZ3MpO1xuXG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7IHVybDogb3V0cHV0RmlsZSB9KTtcblxuICAgIHRoaXMucmVsZWFzZU5hbWUgPSByZWxlYXNlTmFtZTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJUZW1wbGF0ZSh3b3JrZGlyOiBzdHJpbmcsIHByb2c6IHN0cmluZywgYXJnczogc3RyaW5nW10pIHtcbiAgY29uc3QgaGVsbSA9IF9jaGlsZF9wcm9jZXNzLnNwYXduU3luYyhwcm9nLCBhcmdzLCB7XG4gICAgbWF4QnVmZmVyOiBNQVhfSEVMTV9CVUZGRVIsXG4gIH0pO1xuXG4gIGlmIChoZWxtLmVycm9yKSB7XG4gICAgY29uc3QgZXJyID0gaGVsbS5lcnJvci5tZXNzYWdlO1xuICAgIGlmIChlcnIuaW5jbHVkZXMoJ0VOT0VOVCcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuYWJsZSB0byBleGVjdXRlICcke3Byb2d9JyB0byByZW5kZXIgSGVsbSBjaGFydC4gSXMgaXQgaW5zdGFsbGVkIG9uIHlvdXIgc3lzdGVtP2ApO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihgZXJyb3Igd2hpbGUgcmVuZGVyaW5nIGEgaGVsbSBjaGFydDogJHtlcnJ9YCk7XG4gIH1cblxuICBpZiAoaGVsbS5zdGF0dXMgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoaGVsbS5zdGRlcnIudG9TdHJpbmcoKSk7XG4gIH1cblxuICBjb25zdCBvdXRwdXRGaWxlID0gcGF0aC5qb2luKHdvcmtkaXIsICdjaGFydC55YW1sJyk7XG4gIGNvbnN0IHN0ZG91dCA9IGhlbG0uc3Rkb3V0O1xuICBmcy53cml0ZUZpbGVTeW5jKG91dHB1dEZpbGUsIHN0ZG91dCk7XG4gIHJldHVybiBvdXRwdXRGaWxlO1xufVxuIl19","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Include = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst constructs_1 = require(\"constructs\");\nconst api_object_1 = require(\"./api-object\");\nconst yaml_1 = require(\"./yaml\");\n/**\n * Reads a YAML manifest from a file or a URL and defines all resources as API\n * objects within the defined scope.\n *\n * The names (`metadata.name`) of imported resources will be preserved as-is\n * from the manifest.\n */\nclass Include extends constructs_1.Construct {\n    constructor(scope, id, props) {\n        var _b, _c, _d, _e;\n        super(scope, id);\n        const objects = yaml_1.Yaml.load(props.url);\n        let order = 0;\n        for (const obj of objects) {\n            const objname = (_c = (_b = obj.metadata) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : `object${order++}`;\n            // render an id: name[-kind][-namespace]\n            const objid = [objname, (_d = obj.kind) === null || _d === void 0 ? void 0 : _d.toLowerCase(), (_e = obj.metadata) === null || _e === void 0 ? void 0 : _e.namespace].filter(x => x).join('-');\n            new api_object_1.ApiObject(this, objid, obj);\n        }\n    }\n    /**\n     * Returns all the included API objects.\n     */\n    get apiObjects() {\n        return constructs_1.Node.of(this).children.filter(o => o instanceof api_object_1.ApiObject);\n    }\n}\nexports.Include = Include;\n_a = JSII_RTTI_SYMBOL_1;\nInclude[_a] = { fqn: \"cdk8s.Include\", version: \"2.3.11\" };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5jbHVkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmNsdWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkNBQTZDO0FBQzdDLDZDQUF5QztBQUN6QyxpQ0FBOEI7QUFXOUI7Ozs7OztHQU1HO0FBQ0gsTUFBYSxPQUFRLFNBQVEsc0JBQVM7SUFDcEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFtQjs7UUFDM0QsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLE9BQU8sR0FBRyxXQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVyQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxLQUFLLE1BQU0sR0FBRyxJQUFJLE9BQU8sRUFBRTtZQUN6QixNQUFNLE9BQU8sZUFBRyxHQUFHLENBQUMsUUFBUSwwQ0FBRSxJQUFJLG1DQUFJLFNBQVMsS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUV6RCx3Q0FBd0M7WUFDeEMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFPLFFBQUUsR0FBRyxDQUFDLElBQUksMENBQUUsV0FBVyxVQUFJLEdBQUcsQ0FBQyxRQUFRLDBDQUFFLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuRyxJQUFJLHNCQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNqQztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsVUFBVTtRQUNuQixPQUFPLGlCQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksc0JBQVMsQ0FBZ0IsQ0FBQztJQUNuRixDQUFDOztBQXJCSCwwQkFzQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QsIE5vZGUgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IEFwaU9iamVjdCB9IGZyb20gJy4vYXBpLW9iamVjdCc7XG5pbXBvcnQgeyBZYW1sIH0gZnJvbSAnLi95YW1sJztcblxuZXhwb3J0IGludGVyZmFjZSBJbmNsdWRlUHJvcHMge1xuICAvKipcbiAgICogTG9jYWwgZmlsZSBwYXRoIG9yIFVSTCB3aGljaCBpbmNsdWRlcyBhIEt1YmVybmV0ZXMgWUFNTCBtYW5pZmVzdC5cbiAgICpcbiAgICogQGV4YW1wbGUgbXltYW5pZmVzdC55YW1sXG4gICAqL1xuICByZWFkb25seSB1cmw6IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZWFkcyBhIFlBTUwgbWFuaWZlc3QgZnJvbSBhIGZpbGUgb3IgYSBVUkwgYW5kIGRlZmluZXMgYWxsIHJlc291cmNlcyBhcyBBUElcbiAqIG9iamVjdHMgd2l0aGluIHRoZSBkZWZpbmVkIHNjb3BlLlxuICpcbiAqIFRoZSBuYW1lcyAoYG1ldGFkYXRhLm5hbWVgKSBvZiBpbXBvcnRlZCByZXNvdXJjZXMgd2lsbCBiZSBwcmVzZXJ2ZWQgYXMtaXNcbiAqIGZyb20gdGhlIG1hbmlmZXN0LlxuICovXG5leHBvcnQgY2xhc3MgSW5jbHVkZSBleHRlbmRzIENvbnN0cnVjdCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBJbmNsdWRlUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgY29uc3Qgb2JqZWN0cyA9IFlhbWwubG9hZChwcm9wcy51cmwpO1xuXG4gICAgbGV0IG9yZGVyID0gMDtcbiAgICBmb3IgKGNvbnN0IG9iaiBvZiBvYmplY3RzKSB7XG4gICAgICBjb25zdCBvYmpuYW1lID0gb2JqLm1ldGFkYXRhPy5uYW1lID8/IGBvYmplY3Qke29yZGVyKyt9YDtcblxuICAgICAgLy8gcmVuZGVyIGFuIGlkOiBuYW1lWy1raW5kXVstbmFtZXNwYWNlXVxuICAgICAgY29uc3Qgb2JqaWQgPSBbb2JqbmFtZSwgb2JqLmtpbmQ/LnRvTG93ZXJDYXNlKCksIG9iai5tZXRhZGF0YT8ubmFtZXNwYWNlXS5maWx0ZXIoeCA9PiB4KS5qb2luKCctJyk7XG4gICAgICBuZXcgQXBpT2JqZWN0KHRoaXMsIG9iamlkLCBvYmopO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCB0aGUgaW5jbHVkZWQgQVBJIG9iamVjdHMuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGFwaU9iamVjdHMoKTogQXBpT2JqZWN0W10ge1xuICAgIHJldHVybiBOb2RlLm9mKHRoaXMpLmNoaWxkcmVuLmZpbHRlcihvID0+IG8gaW5zdGFuY2VvZiBBcGlPYmplY3QpIGFzIEFwaU9iamVjdFtdO1xuICB9XG59XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api-object\"), exports);\n__exportStar(require(\"./chart\"), exports);\n__exportStar(require(\"./dependency\"), exports);\n__exportStar(require(\"./testing\"), exports);\n__exportStar(require(\"./app\"), exports);\n__exportStar(require(\"./include\"), exports);\n__exportStar(require(\"./yaml\"), exports);\n__exportStar(require(\"./metadata\"), exports);\n__exportStar(require(\"./lazy\"), exports);\n__exportStar(require(\"./names\"), exports);\n__exportStar(require(\"./helm\"), exports);\n__exportStar(require(\"./json-patch\"), exports);\n__exportStar(require(\"./duration\"), exports);\n__exportStar(require(\"./size\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsK0NBQTZCO0FBQzdCLDBDQUF3QjtBQUN4QiwrQ0FBNkI7QUFDN0IsNENBQTBCO0FBQzFCLHdDQUFzQjtBQUN0Qiw0Q0FBMEI7QUFDMUIseUNBQXVCO0FBQ3ZCLDZDQUEyQjtBQUMzQix5Q0FBdUI7QUFDdkIsMENBQXdCO0FBQ3hCLHlDQUF1QjtBQUN2QiwrQ0FBNkI7QUFDN0IsNkNBQTJCO0FBQzNCLHlDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpLW9iamVjdCc7XG5leHBvcnQgKiBmcm9tICcuL2NoYXJ0JztcbmV4cG9ydCAqIGZyb20gJy4vZGVwZW5kZW5jeSc7XG5leHBvcnQgKiBmcm9tICcuL3Rlc3RpbmcnO1xuZXhwb3J0ICogZnJvbSAnLi9hcHAnO1xuZXhwb3J0ICogZnJvbSAnLi9pbmNsdWRlJztcbmV4cG9ydCAqIGZyb20gJy4veWFtbCc7XG5leHBvcnQgKiBmcm9tICcuL21ldGFkYXRhJztcbmV4cG9ydCAqIGZyb20gJy4vbGF6eSc7XG5leHBvcnQgKiBmcm9tICcuL25hbWVzJztcbmV4cG9ydCAqIGZyb20gJy4vaGVsbSc7XG5leHBvcnQgKiBmcm9tICcuL2pzb24tcGF0Y2gnO1xuZXhwb3J0ICogZnJvbSAnLi9kdXJhdGlvbic7XG5leHBvcnQgKiBmcm9tICcuL3NpemUnOyJdfQ==","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonPatch = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst fjp = require(\"fast-json-patch\");\n/**\n * Utility for applying RFC-6902 JSON-Patch to a document.\n *\n * Use the the `JsonPatch.apply(doc, ...ops)` function to apply a set of\n * operations to a JSON document and return the result.\n *\n * Operations can be created using the factory methods `JsonPatch.add()`,\n * `JsonPatch.remove()`, etc.\n *\n * @example\n *\n *const output = JsonPatch.apply(input,\n *  JsonPatch.replace('/world/hi/there', 'goodbye'),\n *  JsonPatch.add('/world/foo/', 'boom'),\n *  JsonPatch.remove('/hello'));\n *\n */\nclass JsonPatch {\n    constructor(operation) {\n        this.operation = operation;\n    }\n    /**\n     * Applies a set of JSON-Patch (RFC-6902) operations to `document` and returns the result.\n     * @param document The document to patch\n     * @param ops The operations to apply\n     * @returns The result document\n     */\n    static apply(document, ...ops) {\n        const result = fjp.applyPatch(document, ops.map(o => o._toJson()));\n        return result.newDocument;\n    }\n    /**\n     * Adds a value to an object or inserts it into an array. In the case of an\n     * array, the value is inserted before the given index. The - character can be\n     * used instead of an index to insert at the end of an array.\n     *\n     * @example JsonPatch.add('/biscuits/1', { \"name\": \"Ginger Nut\" })\n     */\n    static add(path, value) { return new JsonPatch({ op: 'add', path, value }); }\n    /**\n     * Removes a value from an object or array.\n     *\n     * @example JsonPatch.remove('/biscuits')\n     * @example JsonPatch.remove('/biscuits/0')\n     */\n    static remove(path) { return new JsonPatch({ op: 'remove', path }); }\n    /**\n     * Replaces a value. Equivalent to a “remove” followed by an “add”.\n     *\n     * @example JsonPatch.replace('/biscuits/0/name', 'Chocolate Digestive')\n     */\n    static replace(path, value) { return new JsonPatch({ op: 'replace', path, value }); }\n    /**\n     * Copies a value from one location to another within the JSON document. Both\n     * from and path are JSON Pointers.\n     *\n     * @example JsonPatch.copy('/biscuits/0', '/best_biscuit')\n     */\n    static copy(from, path) { return new JsonPatch({ op: 'copy', from, path }); }\n    /**\n     * Moves a value from one location to the other. Both from and path are JSON Pointers.\n     *\n     * @example JsonPatch.move('/biscuits', '/cookies')\n     */\n    static move(from, path) { return new JsonPatch({ op: 'move', from, path }); }\n    /**\n     * Tests that the specified value is set in the document. If the test fails,\n     * then the patch as a whole should not apply.\n     *\n     * @example JsonPatch.test('/best_biscuit/name', 'Choco Leibniz')\n     */\n    static test(path, value) { return new JsonPatch({ op: 'test', path, value }); }\n    /**\n     * Returns the JSON representation of this JSON patch operation.\n     *\n     * @internal\n     */\n    _toJson() {\n        return this.operation;\n    }\n}\nexports.JsonPatch = JsonPatch;\n_a = JSII_RTTI_SYMBOL_1;\nJsonPatch[_a] = { fqn: \"cdk8s.JsonPatch\", version: \"2.3.11\" };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1wYXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9qc29uLXBhdGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsdUNBQXVDO0FBRXZDOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBQ0gsTUFBYSxTQUFTO0lBMkRwQixZQUFxQyxTQUF3QjtRQUF4QixjQUFTLEdBQVQsU0FBUyxDQUFlO0lBQUcsQ0FBQztJQTFEakU7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQWEsRUFBRSxHQUFHLEdBQWdCO1FBQ3BELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFZLEVBQUUsS0FBVSxJQUFJLE9BQU8sSUFBSSxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVqRzs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBWSxJQUFJLE9BQU8sSUFBSSxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBGOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQVksRUFBRSxLQUFVLElBQUksT0FBTyxJQUFJLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXpHOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFZLEVBQUUsSUFBWSxJQUFJLE9BQU8sSUFBSSxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVwRzs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFZLEVBQUUsSUFBWSxJQUFJLE9BQU8sSUFBSSxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVwRzs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBWSxFQUFFLEtBQVUsSUFBSSxPQUFPLElBQUksU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFJbkc7Ozs7T0FJRztJQUNJLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7QUFwRUgsOEJBcUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZmpwIGZyb20gJ2Zhc3QtanNvbi1wYXRjaCc7XG5cbi8qKlxuICogVXRpbGl0eSBmb3IgYXBwbHlpbmcgUkZDLTY5MDIgSlNPTi1QYXRjaCB0byBhIGRvY3VtZW50LlxuICpcbiAqIFVzZSB0aGUgdGhlIGBKc29uUGF0Y2guYXBwbHkoZG9jLCAuLi5vcHMpYCBmdW5jdGlvbiB0byBhcHBseSBhIHNldCBvZlxuICogb3BlcmF0aW9ucyB0byBhIEpTT04gZG9jdW1lbnQgYW5kIHJldHVybiB0aGUgcmVzdWx0LlxuICpcbiAqIE9wZXJhdGlvbnMgY2FuIGJlIGNyZWF0ZWQgdXNpbmcgdGhlIGZhY3RvcnkgbWV0aG9kcyBgSnNvblBhdGNoLmFkZCgpYCxcbiAqIGBKc29uUGF0Y2gucmVtb3ZlKClgLCBldGMuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKmNvbnN0IG91dHB1dCA9IEpzb25QYXRjaC5hcHBseShpbnB1dCxcbiAqICBKc29uUGF0Y2gucmVwbGFjZSgnL3dvcmxkL2hpL3RoZXJlJywgJ2dvb2RieWUnKSxcbiAqICBKc29uUGF0Y2guYWRkKCcvd29ybGQvZm9vLycsICdib29tJyksXG4gKiAgSnNvblBhdGNoLnJlbW92ZSgnL2hlbGxvJykpO1xuICpcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25QYXRjaCB7XG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgc2V0IG9mIEpTT04tUGF0Y2ggKFJGQy02OTAyKSBvcGVyYXRpb25zIHRvIGBkb2N1bWVudGAgYW5kIHJldHVybnMgdGhlIHJlc3VsdC5cbiAgICogQHBhcmFtIGRvY3VtZW50IFRoZSBkb2N1bWVudCB0byBwYXRjaFxuICAgKiBAcGFyYW0gb3BzIFRoZSBvcGVyYXRpb25zIHRvIGFwcGx5XG4gICAqIEByZXR1cm5zIFRoZSByZXN1bHQgZG9jdW1lbnRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgYXBwbHkoZG9jdW1lbnQ6IGFueSwgLi4ub3BzOiBKc29uUGF0Y2hbXSk6IGFueSB7XG4gICAgY29uc3QgcmVzdWx0ID0gZmpwLmFwcGx5UGF0Y2goZG9jdW1lbnQsIG9wcy5tYXAobyA9PiBvLl90b0pzb24oKSkpO1xuICAgIHJldHVybiByZXN1bHQubmV3RG9jdW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIHZhbHVlIHRvIGFuIG9iamVjdCBvciBpbnNlcnRzIGl0IGludG8gYW4gYXJyYXkuIEluIHRoZSBjYXNlIG9mIGFuXG4gICAqIGFycmF5LCB0aGUgdmFsdWUgaXMgaW5zZXJ0ZWQgYmVmb3JlIHRoZSBnaXZlbiBpbmRleC4gVGhlIC0gY2hhcmFjdGVyIGNhbiBiZVxuICAgKiB1c2VkIGluc3RlYWQgb2YgYW4gaW5kZXggdG8gaW5zZXJ0IGF0IHRoZSBlbmQgb2YgYW4gYXJyYXkuXG4gICAqXG4gICAqIEBleGFtcGxlIEpzb25QYXRjaC5hZGQoJy9iaXNjdWl0cy8xJywgeyBcIm5hbWVcIjogXCJHaW5nZXIgTnV0XCIgfSlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgYWRkKHBhdGg6IHN0cmluZywgdmFsdWU6IGFueSkgeyByZXR1cm4gbmV3IEpzb25QYXRjaCh7IG9wOiAnYWRkJywgcGF0aCwgdmFsdWUgfSk7IH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIHZhbHVlIGZyb20gYW4gb2JqZWN0IG9yIGFycmF5LlxuICAgKlxuICAgKiBAZXhhbXBsZSBKc29uUGF0Y2gucmVtb3ZlKCcvYmlzY3VpdHMnKVxuICAgKiBAZXhhbXBsZSBKc29uUGF0Y2gucmVtb3ZlKCcvYmlzY3VpdHMvMCcpXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlbW92ZShwYXRoOiBzdHJpbmcpIHsgcmV0dXJuIG5ldyBKc29uUGF0Y2goeyBvcDogJ3JlbW92ZScsIHBhdGggfSk7IH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYSB2YWx1ZS4gRXF1aXZhbGVudCB0byBhIOKAnHJlbW92ZeKAnSBmb2xsb3dlZCBieSBhbiDigJxhZGTigJ0uXG4gICAqXG4gICAqIEBleGFtcGxlIEpzb25QYXRjaC5yZXBsYWNlKCcvYmlzY3VpdHMvMC9uYW1lJywgJ0Nob2NvbGF0ZSBEaWdlc3RpdmUnKVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZXBsYWNlKHBhdGg6IHN0cmluZywgdmFsdWU6IGFueSkgeyByZXR1cm4gbmV3IEpzb25QYXRjaCh7IG9wOiAncmVwbGFjZScsIHBhdGgsIHZhbHVlIH0pOyB9XG5cbiAgLyoqXG4gICAqIENvcGllcyBhIHZhbHVlIGZyb20gb25lIGxvY2F0aW9uIHRvIGFub3RoZXIgd2l0aGluIHRoZSBKU09OIGRvY3VtZW50LiBCb3RoXG4gICAqIGZyb20gYW5kIHBhdGggYXJlIEpTT04gUG9pbnRlcnMuXG4gICAqXG4gICAqIEBleGFtcGxlIEpzb25QYXRjaC5jb3B5KCcvYmlzY3VpdHMvMCcsICcvYmVzdF9iaXNjdWl0JylcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY29weShmcm9tOiBzdHJpbmcsIHBhdGg6IHN0cmluZykgeyByZXR1cm4gbmV3IEpzb25QYXRjaCh7IG9wOiAnY29weScsIGZyb20sIHBhdGggfSk7IH1cblxuICAvKipcbiAgICogTW92ZXMgYSB2YWx1ZSBmcm9tIG9uZSBsb2NhdGlvbiB0byB0aGUgb3RoZXIuIEJvdGggZnJvbSBhbmQgcGF0aCBhcmUgSlNPTiBQb2ludGVycy5cbiAgICpcbiAgICogQGV4YW1wbGUgSnNvblBhdGNoLm1vdmUoJy9iaXNjdWl0cycsICcvY29va2llcycpXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIG1vdmUoZnJvbTogc3RyaW5nLCBwYXRoOiBzdHJpbmcpIHsgcmV0dXJuIG5ldyBKc29uUGF0Y2goeyBvcDogJ21vdmUnLCBmcm9tLCBwYXRoIH0pOyB9XG5cbiAgLyoqXG4gICAqIFRlc3RzIHRoYXQgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBzZXQgaW4gdGhlIGRvY3VtZW50LiBJZiB0aGUgdGVzdCBmYWlscyxcbiAgICogdGhlbiB0aGUgcGF0Y2ggYXMgYSB3aG9sZSBzaG91bGQgbm90IGFwcGx5LlxuICAgKlxuICAgKiBAZXhhbXBsZSBKc29uUGF0Y2gudGVzdCgnL2Jlc3RfYmlzY3VpdC9uYW1lJywgJ0Nob2NvIExlaWJuaXonKVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyB0ZXN0KHBhdGg6IHN0cmluZywgdmFsdWU6IGFueSkgeyByZXR1cm4gbmV3IEpzb25QYXRjaCh7IG9wOiAndGVzdCcsIHBhdGgsIHZhbHVlIH0pOyB9XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG9wZXJhdGlvbjogZmpwLk9wZXJhdGlvbikge31cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGlzIEpTT04gcGF0Y2ggb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHB1YmxpYyBfdG9Kc29uKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMub3BlcmF0aW9uO1xuICB9XG59Il19","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Lazy = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nclass Lazy {\n    constructor(producer) {\n        this.producer = producer;\n    }\n    static any(producer) {\n        return new Lazy(producer);\n    }\n    produce() {\n        return this.producer.produce();\n    }\n}\nexports.Lazy = Lazy;\n_a = JSII_RTTI_SYMBOL_1;\nLazy[_a] = { fqn: \"cdk8s.Lazy\", version: \"2.3.11\" };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9sYXp5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBYSxJQUFJO0lBS2YsWUFBcUMsUUFBc0I7UUFBdEIsYUFBUSxHQUFSLFFBQVEsQ0FBYztJQUFHLENBQUM7SUFKeEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFzQjtRQUN0QyxPQUFPLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBbUIsQ0FBQztJQUM5QyxDQUFDO0lBSU0sT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQyxDQUFDOztBQVRILG9CQVVDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIExhenkge1xuICBwdWJsaWMgc3RhdGljIGFueShwcm9kdWNlcjogSUFueVByb2R1Y2VyKTogYW55IHtcbiAgICByZXR1cm4gbmV3IExhenkocHJvZHVjZXIpIGFzIHVua25vd24gYXMgYW55O1xuICB9XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHByb2R1Y2VyOiBJQW55UHJvZHVjZXIpIHt9XG5cbiAgcHVibGljIHByb2R1Y2UoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5wcm9kdWNlci5wcm9kdWNlKCk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQW55UHJvZHVjZXIge1xuICBwcm9kdWNlKCk6IGFueTtcbn1cblxuXG4iXX0=","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApiObjectMetadataDefinition = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst _resolve_1 = require(\"./_resolve\");\nconst _util_1 = require(\"./_util\");\n/**\n * Object metadata.\n */\nclass ApiObjectMetadataDefinition {\n    constructor(options = {}) {\n        var _b, _c, _d, _e;\n        this.name = options.name;\n        this.labels = (_b = options.labels) !== null && _b !== void 0 ? _b : {};\n        this.annotations = (_c = options.annotations) !== null && _c !== void 0 ? _c : {};\n        this.namespace = options.namespace;\n        this.finalizers = (_d = options.finalizers) !== null && _d !== void 0 ? _d : [];\n        this.ownerReferences = (_e = options.ownerReferences) !== null && _e !== void 0 ? _e : [];\n        this._additionalAttributes = options !== null && options !== void 0 ? options : {};\n    }\n    /**\n     * Add a label.\n     *\n     * @param key - The key.\n     * @param value - The value.\n     */\n    addLabel(key, value) {\n        this.labels[key] = value;\n    }\n    /**\n     * @returns a value of a label or undefined\n     * @param key the label\n     */\n    getLabel(key) {\n        return this.labels[key];\n    }\n    /**\n     * Add an annotation.\n     *\n     * @param key - The key.\n     * @param value - The value.\n     */\n    addAnnotation(key, value) {\n        this.annotations[key] = value;\n    }\n    /**\n     * Add one or more finalizers.\n     *\n     * @param finalizers the finalizers\n     */\n    addFinalizers(...finalizers) {\n        this.finalizers.push(...finalizers);\n    }\n    /**\n     * Add an owner.\n     *\n     * @param owner the owner\n     */\n    addOwnerReference(owner) {\n        this.ownerReferences.push(owner);\n    }\n    /**\n     * Adds an arbitrary key/value to the object metadata.\n     * @param key Metadata key\n     * @param value Metadata value\n     */\n    add(key, value) {\n        this._additionalAttributes[key] = value;\n    }\n    /**\n     * Synthesizes a k8s ObjectMeta for this metadata set.\n     */\n    toJson() {\n        const sanitize = (x) => _util_1.sanitizeValue(x, { filterEmptyArrays: true, filterEmptyObjects: true });\n        return sanitize(_resolve_1.resolve({\n            ...this._additionalAttributes,\n            name: this.name,\n            namespace: this.namespace,\n            annotations: this.annotations,\n            finalizers: this.finalizers,\n            ownerReferences: this.ownerReferences,\n            labels: this.labels,\n        }));\n    }\n}\nexports.ApiObjectMetadataDefinition = ApiObjectMetadataDefinition;\n_a = JSII_RTTI_SYMBOL_1;\nApiObjectMetadataDefinition[_a] = { fqn: \"cdk8s.ApiObjectMetadataDefinition\", version: \"2.3.11\" };\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Names = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst crypto = require(\"crypto\");\nconst constructs_1 = require(\"constructs\");\nconst MAX_LEN = 63;\nconst VALIDATE = /^[0-9a-z-]+$/;\nconst VALIDATE_LABEL_VALUE = /^(([0-9a-zA-Z][0-9a-zA-Z-_.]*)?[0-9a-zA-Z])?$/;\nconst HASH_LEN = 8;\n/**\n * Utilities for generating unique and stable names.\n */\nclass Names {\n    /* istanbul ignore next */\n    constructor() {\n        return;\n    }\n    /**\n     * Generates a unique and stable name compatible DNS_LABEL from RFC-1123 from\n     * a path.\n     *\n     * The generated name will:\n     *  - contain at most 63 characters\n     *  - contain only lowercase alphanumeric characters or ‘-’\n     *  - start with an alphanumeric character\n     *  - end with an alphanumeric character\n     *\n     * The generated name will have the form:\n     *  <comp0>-<comp1>-..-<compN>-<short-hash>\n     *\n     * Where <comp> are the path components (assuming they are is separated by\n     * \"/\").\n     *\n     * Note that if the total length is longer than 63 characters, we will trim\n     * the first components since the last components usually encode more meaning.\n     *\n     * @link https://tools.ietf.org/html/rfc1123\n     *\n     * @param scope The construct for which to render the DNS label\n     * @param options Name options\n     * @throws if any of the components do not adhere to naming constraints or\n     * length.\n     */\n    static toDnsLabel(scope, options = {}) {\n        var _b, _c, _d, _e;\n        const maxLen = (_b = options.maxLen) !== null && _b !== void 0 ? _b : MAX_LEN;\n        const delim = (_c = options.delimiter) !== null && _c !== void 0 ? _c : '-';\n        const include_hash = (_d = options.includeHash) !== null && _d !== void 0 ? _d : true;\n        if (maxLen < HASH_LEN && include_hash) {\n            throw new Error(`minimum max length for object names is ${HASH_LEN} (required for hash)`);\n        }\n        const node = constructs_1.Node.of(scope);\n        let components = node.path.split('/');\n        components.push(...(_e = options.extra) !== null && _e !== void 0 ? _e : []);\n        // special case: if we only have one component in our path and it adheres to DNS_NAME, we don't decorate it\n        if (components.length === 1 && VALIDATE.test(components[0]) && components[0].length <= maxLen) {\n            return components[0];\n        }\n        // okay, now we need to normalize all components to adhere to DNS_NAME and append the hash of the full path.\n        components = components.map(c => normalizeToDnsName(c, maxLen));\n        if (include_hash) {\n            components.push(calcHash(node, HASH_LEN));\n        }\n        return toHumanForm(components, delim, maxLen);\n    }\n    /**\n     * Generates a unique and stable name compatible label key name segment and\n     * label value from a path.\n     *\n     * The name segment is required and must be 63 characters or less, beginning\n     * and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-),\n     * underscores (_), dots (.), and alphanumerics between.\n     *\n     * Valid label values must be 63 characters or less and must be empty or\n     * begin and end with an alphanumeric character ([a-z0-9A-Z]) with dashes\n     * (-), underscores (_), dots (.), and alphanumerics between.\n     *\n     * The generated name will have the form:\n     *  <comp0><delim><comp1><delim>..<delim><compN><delim><short-hash>\n     *\n     * Where <comp> are the path components (assuming they are is separated by\n     * \"/\").\n     *\n     * Note that if the total length is longer than 63 characters, we will trim\n     * the first components since the last components usually encode more meaning.\n     *\n     * @link https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set\n     *\n     * @param scope The construct for which to render the DNS label\n     * @param options Name options\n     * @throws if any of the components do not adhere to naming constraints or\n     * length.\n     */\n    static toLabelValue(scope, options = {}) {\n        var _b, _c, _d, _e;\n        const maxLen = (_b = options.maxLen) !== null && _b !== void 0 ? _b : MAX_LEN;\n        const delim = (_c = options.delimiter) !== null && _c !== void 0 ? _c : '-';\n        const include_hash = (_d = options.includeHash) !== null && _d !== void 0 ? _d : true;\n        if (maxLen < HASH_LEN && include_hash) {\n            throw new Error(`minimum max length for label is ${HASH_LEN} (required for hash)`);\n        }\n        if (/[^0-9a-zA-Z-_.]/.test(delim)) {\n            throw new Error('delim should not contain \"[^0-9a-zA-Z-_.]\"');\n        }\n        const node = constructs_1.Node.of(scope);\n        let components = node.path.split('/');\n        components.push(...(_e = options.extra) !== null && _e !== void 0 ? _e : []);\n        // special case: if we only have one component in our path and it adheres to DNS_NAME, we don't decorate it\n        if (components.length === 1 && VALIDATE_LABEL_VALUE.test(components[0]) && components[0].length <= maxLen) {\n            return components[0];\n        }\n        // okay, now we need to normalize all components to adhere to label and append the hash of the full path.\n        components = components.map(c => normalizeToLabelValue(c, maxLen));\n        if (include_hash) {\n            components.push(calcHash(node, HASH_LEN));\n        }\n        const result = toHumanForm(components, delim, maxLen);\n        // slicing might let '-', '_', '.' be in the start of the result.\n        return result.replace(/^[^0-9a-zA-Z]+/, '');\n    }\n}\nexports.Names = Names;\n_a = JSII_RTTI_SYMBOL_1;\nNames[_a] = { fqn: \"cdk8s.Names\", version: \"2.3.11\" };\nfunction omitDuplicates(value, index, components) {\n    return value !== components[index - 1];\n}\nfunction omitDefaultChild(value, _, __) {\n    return value.toLowerCase() !== 'resource' && value.toLowerCase() !== 'default';\n}\nfunction toHumanForm(components, delim, maxLen) {\n    return components.reverse()\n        .filter(omitDuplicates)\n        .join('/')\n        .slice(0, maxLen)\n        .split('/')\n        .reverse()\n        .filter(x => x)\n        .join(delim)\n        .split(delim)\n        .filter(x => x)\n        .filter(omitDefaultChild)\n        .join(delim);\n}\nfunction normalizeToDnsName(c, maxLen) {\n    return c\n        .toLocaleLowerCase() // lower case\n        .replace(/[^0-9a-zA-Z-_.]/g, '') // remove non-allowed characters\n        .substr(0, maxLen); // trim to maxLength\n}\nfunction calcHash(node, maxLen) {\n    if (process.env.CDK8S_LEGACY_HASH) {\n        const hash = crypto.createHash('sha256');\n        hash.update(node.path);\n        return hash.digest('hex').slice(0, maxLen);\n    }\n    return node.addr.substring(0, HASH_LEN);\n}\nfunction normalizeToLabelValue(c, maxLen) {\n    return c\n        .replace(/[^0-9a-zA-Z-_.]/g, '') // remove non-allowed characters\n        .substr(0, maxLen); // trim to maxLength\n}\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SizeRoundingBehavior = exports.Size = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\n/**\n * Represents the amount of digital storage.\n *\n * The amount can be specified either as a literal value (e.g: `10`) which\n * cannot be negative.\n *\n * When the amount is passed as a token, unit conversion is not possible.\n */\nclass Size {\n    constructor(amount, unit) {\n        if (amount < 0) {\n            throw new Error(`Storage amounts cannot be negative. Received: ${amount}`);\n        }\n        this.amount = amount;\n        this.unit = unit;\n    }\n    /**\n     * Create a Storage representing an amount kibibytes.\n     * 1 KiB = 1024 bytes\n     */\n    static kibibytes(amount) {\n        return new Size(amount, StorageUnit.Kibibytes);\n    }\n    /**\n     * Create a Storage representing an amount mebibytes.\n     * 1 MiB = 1024 KiB\n     */\n    static mebibytes(amount) {\n        return new Size(amount, StorageUnit.Mebibytes);\n    }\n    /**\n     * Create a Storage representing an amount gibibytes.\n     * 1 GiB = 1024 MiB\n     */\n    static gibibytes(amount) {\n        return new Size(amount, StorageUnit.Gibibytes);\n    }\n    /**\n     * Create a Storage representing an amount tebibytes.\n     * 1 TiB = 1024 GiB\n     */\n    static tebibytes(amount) {\n        return new Size(amount, StorageUnit.Tebibytes);\n    }\n    /**\n     * Create a Storage representing an amount pebibytes.\n     * 1 PiB = 1024 TiB\n     */\n    static pebibyte(amount) {\n        return new Size(amount, StorageUnit.Pebibytes);\n    }\n    /**\n     * Return this storage as a total number of kibibytes.\n     */\n    toKibibytes(opts = {}) {\n        return convert(this.amount, this.unit, StorageUnit.Kibibytes, opts);\n    }\n    /**\n     * Return this storage as a total number of mebibytes.\n     */\n    toMebibytes(opts = {}) {\n        return convert(this.amount, this.unit, StorageUnit.Mebibytes, opts);\n    }\n    /**\n     * Return this storage as a total number of gibibytes.\n     */\n    toGibibytes(opts = {}) {\n        return convert(this.amount, this.unit, StorageUnit.Gibibytes, opts);\n    }\n    /**\n     * Return this storage as a total number of tebibytes.\n     */\n    toTebibytes(opts = {}) {\n        return convert(this.amount, this.unit, StorageUnit.Tebibytes, opts);\n    }\n    /**\n     * Return this storage as a total number of pebibytes.\n     */\n    toPebibytes(opts = {}) {\n        return convert(this.amount, this.unit, StorageUnit.Pebibytes, opts);\n    }\n}\nexports.Size = Size;\n_a = JSII_RTTI_SYMBOL_1;\nSize[_a] = { fqn: \"cdk8s.Size\", version: \"2.3.11\" };\n/**\n * Rounding behaviour when converting between units of `Size`.\n */\nvar SizeRoundingBehavior;\n(function (SizeRoundingBehavior) {\n    /** Fail the conversion if the result is not an integer. */\n    SizeRoundingBehavior[SizeRoundingBehavior[\"FAIL\"] = 0] = \"FAIL\";\n    /** If the result is not an integer, round it to the closest integer less than the result */\n    SizeRoundingBehavior[SizeRoundingBehavior[\"FLOOR\"] = 1] = \"FLOOR\";\n    /** Don't round. Return even if the result is a fraction. */\n    SizeRoundingBehavior[SizeRoundingBehavior[\"NONE\"] = 2] = \"NONE\";\n})(SizeRoundingBehavior = exports.SizeRoundingBehavior || (exports.SizeRoundingBehavior = {}));\nclass StorageUnit {\n    constructor(label, inKibiBytes) {\n        this.label = label;\n        this.inKibiBytes = inKibiBytes;\n        // MAX_SAFE_INTEGER is 2^53, so by representing storage in kibibytes,\n        // the highest storage we can represent is 8 exbibytes.\n    }\n    toString() {\n        return this.label;\n    }\n}\nStorageUnit.Kibibytes = new StorageUnit('kibibytes', 1);\nStorageUnit.Mebibytes = new StorageUnit('mebibytes', 1024);\nStorageUnit.Gibibytes = new StorageUnit('gibibytes', 1024 * 1024);\nStorageUnit.Tebibytes = new StorageUnit('tebibytes', 1024 * 1024 * 1024);\nStorageUnit.Pebibytes = new StorageUnit('pebibytes', 1024 * 1024 * 1024 * 1024);\nfunction convert(amount, fromUnit, toUnit, options = {}) {\n    var _b;\n    const rounding = (_b = options.rounding) !== null && _b !== void 0 ? _b : SizeRoundingBehavior.FAIL;\n    if (fromUnit.inKibiBytes === toUnit.inKibiBytes) {\n        return amount;\n    }\n    const multiplier = fromUnit.inKibiBytes / toUnit.inKibiBytes;\n    const value = amount * multiplier;\n    switch (rounding) {\n        case SizeRoundingBehavior.NONE:\n            return value;\n        case SizeRoundingBehavior.FLOOR:\n            return Math.floor(value);\n        default:\n        case SizeRoundingBehavior.FAIL:\n            if (!Number.isInteger(value)) {\n                throw new Error(`'${amount} ${fromUnit}' cannot be converted into a whole number of ${toUnit}.`);\n            }\n            return value;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Testing = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst app_1 = require(\"./app\");\nconst chart_1 = require(\"./chart\");\n/**\n * Testing utilities for cdk8s applications.\n */\nclass Testing {\n    /* istanbul ignore next */\n    constructor() {\n        return;\n    }\n    /**\n     * Returns an app for testing with the following properties:\n     * - Output directory is a temp dir.\n     */\n    static app(props) {\n        var _b;\n        let outdir;\n        if (props) {\n            outdir = (_b = props.outdir) !== null && _b !== void 0 ? _b : fs.mkdtempSync(path.join(os.tmpdir(), 'cdk8s.outdir.'));\n        }\n        else {\n            outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'cdk8s.outdir.'));\n        }\n        return new app_1.App({ outdir, ...props });\n    }\n    /**\n     * @returns a Chart that can be used for tests\n     */\n    static chart() {\n        return new chart_1.Chart(this.app(), 'test');\n    }\n    /**\n     * Returns the Kubernetes manifest synthesized from this chart.\n     */\n    static synth(chart) {\n        return chart.toJson();\n    }\n}\nexports.Testing = Testing;\n_a = JSII_RTTI_SYMBOL_1;\nTesting[_a] = { fqn: \"cdk8s.Testing\", version: \"2.3.11\" };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsK0JBQXNDO0FBQ3RDLG1DQUFnQztBQUVoQzs7R0FFRztBQUNILE1BQWEsT0FBTztJQTZCbEIsMEJBQTBCO0lBQzFCO1FBQ0UsT0FBTztJQUNULENBQUM7SUEvQkQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFnQjs7UUFDaEMsSUFBSSxNQUFjLENBQUM7UUFDbkIsSUFBSSxLQUFLLEVBQUU7WUFDVCxNQUFNLFNBQUcsS0FBSyxDQUFDLE1BQU0sbUNBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO1NBQ2xGO2FBQU07WUFDTCxNQUFNLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO1NBQ2xFO1FBQ0QsT0FBTyxJQUFJLFNBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLEtBQUs7UUFDakIsT0FBTyxJQUFJLGFBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFZO1FBQzlCLE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3hCLENBQUM7O0FBM0JILDBCQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBBcHAsIEFwcFByb3BzIH0gZnJvbSAnLi9hcHAnO1xuaW1wb3J0IHsgQ2hhcnQgfSBmcm9tICcuL2NoYXJ0JztcblxuLyoqXG4gKiBUZXN0aW5nIHV0aWxpdGllcyBmb3IgY2RrOHMgYXBwbGljYXRpb25zLlxuICovXG5leHBvcnQgY2xhc3MgVGVzdGluZyB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFwcCBmb3IgdGVzdGluZyB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICogLSBPdXRwdXQgZGlyZWN0b3J5IGlzIGEgdGVtcCBkaXIuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGFwcChwcm9wcz86IEFwcFByb3BzKSB7XG4gICAgbGV0IG91dGRpcjogc3RyaW5nO1xuICAgIGlmIChwcm9wcykge1xuICAgICAgb3V0ZGlyID0gcHJvcHMub3V0ZGlyID8/IGZzLm1rZHRlbXBTeW5jKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ2NkazhzLm91dGRpci4nKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dGRpciA9IGZzLm1rZHRlbXBTeW5jKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ2NkazhzLm91dGRpci4nKSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQXBwKHsgb3V0ZGlyLCAuLi5wcm9wcyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyBhIENoYXJ0IHRoYXQgY2FuIGJlIHVzZWQgZm9yIHRlc3RzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNoYXJ0KCkge1xuICAgIHJldHVybiBuZXcgQ2hhcnQodGhpcy5hcHAoKSwgJ3Rlc3QnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBLdWJlcm5ldGVzIG1hbmlmZXN0IHN5bnRoZXNpemVkIGZyb20gdGhpcyBjaGFydC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc3ludGgoY2hhcnQ6IENoYXJ0KTogYW55W10ge1xuICAgIHJldHVybiBjaGFydC50b0pzb24oKTtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=",null,"Object.defineProperty(exports, \"__esModule\", { value: true });\nvar areEquals = require('fast-deep-equal');\nvar helpers_1 = require(\"./helpers\");\nexports.JsonPatchError = helpers_1.PatchError;\nexports.deepClone = helpers_1._deepClone;\n/* We use a Javascript hash to store each\n function. Each hash entry (property) uses\n the operation identifiers specified in rfc6902.\n In this way, we can map each patch operation\n to its dedicated function in efficient way.\n */\n/* The operations applicable to an object */\nvar objOps = {\n    add: function (obj, key, document) {\n        obj[key] = this.value;\n        return { newDocument: document };\n    },\n    remove: function (obj, key, document) {\n        var removed = obj[key];\n        delete obj[key];\n        return { newDocument: document, removed: removed };\n    },\n    replace: function (obj, key, document) {\n        var removed = obj[key];\n        obj[key] = this.value;\n        return { newDocument: document, removed: removed };\n    },\n    move: function (obj, key, document) {\n        /* in case move target overwrites an existing value,\n        return the removed value, this can be taxing performance-wise,\n        and is potentially unneeded */\n        var removed = getValueByPointer(document, this.path);\n        if (removed) {\n            removed = helpers_1._deepClone(removed);\n        }\n        var originalValue = applyOperation(document, { op: \"remove\", path: this.from }).removed;\n        applyOperation(document, { op: \"add\", path: this.path, value: originalValue });\n        return { newDocument: document, removed: removed };\n    },\n    copy: function (obj, key, document) {\n        var valueToCopy = getValueByPointer(document, this.from);\n        // enforce copy by value so further operations don't affect source (see issue #177)\n        applyOperation(document, { op: \"add\", path: this.path, value: helpers_1._deepClone(valueToCopy) });\n        return { newDocument: document };\n    },\n    test: function (obj, key, document) {\n        return { newDocument: document, test: areEquals(obj[key], this.value) };\n    },\n    _get: function (obj, key, document) {\n        this.value = obj[key];\n        return { newDocument: document };\n    }\n};\n/* The operations applicable to an array. Many are the same as for the object */\nvar arrOps = {\n    add: function (arr, i, document) {\n        if (helpers_1.isInteger(i)) {\n            arr.splice(i, 0, this.value);\n        }\n        else { // array props\n            arr[i] = this.value;\n        }\n        // this may be needed when using '-' in an array\n        return { newDocument: document, index: i };\n    },\n    remove: function (arr, i, document) {\n        var removedList = arr.splice(i, 1);\n        return { newDocument: document, removed: removedList[0] };\n    },\n    replace: function (arr, i, document) {\n        var removed = arr[i];\n        arr[i] = this.value;\n        return { newDocument: document, removed: removed };\n    },\n    move: objOps.move,\n    copy: objOps.copy,\n    test: objOps.test,\n    _get: objOps._get\n};\n/**\n * Retrieves a value from a JSON document by a JSON pointer.\n * Returns the value.\n *\n * @param document The document to get the value from\n * @param pointer an escaped JSON pointer\n * @return The retrieved value\n */\nfunction getValueByPointer(document, pointer) {\n    if (pointer == '') {\n        return document;\n    }\n    var getOriginalDestination = { op: \"_get\", path: pointer };\n    applyOperation(document, getOriginalDestination);\n    return getOriginalDestination.value;\n}\nexports.getValueByPointer = getValueByPointer;\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the {newDocument, result} of the operation.\n * It modifies the `document` and `operation` objects - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return `{newDocument, result}` after the operation\n */\nfunction applyOperation(document, operation, validateOperation, mutateDocument, banPrototypeModifications, index) {\n    if (validateOperation === void 0) { validateOperation = false; }\n    if (mutateDocument === void 0) { mutateDocument = true; }\n    if (banPrototypeModifications === void 0) { banPrototypeModifications = true; }\n    if (index === void 0) { index = 0; }\n    if (validateOperation) {\n        if (typeof validateOperation == 'function') {\n            validateOperation(operation, 0, document, operation.path);\n        }\n        else {\n            validator(operation, 0);\n        }\n    }\n    /* ROOT OPERATIONS */\n    if (operation.path === \"\") {\n        var returnValue = { newDocument: document };\n        if (operation.op === 'add') {\n            returnValue.newDocument = operation.value;\n            return returnValue;\n        }\n        else if (operation.op === 'replace') {\n            returnValue.newDocument = operation.value;\n            returnValue.removed = document; //document we removed\n            return returnValue;\n        }\n        else if (operation.op === 'move' || operation.op === 'copy') { // it's a move or copy to root\n            returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field\n            if (operation.op === 'move') { // report removed item\n                returnValue.removed = document;\n            }\n            return returnValue;\n        }\n        else if (operation.op === 'test') {\n            returnValue.test = areEquals(document, operation.value);\n            if (returnValue.test === false) {\n                throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n            }\n            returnValue.newDocument = document;\n            return returnValue;\n        }\n        else if (operation.op === 'remove') { // a remove on root\n            returnValue.removed = document;\n            returnValue.newDocument = null;\n            return returnValue;\n        }\n        else if (operation.op === '_get') {\n            operation.value = document;\n            return returnValue;\n        }\n        else { /* bad operation */\n            if (validateOperation) {\n                throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);\n            }\n            else {\n                return returnValue;\n            }\n        }\n    } /* END ROOT OPERATIONS */\n    else {\n        if (!mutateDocument) {\n            document = helpers_1._deepClone(document);\n        }\n        var path = operation.path || \"\";\n        var keys = path.split('/');\n        var obj = document;\n        var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift\n        var len = keys.length;\n        var existingPathFragment = undefined;\n        var key = void 0;\n        var validateFunction = void 0;\n        if (typeof validateOperation == 'function') {\n            validateFunction = validateOperation;\n        }\n        else {\n            validateFunction = validator;\n        }\n        while (true) {\n            key = keys[t];\n            if (banPrototypeModifications && key == '__proto__') {\n                throw new TypeError('JSON-Patch: modifying `__proto__` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README');\n            }\n            if (validateOperation) {\n                if (existingPathFragment === undefined) {\n                    if (obj[key] === undefined) {\n                        existingPathFragment = keys.slice(0, t).join('/');\n                    }\n                    else if (t == len - 1) {\n                        existingPathFragment = operation.path;\n                    }\n                    if (existingPathFragment !== undefined) {\n                        validateFunction(operation, 0, document, existingPathFragment);\n                    }\n                }\n            }\n            t++;\n            if (Array.isArray(obj)) {\n                if (key === '-') {\n                    key = obj.length;\n                }\n                else {\n                    if (validateOperation && !helpers_1.isInteger(key)) {\n                        throw new exports.JsonPatchError(\"Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\", \"OPERATION_PATH_ILLEGAL_ARRAY_INDEX\", index, operation, document);\n                    } // only parse key when it's an integer for `arr.prop` to work\n                    else if (helpers_1.isInteger(key)) {\n                        key = ~~key;\n                    }\n                }\n                if (t >= len) {\n                    if (validateOperation && operation.op === \"add\" && key > obj.length) {\n                        throw new exports.JsonPatchError(\"The specified index MUST NOT be greater than the number of elements in the array\", \"OPERATION_VALUE_OUT_OF_BOUNDS\", index, operation, document);\n                    }\n                    var returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            else {\n                if (key && key.indexOf('~') != -1) {\n                    key = helpers_1.unescapePathComponent(key);\n                }\n                if (t >= len) {\n                    var returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            obj = obj[key];\n        }\n    }\n}\nexports.applyOperation = applyOperation;\n/**\n * Apply a full JSON Patch array on a JSON document.\n * Returns the {newDocument, result} of the patch.\n * It modifies the `document` object and `patch` - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.\n *\n * @param document The document to patch\n * @param patch The patch to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return An array of `{newDocument, result}` after the patch\n */\nfunction applyPatch(document, patch, validateOperation, mutateDocument, banPrototypeModifications) {\n    if (mutateDocument === void 0) { mutateDocument = true; }\n    if (banPrototypeModifications === void 0) { banPrototypeModifications = true; }\n    if (validateOperation) {\n        if (!Array.isArray(patch)) {\n            throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');\n        }\n    }\n    if (!mutateDocument) {\n        document = helpers_1._deepClone(document);\n    }\n    var results = new Array(patch.length);\n    for (var i = 0, length_1 = patch.length; i < length_1; i++) {\n        // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`\n        results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);\n        document = results[i].newDocument; // in case root was replaced\n    }\n    results.newDocument = document;\n    return results;\n}\nexports.applyPatch = applyPatch;\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the updated document.\n * Suitable as a reducer.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @return The updated document\n */\nfunction applyReducer(document, operation, index) {\n    var operationResult = applyOperation(document, operation);\n    if (operationResult.test === false) { // failed test\n        throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n    }\n    return operationResult.newDocument;\n}\nexports.applyReducer = applyReducer;\n/**\n * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.\n * @param {object} operation - operation object (patch)\n * @param {number} index - index of operation in the sequence\n * @param {object} [document] - object where the operation is supposed to be applied\n * @param {string} [existingPathFragment] - comes along with `document`\n */\nfunction validator(operation, index, document, existingPathFragment) {\n    if (typeof operation !== 'object' || operation === null || Array.isArray(operation)) {\n        throw new exports.JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, document);\n    }\n    else if (!objOps[operation.op]) {\n        throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);\n    }\n    else if (typeof operation.path !== 'string') {\n        throw new exports.JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, document);\n    }\n    else if (operation.path.indexOf('/') !== 0 && operation.path.length > 0) {\n        // paths that aren't empty string should start with \"/\"\n        throw new exports.JsonPatchError('Operation `path` property must start with \"/\"', 'OPERATION_PATH_INVALID', index, operation, document);\n    }\n    else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {\n        throw new exports.JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, document);\n    }\n    else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {\n        throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, document);\n    }\n    else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && helpers_1.hasUndefined(operation.value)) {\n        throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, document);\n    }\n    else if (document) {\n        if (operation.op == \"add\") {\n            var pathLen = operation.path.split(\"/\").length;\n            var existingPathLen = existingPathFragment.split(\"/\").length;\n            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {\n                throw new exports.JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, document);\n            }\n        }\n        else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {\n            if (operation.path !== existingPathFragment) {\n                throw new exports.JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);\n            }\n        }\n        else if (operation.op === 'move' || operation.op === 'copy') {\n            var existingValue = { op: \"_get\", path: operation.from, value: undefined };\n            var error = validate([existingValue], document);\n            if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {\n                throw new exports.JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, document);\n            }\n        }\n    }\n}\nexports.validator = validator;\n/**\n * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.\n * If error is encountered, returns a JsonPatchError object\n * @param sequence\n * @param document\n * @returns {JsonPatchError|undefined}\n */\nfunction validate(sequence, document, externalValidator) {\n    try {\n        if (!Array.isArray(sequence)) {\n            throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');\n        }\n        if (document) {\n            //clone document and sequence so that we can safely try applying operations\n            applyPatch(helpers_1._deepClone(document), helpers_1._deepClone(sequence), externalValidator || true);\n        }\n        else {\n            externalValidator = externalValidator || validator;\n            for (var i = 0; i < sequence.length; i++) {\n                externalValidator(sequence[i], i, document, undefined);\n            }\n        }\n    }\n    catch (e) {\n        if (e instanceof exports.JsonPatchError) {\n            return e;\n        }\n        else {\n            throw e;\n        }\n    }\n}\nexports.validate = validate;\n/**\n * Default export for backwards compat\n */\nexports.default = {\n    JsonPatchError: exports.JsonPatchError,\n    deepClone: exports.deepClone,\n    getValueByPointer: getValueByPointer,\n    applyOperation: applyOperation,\n    applyPatch: applyPatch,\n    applyReducer: applyReducer,\n    validator: validator,\n    validate: validate\n};\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2017 Joachim Wester\n * MIT license\n */\nvar helpers_1 = require(\"./helpers\");\nvar core_1 = require(\"./core\");\n/* export all core functions and types */\nvar core_2 = require(\"./core\");\nexports.applyOperation = core_2.applyOperation;\nexports.applyPatch = core_2.applyPatch;\nexports.applyReducer = core_2.applyReducer;\nexports.getValueByPointer = core_2.getValueByPointer;\nexports.validate = core_2.validate;\nexports.validator = core_2.validator;\n/* export some helpers */\nvar helpers_2 = require(\"./helpers\");\nexports.JsonPatchError = helpers_2.PatchError;\nexports.deepClone = helpers_2._deepClone;\nexports.escapePathComponent = helpers_2.escapePathComponent;\nexports.unescapePathComponent = helpers_2.unescapePathComponent;\nvar beforeDict = new WeakMap();\nvar Mirror = /** @class */ (function () {\n    function Mirror(obj) {\n        this.observers = new Map();\n        this.obj = obj;\n    }\n    return Mirror;\n}());\nvar ObserverInfo = /** @class */ (function () {\n    function ObserverInfo(callback, observer) {\n        this.callback = callback;\n        this.observer = observer;\n    }\n    return ObserverInfo;\n}());\nfunction getMirror(obj) {\n    return beforeDict.get(obj);\n}\nfunction getObserverFromMirror(mirror, callback) {\n    return mirror.observers.get(callback);\n}\nfunction removeObserverFromMirror(mirror, observer) {\n    mirror.observers.delete(observer.callback);\n}\n/**\n * Detach an observer from an object\n */\nfunction unobserve(root, observer) {\n    observer.unobserve();\n}\nexports.unobserve = unobserve;\n/**\n * Observes changes made to an object, which can then be retrieved using generate\n */\nfunction observe(obj, callback) {\n    var patches = [];\n    var observer;\n    var mirror = getMirror(obj);\n    if (!mirror) {\n        mirror = new Mirror(obj);\n        beforeDict.set(obj, mirror);\n    }\n    else {\n        var observerInfo = getObserverFromMirror(mirror, callback);\n        observer = observerInfo && observerInfo.observer;\n    }\n    if (observer) {\n        return observer;\n    }\n    observer = {};\n    mirror.value = helpers_1._deepClone(obj);\n    if (callback) {\n        observer.callback = callback;\n        observer.next = null;\n        var dirtyCheck = function () {\n            generate(observer);\n        };\n        var fastCheck = function () {\n            clearTimeout(observer.next);\n            observer.next = setTimeout(dirtyCheck);\n        };\n        if (typeof window !== 'undefined') { //not Node\n            window.addEventListener('mouseup', fastCheck);\n            window.addEventListener('keyup', fastCheck);\n            window.addEventListener('mousedown', fastCheck);\n            window.addEventListener('keydown', fastCheck);\n            window.addEventListener('change', fastCheck);\n        }\n    }\n    observer.patches = patches;\n    observer.object = obj;\n    observer.unobserve = function () {\n        generate(observer);\n        clearTimeout(observer.next);\n        removeObserverFromMirror(mirror, observer);\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('mouseup', fastCheck);\n            window.removeEventListener('keyup', fastCheck);\n            window.removeEventListener('mousedown', fastCheck);\n            window.removeEventListener('keydown', fastCheck);\n            window.removeEventListener('change', fastCheck);\n        }\n    };\n    mirror.observers.set(callback, new ObserverInfo(callback, observer));\n    return observer;\n}\nexports.observe = observe;\n/**\n * Generate an array of patches from an observer\n */\nfunction generate(observer, invertible) {\n    if (invertible === void 0) { invertible = false; }\n    var mirror = beforeDict.get(observer.object);\n    _generate(mirror.value, observer.object, observer.patches, \"\", invertible);\n    if (observer.patches.length) {\n        core_1.applyPatch(mirror.value, observer.patches);\n    }\n    var temp = observer.patches;\n    if (temp.length > 0) {\n        observer.patches = [];\n        if (observer.callback) {\n            observer.callback(temp);\n        }\n    }\n    return temp;\n}\nexports.generate = generate;\n// Dirty check if obj is different from mirror, generate patches and update mirror\nfunction _generate(mirror, obj, patches, path, invertible) {\n    if (obj === mirror) {\n        return;\n    }\n    if (typeof obj.toJSON === \"function\") {\n        obj = obj.toJSON();\n    }\n    var newKeys = helpers_1._objectKeys(obj);\n    var oldKeys = helpers_1._objectKeys(mirror);\n    var changed = false;\n    var deleted = false;\n    //if ever \"move\" operation is implemented here, make sure this test runs OK: \"should not generate the same patch twice (move)\"\n    for (var t = oldKeys.length - 1; t >= 0; t--) {\n        var key = oldKeys[t];\n        var oldVal = mirror[key];\n        if (helpers_1.hasOwnProperty(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {\n            var newVal = obj[key];\n            if (typeof oldVal == \"object\" && oldVal != null && typeof newVal == \"object\" && newVal != null) {\n                _generate(oldVal, newVal, patches, path + \"/\" + helpers_1.escapePathComponent(key), invertible);\n            }\n            else {\n                if (oldVal !== newVal) {\n                    changed = true;\n                    if (invertible) {\n                        patches.push({ op: \"test\", path: path + \"/\" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(oldVal) });\n                    }\n                    patches.push({ op: \"replace\", path: path + \"/\" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(newVal) });\n                }\n            }\n        }\n        else if (Array.isArray(mirror) === Array.isArray(obj)) {\n            if (invertible) {\n                patches.push({ op: \"test\", path: path + \"/\" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(oldVal) });\n            }\n            patches.push({ op: \"remove\", path: path + \"/\" + helpers_1.escapePathComponent(key) });\n            deleted = true; // property has been deleted\n        }\n        else {\n            if (invertible) {\n                patches.push({ op: \"test\", path: path, value: mirror });\n            }\n            patches.push({ op: \"replace\", path: path, value: obj });\n            changed = true;\n        }\n    }\n    if (!deleted && newKeys.length == oldKeys.length) {\n        return;\n    }\n    for (var t = 0; t < newKeys.length; t++) {\n        var key = newKeys[t];\n        if (!helpers_1.hasOwnProperty(mirror, key) && obj[key] !== undefined) {\n            patches.push({ op: \"add\", path: path + \"/\" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(obj[key]) });\n        }\n    }\n}\n/**\n * Create an array of patches from the differences in two objects\n */\nfunction compare(tree1, tree2, invertible) {\n    if (invertible === void 0) { invertible = false; }\n    var patches = [];\n    _generate(tree1, tree2, patches, '', invertible);\n    return patches;\n}\nexports.compare = compare;\n/**\n * Default export for backwards compat\n */\n// import just to re-export as default\nvar core = require(\"./core\");\nvar helpers_3 = require(\"./helpers\");\nexports.default = __assign({}, core, { \n    // duplex\n    unobserve: unobserve,\n    observe: observe,\n    generate: generate,\n    compare: compare,\n    // helpers\n    JsonPatchError: helpers_3.PatchError, deepClone: helpers_1._deepClone, escapePathComponent: helpers_1.escapePathComponent,\n    unescapePathComponent: helpers_3.unescapePathComponent });\n","/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2017 Joachim Wester\n * MIT license\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(obj, key) {\n    return _hasOwnProperty.call(obj, key);\n}\nexports.hasOwnProperty = hasOwnProperty;\nfunction _objectKeys(obj) {\n    if (Array.isArray(obj)) {\n        var keys = new Array(obj.length);\n        for (var k = 0; k < keys.length; k++) {\n            keys[k] = \"\" + k;\n        }\n        return keys;\n    }\n    if (Object.keys) {\n        return Object.keys(obj);\n    }\n    var keys = [];\n    for (var i in obj) {\n        if (hasOwnProperty(obj, i)) {\n            keys.push(i);\n        }\n    }\n    return keys;\n}\nexports._objectKeys = _objectKeys;\n;\n/**\n* Deeply clone the object.\n* https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)\n* @param  {any} obj value to clone\n* @return {any} cloned obj\n*/\nfunction _deepClone(obj) {\n    switch (typeof obj) {\n        case \"object\":\n            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5\n        case \"undefined\":\n            return null; //this is how JSON.stringify behaves for array items\n        default:\n            return obj; //no need to clone primitives\n    }\n}\nexports._deepClone = _deepClone;\n//3x faster than cached /^\\d+$/.test(str)\nfunction isInteger(str) {\n    var i = 0;\n    var len = str.length;\n    var charCode;\n    while (i < len) {\n        charCode = str.charCodeAt(i);\n        if (charCode >= 48 && charCode <= 57) {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nexports.isInteger = isInteger;\n/**\n* Escapes a json pointer path\n* @param path The raw pointer\n* @return the Escaped path\n*/\nfunction escapePathComponent(path) {\n    if (path.indexOf('/') === -1 && path.indexOf('~') === -1)\n        return path;\n    return path.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\nexports.escapePathComponent = escapePathComponent;\n/**\n * Unescapes a json pointer path\n * @param path The escaped pointer\n * @return The unescaped path\n */\nfunction unescapePathComponent(path) {\n    return path.replace(/~1/g, '/').replace(/~0/g, '~');\n}\nexports.unescapePathComponent = unescapePathComponent;\nfunction _getPathRecursive(root, obj) {\n    var found;\n    for (var key in root) {\n        if (hasOwnProperty(root, key)) {\n            if (root[key] === obj) {\n                return escapePathComponent(key) + '/';\n            }\n            else if (typeof root[key] === 'object') {\n                found = _getPathRecursive(root[key], obj);\n                if (found != '') {\n                    return escapePathComponent(key) + '/' + found;\n                }\n            }\n        }\n    }\n    return '';\n}\nexports._getPathRecursive = _getPathRecursive;\nfunction getPath(root, obj) {\n    if (root === obj) {\n        return '/';\n    }\n    var path = _getPathRecursive(root, obj);\n    if (path === '') {\n        throw new Error(\"Object not found in root\");\n    }\n    return '/' + path;\n}\nexports.getPath = getPath;\n/**\n* Recursively checks whether an object has any undefined values inside.\n*/\nfunction hasUndefined(obj) {\n    if (obj === undefined) {\n        return true;\n    }\n    if (obj) {\n        if (Array.isArray(obj)) {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                if (hasUndefined(obj[i])) {\n                    return true;\n                }\n            }\n        }\n        else if (typeof obj === \"object\") {\n            var objKeys = _objectKeys(obj);\n            var objKeysLength = objKeys.length;\n            for (var i = 0; i < objKeysLength; i++) {\n                if (hasUndefined(obj[objKeys[i]])) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nexports.hasUndefined = hasUndefined;\nfunction patchErrorMessageFormatter(message, args) {\n    var messageParts = [message];\n    for (var key in args) {\n        var value = typeof args[key] === 'object' ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print\n        if (typeof value !== 'undefined') {\n            messageParts.push(key + \": \" + value);\n        }\n    }\n    return messageParts.join('\\n');\n}\nvar PatchError = /** @class */ (function (_super) {\n    __extends(PatchError, _super);\n    function PatchError(message, name, index, operation, tree) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, patchErrorMessageFormatter(message, { name: name, index: index, operation: operation, tree: tree })) || this;\n        _this.name = name;\n        _this.index = index;\n        _this.operation = operation;\n        _this.tree = tree;\n        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359\n        _this.message = patchErrorMessageFormatter(message, { name: name, index: index, operation: operation, tree: tree });\n        return _this;\n    }\n    return PatchError;\n}(Error));\nexports.PatchError = PatchError;\n","'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a)\n      , arrB = isArray(b)\n      , i\n      , length\n      , key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = length; i-- !== 0;)\n      if (!hasProp.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  return a!==a && b!==b;\n};\n","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConstructOrder = exports.Construct = exports.Node = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\nconst dependency_1 = require(\"./dependency\");\nconst stack_trace_1 = require(\"./private/stack-trace\");\nconst uniqueid_1 = require(\"./private/uniqueid\");\nconst CONSTRUCT_SYM = Symbol.for('constructs.Construct');\n/**\n * Represents the construct node in the scope tree.\n */\nclass Node {\n    constructor(host, scope, id) {\n        this.host = host;\n        this._locked = false; // if this is \"true\", addChild will fail\n        this._children = {};\n        this._context = {};\n        this._metadata = new Array();\n        this._dependencies = new Set();\n        this._validations = new Array();\n        id = id !== null && id !== void 0 ? id : ''; // if undefined, convert to empty string\n        this.id = sanitizeId(id);\n        this.scope = scope;\n        if (scope && !this.id) {\n            throw new Error('Only root constructs may have an empty ID');\n        }\n        // add to parent scope\n        scope === null || scope === void 0 ? void 0 : scope.node.addChild(host, this.id);\n    }\n    /**\n     * Returns the node associated with a construct.\n     * @param construct the construct\n     *\n     * @deprecated use `construct.node` instead\n     */\n    static of(construct) {\n        return construct.node;\n    }\n    /**\n     * The full, absolute path of this construct in the tree.\n     *\n     * Components are separated by '/'.\n     */\n    get path() {\n        const components = this.scopes.filter(c => c.node.id).map(c => c.node.id);\n        return components.join(Node.PATH_SEP);\n    }\n    /**\n     * Returns an opaque tree-unique address for this construct.\n     *\n     * Addresses are 42 characters hexadecimal strings. They begin with \"c8\"\n     * followed by 40 lowercase hexadecimal characters (0-9a-f).\n     *\n     * Addresses are calculated using a SHA-1 of the components of the construct\n     * path.\n     *\n     * To enable refactorings of construct trees, constructs with the ID `Default`\n     * will be excluded from the calculation. In those cases constructs in the\n     * same tree may have the same addreess.\n     *\n     * @example c83a2846e506bcc5f10682b564084bca2d275709ee\n     */\n    get addr() {\n        if (!this._addr) {\n            this._addr = uniqueid_1.addressOf(this.scopes.map(c => Node.of(c).id));\n        }\n        return this._addr;\n    }\n    /**\n     * Return a direct child by id, or undefined\n     *\n     * @param id Identifier of direct child\n     * @returns the child if found, or undefined\n     */\n    tryFindChild(id) {\n        return this._children[sanitizeId(id)];\n    }\n    /**\n     * Return a direct child by id\n     *\n     * Throws an error if the child is not found.\n     *\n     * @param id Identifier of direct child\n     * @returns Child with the given id.\n     */\n    findChild(id) {\n        const ret = this.tryFindChild(id);\n        if (!ret) {\n            throw new Error(`No child with id: '${id}'`);\n        }\n        return ret;\n    }\n    /**\n     * Returns the child construct that has the id `Default` or `Resource\"`.\n     * This is usually the construct that provides the bulk of the underlying functionality.\n     * Useful for modifications of the underlying construct that are not available at the higher levels.\n     *\n     * @throws if there is more than one child\n     * @returns a construct or undefined if there is no default child\n     */\n    get defaultChild() {\n        if (this._defaultChild !== undefined) {\n            return this._defaultChild;\n        }\n        const resourceChild = this.tryFindChild('Resource');\n        const defaultChild = this.tryFindChild('Default');\n        if (resourceChild && defaultChild) {\n            throw new Error(`Cannot determine default child for ${this.path}. There is both a child with id \"Resource\" and id \"Default\"`);\n        }\n        return defaultChild || resourceChild;\n    }\n    /**\n     * Override the defaultChild property.\n     *\n     * This should only be used in the cases where the correct\n     * default child is not named 'Resource' or 'Default' as it\n     * should be.\n     *\n     * If you set this to undefined, the default behavior of finding\n     * the child named 'Resource' or 'Default' will be used.\n     */\n    set defaultChild(value) {\n        this._defaultChild = value;\n    }\n    /**\n     * All direct children of this construct.\n     */\n    get children() {\n        return Object.values(this._children);\n    }\n    /**\n     * Return this construct and all of its children in the given order\n     */\n    findAll(order = ConstructOrder.PREORDER) {\n        const ret = new Array();\n        visit(this.host);\n        return ret;\n        function visit(c) {\n            if (order === ConstructOrder.PREORDER) {\n                ret.push(c);\n            }\n            for (const child of c.node.children) {\n                visit(child);\n            }\n            if (order === ConstructOrder.POSTORDER) {\n                ret.push(c);\n            }\n        }\n    }\n    /**\n     * This can be used to set contextual values.\n     * Context must be set before any children are added, since children may consult context info during construction.\n     * If the key already exists, it will be overridden.\n     * @param key The context key\n     * @param value The context value\n     */\n    setContext(key, value) {\n        if (this.children.length > 0) {\n            const names = this.children.map(c => c.node.id);\n            throw new Error('Cannot set context after children have been added: ' + names.join(','));\n        }\n        this._context[key] = value;\n    }\n    /**\n     * Retrieves a value from tree context.\n     *\n     * Context is usually initialized at the root, but can be overridden at any point in the tree.\n     *\n     * @param key The context key\n     * @returns The context value or `undefined` if there is no context value for thie key.\n     */\n    tryGetContext(key) {\n        const value = this._context[key];\n        if (value !== undefined) {\n            return value;\n        }\n        return this.scope && this.scope.node.tryGetContext(key);\n    }\n    /**\n     * An immutable array of metadata objects associated with this construct.\n     * This can be used, for example, to implement support for deprecation notices, source mapping, etc.\n     */\n    get metadata() {\n        return [...this._metadata];\n    }\n    /**\n     * Adds a metadata entry to this construct.\n     * Entries are arbitrary values and will also include a stack trace to allow tracing back to\n     * the code location for when the entry was added. It can be used, for example, to include source\n     * mapping in CloudFormation templates to improve diagnostics.\n     *\n     * @param type a string denoting the type of metadata\n     * @param data the value of the metadata (can be a Token). If null/undefined, metadata will not be added.\n     * @param options options\n     */\n    addMetadata(type, data, options = {}) {\n        var _c, _d;\n        if (data == null) {\n            return;\n        }\n        const shouldTrace = (_c = options.stackTrace) !== null && _c !== void 0 ? _c : false;\n        const trace = shouldTrace ? stack_trace_1.captureStackTrace((_d = options.traceFromFunction) !== null && _d !== void 0 ? _d : this.addMetadata) : undefined;\n        this._metadata.push({ type, data, trace });\n    }\n    /**\n     * All parent scopes of this construct.\n     *\n     * @returns a list of parent scopes. The last element in the list will always\n     * be the current construct and the first element will be the root of the\n     * tree.\n     */\n    get scopes() {\n        const ret = new Array();\n        let curr = this.host;\n        while (curr) {\n            ret.unshift(curr);\n            curr = curr.node.scope;\n        }\n        return ret;\n    }\n    /**\n     * Returns the root of the construct tree.\n     * @returns The root of the construct tree.\n     */\n    get root() {\n        return this.scopes[0];\n    }\n    /**\n     * Returns true if this construct or the scopes in which it is defined are\n     * locked.\n     */\n    get locked() {\n        if (this._locked) {\n            return true;\n        }\n        if (this.scope && this.scope.node.locked) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Add an ordering dependency on another construct.\n     *\n     * An `IDependable`\n     */\n    addDependency(...deps) {\n        for (const d of deps) {\n            this._dependencies.add(d);\n        }\n    }\n    /**\n     * Return all dependencies registered on this node (non-recursive).\n     */\n    get dependencies() {\n        const result = new Array();\n        for (const dep of this._dependencies) {\n            for (const root of dependency_1.Dependable.of(dep).dependencyRoots) {\n                result.push(root);\n            }\n        }\n        return result;\n    }\n    /**\n     * Remove the child with the given name, if present.\n     *\n     * @returns Whether a child with the given name was deleted.\n     * @experimental\n     */\n    tryRemoveChild(childName) {\n        if (!(childName in this._children)) {\n            return false;\n        }\n        delete this._children[childName];\n        return true;\n    }\n    /**\n     * Adds a validation to this construct.\n     *\n     * When `node.validate()` is called, the `validate()` method will be called on\n     * all validations and all errors will be returned.\n     *\n     * @param validation The validation object\n     */\n    addValidation(validation) {\n        this._validations.push(validation);\n    }\n    /**\n     * Validates this construct.\n     *\n     * Invokes the `validate()` method on all validations added through\n     * `addValidation()`.\n     *\n     * @returns an array of validation error messages associated with this\n     * construct.\n     */\n    validate() {\n        const deprecated = ['validate', 'onValidate', 'synthesize', 'onSynthesize', 'prepare', 'onPrepare'];\n        for (const method of deprecated) {\n            if (typeof (this.host[method]) === 'function') {\n                throw new Error(`the construct \"${this.path}\" has a \"${method}()\" method which is no longer supported. Use \"construct.node.addValidation()\" to add validations to a construct`);\n            }\n        }\n        const errors = new Array();\n        for (const v of this._validations) {\n            errors.push(...v.validate());\n        }\n        return errors;\n    }\n    /**\n     * Locks this construct from allowing more children to be added. After this\n     * call, no more children can be added to this construct or to any children.\n     */\n    lock() {\n        this._locked = true;\n    }\n    /**\n     * Adds a child construct to this node.\n     *\n     * @param child The child construct\n     * @param childName The type name of the child construct.\n     * @returns The resolved path part name of the child\n     */\n    addChild(child, childName) {\n        var _c;\n        if (this.locked) {\n            // special error if root is locked\n            if (!this.path) {\n                throw new Error('Cannot add children during synthesis');\n            }\n            throw new Error(`Cannot add children to \"${this.path}\" during synthesis`);\n        }\n        if (childName in this._children) {\n            const name = (_c = this.id) !== null && _c !== void 0 ? _c : '';\n            const typeName = this.host.constructor.name;\n            throw new Error(`There is already a Construct with name '${childName}' in ${typeName}${name.length > 0 ? ' [' + name + ']' : ''}`);\n        }\n        if (!childName && this.id) {\n            throw new Error(`cannot add a nameless construct to the named scope: ${this.path}`);\n        }\n        this._children[childName] = child;\n        if (Object.keys(this._children).length > 1 && Object.keys(this._children).filter(x => !x).length > 0) {\n            throw new Error('only a single construct is allowed in a scope if it has an empty name');\n        }\n    }\n}\nexports.Node = Node;\n_a = JSII_RTTI_SYMBOL_1;\nNode[_a] = { fqn: \"constructs.Node\", version: \"10.1.23\" };\n/**\n * Separator used to delimit construct path components.\n */\nNode.PATH_SEP = '/';\n/**\n * Represents the building block of the construct graph.\n *\n * All constructs besides the root construct must be created within the scope of\n * another construct.\n */\nclass Construct {\n    /**\n     * Creates a new construct node.\n     *\n     * @param scope The scope in which to define this construct\n     * @param id The scoped construct ID. Must be unique amongst siblings. If\n     * the ID includes a path separator (`/`), then it will be replaced by double\n     * dash `--`.\n     * @param options Options\n     */\n    constructor(scope, id) {\n        this.node = new Node(this, scope, id);\n        // implement IDependable privately\n        dependency_1.Dependable.implement(this, {\n            dependencyRoots: [this],\n        });\n    }\n    /**\n     * Checks if `x` is a construct.\n     *\n     * Use this method instead of `instanceof` to properly detect `Construct`\n     * instances, even when the construct library is symlinked.\n     *\n     * Explanation: in JavaScript, multiple copies of the `constructs` library on\n     * disk are seen as independent, completely different libraries. As a\n     * consequence, the class `Construct` in each copy of the `constructs` library\n     * is seen as a different class, and an instance of one class will not test as\n     * `instanceof` the other class. `npm install` will not create installations\n     * like this, but users may manually symlink construct libraries together or\n     * use a monorepo tool: in those cases, multiple copies of the `constructs`\n     * library can be accidentally installed, and `instanceof` will behave\n     * unpredictably. It is safest to avoid using `instanceof`, and using\n     * this type-testing method instead.\n     *\n     * @returns true if `x` is an object created from a class which extends `Construct`.\n     * @param x Any object\n     */\n    static isConstruct(x) {\n        return x && typeof x === 'object' && x[CONSTRUCT_SYM];\n    }\n    /**\n     * Returns a string representation of this construct.\n     */\n    toString() {\n        return this.node.path || '<root>';\n    }\n}\nexports.Construct = Construct;\n_b = JSII_RTTI_SYMBOL_1;\nConstruct[_b] = { fqn: \"constructs.Construct\", version: \"10.1.23\" };\n/**\n * In what order to return constructs\n */\nvar ConstructOrder;\n(function (ConstructOrder) {\n    /**\n     * Depth-first, pre-order\n     */\n    ConstructOrder[ConstructOrder[\"PREORDER\"] = 0] = \"PREORDER\";\n    /**\n     * Depth-first, post-order (leaf nodes first)\n     */\n    ConstructOrder[ConstructOrder[\"POSTORDER\"] = 1] = \"POSTORDER\";\n})(ConstructOrder = exports.ConstructOrder || (exports.ConstructOrder = {}));\nconst PATH_SEP_REGEX = new RegExp(`${Node.PATH_SEP}`, 'g');\n/**\n * Return a sanitized version of an arbitrary string, so it can be used as an ID\n */\nfunction sanitizeId(id) {\n    // Escape path seps as double dashes\n    return id.replace(PATH_SEP_REGEX, '--');\n}\n// Mark all instances of 'Construct'\nObject.defineProperty(Construct.prototype, CONSTRUCT_SYM, {\n    value: true,\n    enumerable: false,\n    writable: false,\n});\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Dependable = exports.DependencyGroup = void 0;\nconst JSII_RTTI_SYMBOL_1 = Symbol.for(\"jsii.rtti\");\n/**\n * A set of constructs to be used as a dependable\n *\n * This class can be used when a set of constructs which are disjoint in the\n * construct tree needs to be combined to be used as a single dependable.\n *\n * @experimental\n */\nclass DependencyGroup {\n    constructor(...deps) {\n        this._deps = new Array();\n        const self = this;\n        Dependable.implement(this, {\n            get dependencyRoots() {\n                const result = new Array();\n                for (const d of self._deps) {\n                    result.push(...Dependable.of(d).dependencyRoots);\n                }\n                return result;\n            },\n        });\n        this.add(...deps);\n    }\n    /**\n     * Add a construct to the dependency roots\n     */\n    add(...scopes) {\n        this._deps.push(...scopes);\n    }\n}\nexports.DependencyGroup = DependencyGroup;\n_a = JSII_RTTI_SYMBOL_1;\nDependencyGroup[_a] = { fqn: \"constructs.DependencyGroup\", version: \"10.1.23\" };\nconst DEPENDABLE_SYMBOL = Symbol.for('@aws-cdk/core.DependableTrait');\n/**\n * Trait for IDependable\n *\n * Traits are interfaces that are privately implemented by objects. Instead of\n * showing up in the public interface of a class, they need to be queried\n * explicitly. This is used to implement certain framework features that are\n * not intended to be used by Construct consumers, and so should be hidden\n * from accidental use.\n *\n * @example\n *\n * // Usage\n * const roots = DependableTrait.get(construct).dependencyRoots;\n *\n * // Definition\n * DependableTrait.implement(construct, {\n *   get dependencyRoots() { return []; }\n * });\n *\n * @experimental\n */\nclass Dependable {\n    /**\n     * Turn any object into an IDependable.\n     */\n    static implement(instance, trait) {\n        // I would also like to reference classes (to cut down on the list of objects\n        // we need to manage), but we can't do that either since jsii doesn't have the\n        // concept of a class reference.\n        instance[DEPENDABLE_SYMBOL] = trait;\n    }\n    /**\n     * Return the matching Dependable for the given class instance.\n     */\n    static of(instance) {\n        const ret = instance[DEPENDABLE_SYMBOL];\n        if (!ret) {\n            throw new Error(`${instance} does not implement IDependable. Use \"Dependable.implement()\" to implement`);\n        }\n        return ret;\n    }\n    /**\n     * Return the matching Dependable for the given class instance.\n     * @deprecated use `of`\n     */\n    static get(instance) {\n        return this.of(instance);\n    }\n}\nexports.Dependable = Dependable;\n_b = JSII_RTTI_SYMBOL_1;\nDependable[_b] = { fqn: \"constructs.Dependable\", version: \"10.1.23\" };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwZW5kZW5jeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kZXBlbmRlbmN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBaUJBOzs7Ozs7O0dBT0c7QUFDSCxNQUFhLGVBQWU7SUFHMUIsWUFBWSxHQUFHLElBQW1CO1FBRmpCLFVBQUssR0FBRyxJQUFJLEtBQUssRUFBZSxDQUFDO1FBR2hELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUVsQixVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRTtZQUN6QixJQUFJLGVBQWU7Z0JBQ2pCLE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxFQUFjLENBQUM7Z0JBQ3ZDLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtvQkFDMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUM7aUJBQ2xEO2dCQUNELE9BQU8sTUFBTSxDQUFDO1lBQ2hCLENBQUM7U0FDRixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksR0FBRyxDQUFDLEdBQUcsTUFBcUI7UUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDOztBQXhCSCwwQ0F5QkM7OztBQUVELE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0FBRXRFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUNILE1BQXNCLFVBQVU7SUFDOUI7O09BRUc7SUFDSSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQXFCLEVBQUUsS0FBaUI7UUFDOUQsNkVBQTZFO1FBQzdFLDhFQUE4RTtRQUM5RSxnQ0FBZ0M7UUFDL0IsUUFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUMvQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQXFCO1FBQ3BDLE1BQU0sR0FBRyxHQUFJLFFBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLFFBQVEsNEVBQTRFLENBQUMsQ0FBQztTQUMxRztRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBcUI7UUFDckMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNCLENBQUM7O0FBNUJILGdDQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb25zdHJ1Y3QgfSBmcm9tICcuL2NvbnN0cnVjdCc7XG5cbi8qKlxuICogVHJhaXQgbWFya2VyIGZvciBjbGFzc2VzIHRoYXQgY2FuIGJlIGRlcGVuZGVkIHVwb25cbiAqXG4gKiBUaGUgcHJlc2VuY2Ugb2YgdGhpcyBpbnRlcmZhY2UgaW5kaWNhdGVzIHRoYXQgYW4gb2JqZWN0IGhhc1xuICogYW4gYElEZXBlbmRhYmxlVHJhaXRgIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIFRoaXMgaW50ZXJmYWNlIGNhbiBiZSB1c2VkIHRvIHRha2UgYW4gKG9yZGVyaW5nKSBkZXBlbmRlbmN5IG9uIGEgc2V0IG9mXG4gKiBjb25zdHJ1Y3RzLiBBbiBvcmRlcmluZyBkZXBlbmRlbmN5IGltcGxpZXMgdGhhdCB0aGUgcmVzb3VyY2VzIHJlcHJlc2VudGVkIGJ5XG4gKiB0aG9zZSBjb25zdHJ1Y3RzIGFyZSBkZXBsb3llZCBiZWZvcmUgdGhlIHJlc291cmNlcyBkZXBlbmRpbmcgT04gdGhlbSBhcmVcbiAqIGRlcGxveWVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElEZXBlbmRhYmxlIHtcbiAgLy8gRW1wdHksIHRoaXMgaW50ZXJmYWNlIGlzIGEgdHJhaXQgbWFya2VyXG59XG5cbi8qKlxuICogQSBzZXQgb2YgY29uc3RydWN0cyB0byBiZSB1c2VkIGFzIGEgZGVwZW5kYWJsZVxuICpcbiAqIFRoaXMgY2xhc3MgY2FuIGJlIHVzZWQgd2hlbiBhIHNldCBvZiBjb25zdHJ1Y3RzIHdoaWNoIGFyZSBkaXNqb2ludCBpbiB0aGVcbiAqIGNvbnN0cnVjdCB0cmVlIG5lZWRzIHRvIGJlIGNvbWJpbmVkIHRvIGJlIHVzZWQgYXMgYSBzaW5nbGUgZGVwZW5kYWJsZS5cbiAqXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cbmV4cG9ydCBjbGFzcyBEZXBlbmRlbmN5R3JvdXAgaW1wbGVtZW50cyBJRGVwZW5kYWJsZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX2RlcHMgPSBuZXcgQXJyYXk8SURlcGVuZGFibGU+KCk7XG5cbiAgY29uc3RydWN0b3IoLi4uZGVwczogSURlcGVuZGFibGVbXSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgRGVwZW5kYWJsZS5pbXBsZW1lbnQodGhpcywge1xuICAgICAgZ2V0IGRlcGVuZGVuY3lSb290cygpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PElDb25zdHJ1Y3Q+KCk7XG4gICAgICAgIGZvciAoY29uc3QgZCBvZiBzZWxmLl9kZXBzKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goLi4uRGVwZW5kYWJsZS5vZihkKS5kZXBlbmRlbmN5Um9vdHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGQoLi4uZGVwcyk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgY29uc3RydWN0IHRvIHRoZSBkZXBlbmRlbmN5IHJvb3RzXG4gICAqL1xuICBwdWJsaWMgYWRkKC4uLnNjb3BlczogSURlcGVuZGFibGVbXSkge1xuICAgIHRoaXMuX2RlcHMucHVzaCguLi5zY29wZXMpO1xuICB9XG59XG5cbmNvbnN0IERFUEVOREFCTEVfU1lNQk9MID0gU3ltYm9sLmZvcignQGF3cy1jZGsvY29yZS5EZXBlbmRhYmxlVHJhaXQnKTtcblxuLyoqXG4gKiBUcmFpdCBmb3IgSURlcGVuZGFibGVcbiAqXG4gKiBUcmFpdHMgYXJlIGludGVyZmFjZXMgdGhhdCBhcmUgcHJpdmF0ZWx5IGltcGxlbWVudGVkIGJ5IG9iamVjdHMuIEluc3RlYWQgb2ZcbiAqIHNob3dpbmcgdXAgaW4gdGhlIHB1YmxpYyBpbnRlcmZhY2Ugb2YgYSBjbGFzcywgdGhleSBuZWVkIHRvIGJlIHF1ZXJpZWRcbiAqIGV4cGxpY2l0bHkuIFRoaXMgaXMgdXNlZCB0byBpbXBsZW1lbnQgY2VydGFpbiBmcmFtZXdvcmsgZmVhdHVyZXMgdGhhdCBhcmVcbiAqIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGJ5IENvbnN0cnVjdCBjb25zdW1lcnMsIGFuZCBzbyBzaG91bGQgYmUgaGlkZGVuXG4gKiBmcm9tIGFjY2lkZW50YWwgdXNlLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogLy8gVXNhZ2VcbiAqIGNvbnN0IHJvb3RzID0gRGVwZW5kYWJsZVRyYWl0LmdldChjb25zdHJ1Y3QpLmRlcGVuZGVuY3lSb290cztcbiAqXG4gKiAvLyBEZWZpbml0aW9uXG4gKiBEZXBlbmRhYmxlVHJhaXQuaW1wbGVtZW50KGNvbnN0cnVjdCwge1xuICogICBnZXQgZGVwZW5kZW5jeVJvb3RzKCkgeyByZXR1cm4gW107IH1cbiAqIH0pO1xuICpcbiAqIEBleHBlcmltZW50YWxcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERlcGVuZGFibGUge1xuICAvKipcbiAgICogVHVybiBhbnkgb2JqZWN0IGludG8gYW4gSURlcGVuZGFibGUuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGltcGxlbWVudChpbnN0YW5jZTogSURlcGVuZGFibGUsIHRyYWl0OiBEZXBlbmRhYmxlKSB7XG4gICAgLy8gSSB3b3VsZCBhbHNvIGxpa2UgdG8gcmVmZXJlbmNlIGNsYXNzZXMgKHRvIGN1dCBkb3duIG9uIHRoZSBsaXN0IG9mIG9iamVjdHNcbiAgICAvLyB3ZSBuZWVkIHRvIG1hbmFnZSksIGJ1dCB3ZSBjYW4ndCBkbyB0aGF0IGVpdGhlciBzaW5jZSBqc2lpIGRvZXNuJ3QgaGF2ZSB0aGVcbiAgICAvLyBjb25jZXB0IG9mIGEgY2xhc3MgcmVmZXJlbmNlLlxuICAgIChpbnN0YW5jZSBhcyBhbnkpW0RFUEVOREFCTEVfU1lNQk9MXSA9IHRyYWl0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbWF0Y2hpbmcgRGVwZW5kYWJsZSBmb3IgdGhlIGdpdmVuIGNsYXNzIGluc3RhbmNlLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBvZihpbnN0YW5jZTogSURlcGVuZGFibGUpOiBEZXBlbmRhYmxlIHtcbiAgICBjb25zdCByZXQgPSAoaW5zdGFuY2UgYXMgYW55KVtERVBFTkRBQkxFX1NZTUJPTF07XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtpbnN0YW5jZX0gZG9lcyBub3QgaW1wbGVtZW50IElEZXBlbmRhYmxlLiBVc2UgXCJEZXBlbmRhYmxlLmltcGxlbWVudCgpXCIgdG8gaW1wbGVtZW50YCk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBtYXRjaGluZyBEZXBlbmRhYmxlIGZvciB0aGUgZ2l2ZW4gY2xhc3MgaW5zdGFuY2UuXG4gICAqIEBkZXByZWNhdGVkIHVzZSBgb2ZgXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldChpbnN0YW5jZTogSURlcGVuZGFibGUpOiBEZXBlbmRhYmxlIHtcbiAgICByZXR1cm4gdGhpcy5vZihpbnN0YW5jZSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHNldCBvZiBjb25zdHJ1Y3RzIHRoYXQgZm9ybSB0aGUgcm9vdCBvZiB0aGlzIGRlcGVuZGFibGVcbiAgICpcbiAgICogQWxsIHJlc291cmNlcyB1bmRlciBhbGwgcmV0dXJuZWQgY29uc3RydWN0cyBhcmUgaW5jbHVkZWQgaW4gdGhlIG9yZGVyaW5nXG4gICAqIGRlcGVuZGVuY3kuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgZGVwZW5kZW5jeVJvb3RzOiBJQ29uc3RydWN0W107XG59XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./construct\"), exports);\n__exportStar(require(\"./metadata\"), exports);\n__exportStar(require(\"./dependency\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsOENBQTRCO0FBQzVCLDZDQUEyQjtBQUMzQiwrQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2NvbnN0cnVjdCc7XG5leHBvcnQgKiBmcm9tICcuL21ldGFkYXRhJztcbmV4cG9ydCAqIGZyb20gJy4vZGVwZW5kZW5jeSc7Il19","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWV0YWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQW4gZW50cnkgaW4gdGhlIGNvbnN0cnVjdCBtZXRhZGF0YSB0YWJsZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZXRhZGF0YUVudHJ5IHtcbiAgLyoqXG4gICAqIFRoZSBtZXRhZGF0YSBlbnRyeSB0eXBlLlxuICAgKi9cbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGF0YS5cbiAgICovXG4gIHJlYWRvbmx5IGRhdGE6IGFueTtcblxuICAvKipcbiAgICogU3RhY2sgdHJhY2UgYXQgdGhlIHBvaW50IG9mIGFkZGluZyB0aGUgbWV0YWRhdGEuXG4gICAqXG4gICAqIE9ubHkgYXZhaWxhYmxlIGlmIGBhZGRNZXRhZGF0YSgpYCBpcyBjYWxsZWQgd2l0aCBgc3RhY2tUcmFjZTogdHJ1ZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbm8gdHJhY2UgaW5mb3JtYXRpb25cbiAgICovXG4gIHJlYWRvbmx5IHRyYWNlPzogc3RyaW5nW107XG59XG4iXX0=","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.captureStackTrace = void 0;\n// tslint:disable-next-line:ban-types\nfunction captureStackTrace(below) {\n    below = below || captureStackTrace; // hide myself if nothing else\n    const object = { stack: '' };\n    const previousLimit = Error.stackTraceLimit;\n    try {\n        Error.stackTraceLimit = Number.MAX_SAFE_INTEGER;\n        Error.captureStackTrace(object, below);\n    }\n    finally {\n        Error.stackTraceLimit = previousLimit;\n    }\n    if (!object.stack) {\n        return [];\n    }\n    return object.stack.split('\\n').slice(1).map(s => s.replace(/^\\s*at\\s+/, ''));\n}\nexports.captureStackTrace = captureStackTrace;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2stdHJhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJpdmF0ZS9zdGFjay10cmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsU0FBZ0IsaUJBQWlCLENBQUMsS0FBZ0I7SUFDaEQsS0FBSyxHQUFHLEtBQUssSUFBSSxpQkFBaUIsQ0FBQyxDQUFDLDhCQUE4QjtJQUNsRSxNQUFNLE1BQU0sR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUM3QixNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDO0lBQzVDLElBQUk7UUFDRixLQUFLLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUNoRCxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3hDO1lBQVM7UUFDUixLQUFLLENBQUMsZUFBZSxHQUFHLGFBQWEsQ0FBQztLQUN2QztJQUNELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO1FBQ2pCLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFDRCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2hGLENBQUM7QUFkRCw4Q0FjQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpiYW4tdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlU3RhY2tUcmFjZShiZWxvdz86IEZ1bmN0aW9uKTogc3RyaW5nW10ge1xuICBiZWxvdyA9IGJlbG93IHx8IGNhcHR1cmVTdGFja1RyYWNlOyAvLyBoaWRlIG15c2VsZiBpZiBub3RoaW5nIGVsc2VcbiAgY29uc3Qgb2JqZWN0ID0geyBzdGFjazogJycgfTtcbiAgY29uc3QgcHJldmlvdXNMaW1pdCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdDtcbiAgdHJ5IHtcbiAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShvYmplY3QsIGJlbG93KTtcbiAgfSBmaW5hbGx5IHtcbiAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBwcmV2aW91c0xpbWl0O1xuICB9XG4gIGlmICghb2JqZWN0LnN0YWNrKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBvYmplY3Quc3RhY2suc3BsaXQoJ1xcbicpLnNsaWNlKDEpLm1hcChzID0+IHMucmVwbGFjZSgvXlxccyphdFxccysvLCAnJykpO1xufVxuIl19","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addressOf = void 0;\nconst crypto = require(\"crypto\");\n/**\n * Resources with this ID are complete hidden from the logical ID calculation.\n */\nconst HIDDEN_ID = 'Default';\n/**\n * Calculates the construct uid based on path components.\n *\n * Components named `Default` (case sensitive) are excluded from uid calculation\n * to allow tree refactorings.\n *\n * @param components path components\n */\nfunction addressOf(components) {\n    const hash = crypto.createHash('sha1');\n    for (const c of components) {\n        // skip components called \"Default\" to enable refactorings\n        if (c === HIDDEN_ID) {\n            continue;\n        }\n        hash.update(c);\n        hash.update('\\n');\n    }\n    // prefix with \"c8\" so to ensure it starts with non-digit.\n    return 'c8' + hash.digest('hex');\n}\nexports.addressOf = addressOf;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlaWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJpdmF0ZS91bmlxdWVpZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBaUM7QUFFakM7O0dBRUc7QUFDSCxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFFNUI7Ozs7Ozs7R0FPRztBQUNILFNBQWdCLFNBQVMsQ0FBQyxVQUFvQjtJQUM1QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZDLEtBQUssTUFBTSxDQUFDLElBQUksVUFBVSxFQUFFO1FBQzFCLDBEQUEwRDtRQUMxRCxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFBRSxTQUFTO1NBQUU7UUFFbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDbkI7SUFFRCwwREFBMEQ7SUFDMUQsT0FBTyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBWkQsOEJBWUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuLyoqXG4gKiBSZXNvdXJjZXMgd2l0aCB0aGlzIElEIGFyZSBjb21wbGV0ZSBoaWRkZW4gZnJvbSB0aGUgbG9naWNhbCBJRCBjYWxjdWxhdGlvbi5cbiAqL1xuY29uc3QgSElEREVOX0lEID0gJ0RlZmF1bHQnO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbnN0cnVjdCB1aWQgYmFzZWQgb24gcGF0aCBjb21wb25lbnRzLlxuICpcbiAqIENvbXBvbmVudHMgbmFtZWQgYERlZmF1bHRgIChjYXNlIHNlbnNpdGl2ZSkgYXJlIGV4Y2x1ZGVkIGZyb20gdWlkIGNhbGN1bGF0aW9uXG4gKiB0byBhbGxvdyB0cmVlIHJlZmFjdG9yaW5ncy5cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50cyBwYXRoIGNvbXBvbmVudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZHJlc3NPZihjb21wb25lbnRzOiBzdHJpbmdbXSkge1xuICBjb25zdCBoYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTEnKTtcbiAgZm9yIChjb25zdCBjIG9mIGNvbXBvbmVudHMpIHtcbiAgICAvLyBza2lwIGNvbXBvbmVudHMgY2FsbGVkIFwiRGVmYXVsdFwiIHRvIGVuYWJsZSByZWZhY3RvcmluZ3NcbiAgICBpZiAoYyA9PT0gSElEREVOX0lEKSB7IGNvbnRpbnVlOyB9XG5cbiAgICBoYXNoLnVwZGF0ZShjKTtcbiAgICBoYXNoLnVwZGF0ZSgnXFxuJyk7XG4gIH1cblxuICAvLyBwcmVmaXggd2l0aCBcImM4XCIgc28gdG8gZW5zdXJlIGl0IHN0YXJ0cyB3aXRoIG5vbi1kaWdpdC5cbiAgcmV0dXJuICdjOCcgKyBoYXNoLmRpZ2VzdCgnaGV4Jyk7XG59XG4iXX0=","module.exports = require('./lib/tunnel');\n","'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"assert\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"child_process\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"crypto\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"events\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"fs\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"http\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"https\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"net\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"os\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"path\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"tls\");","module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"util\");","'use strict';\n\nvar Node = require('../nodes/Node.js');\nvar Scalar = require('../nodes/Scalar.js');\nvar resolveBlockMap = require('./resolve-block-map.js');\nvar resolveBlockSeq = require('./resolve-block-seq.js');\nvar resolveFlowCollection = require('./resolve-flow-collection.js');\n\nfunction composeCollection(CN, ctx, token, tagToken, onError) {\n    let coll;\n    switch (token.type) {\n        case 'block-map': {\n            coll = resolveBlockMap.resolveBlockMap(CN, ctx, token, onError);\n            break;\n        }\n        case 'block-seq': {\n            coll = resolveBlockSeq.resolveBlockSeq(CN, ctx, token, onError);\n            break;\n        }\n        case 'flow-collection': {\n            coll = resolveFlowCollection.resolveFlowCollection(CN, ctx, token, onError);\n            break;\n        }\n    }\n    if (!tagToken)\n        return coll;\n    const tagName = ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));\n    if (!tagName)\n        return coll;\n    // Cast needed due to: https://github.com/Microsoft/TypeScript/issues/3841\n    const Coll = coll.constructor;\n    if (tagName === '!' || tagName === Coll.tagName) {\n        coll.tag = Coll.tagName;\n        return coll;\n    }\n    const expType = Node.isMap(coll) ? 'map' : 'seq';\n    let tag = ctx.schema.tags.find(t => t.collection === expType && t.tag === tagName);\n    if (!tag) {\n        const kt = ctx.schema.knownTags[tagName];\n        if (kt && kt.collection === expType) {\n            ctx.schema.tags.push(Object.assign({}, kt, { default: false }));\n            tag = kt;\n        }\n        else {\n            onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, true);\n            coll.tag = tagName;\n            return coll;\n        }\n    }\n    const res = tag.resolve(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options);\n    const node = Node.isNode(res)\n        ? res\n        : new Scalar.Scalar(res);\n    node.range = coll.range;\n    node.tag = tagName;\n    if (tag === null || tag === void 0 ? void 0 : tag.format)\n        node.format = tag.format;\n    return node;\n}\n\nexports.composeCollection = composeCollection;\n","'use strict';\n\nvar Document = require('../doc/Document.js');\nvar composeNode = require('./compose-node.js');\nvar resolveEnd = require('./resolve-end.js');\nvar resolveProps = require('./resolve-props.js');\n\nfunction composeDoc(options, directives, { offset, start, value, end }, onError) {\n    const opts = Object.assign({ directives }, options);\n    const doc = new Document.Document(undefined, opts);\n    const ctx = {\n        directives: doc.directives,\n        options: doc.options,\n        schema: doc.schema\n    };\n    const props = resolveProps.resolveProps(start, {\n        indicator: 'doc-start',\n        next: value || (end === null || end === void 0 ? void 0 : end[0]),\n        offset,\n        onError,\n        startOnNewline: true\n    });\n    if (props.found) {\n        doc.directives.marker = true;\n        if (value &&\n            (value.type === 'block-map' || value.type === 'block-seq') &&\n            !props.hasNewline)\n            onError(props.end, 'MISSING_CHAR', 'Block collection cannot start on same line with directives-end marker');\n    }\n    doc.contents = value\n        ? composeNode.composeNode(ctx, value, props, onError)\n        : composeNode.composeEmptyNode(ctx, props.end, start, null, props, onError);\n    const contentEnd = doc.contents.range[2];\n    const re = resolveEnd.resolveEnd(end, contentEnd, false, onError);\n    if (re.comment)\n        doc.comment = re.comment;\n    doc.range = [offset, contentEnd, re.offset];\n    return doc;\n}\n\nexports.composeDoc = composeDoc;\n","'use strict';\n\nvar Alias = require('../nodes/Alias.js');\nvar composeCollection = require('./compose-collection.js');\nvar composeScalar = require('./compose-scalar.js');\nvar resolveEnd = require('./resolve-end.js');\nvar utilEmptyScalarPosition = require('./util-empty-scalar-position.js');\n\nconst CN = { composeNode, composeEmptyNode };\nfunction composeNode(ctx, token, props, onError) {\n    const { spaceBefore, comment, anchor, tag } = props;\n    let node;\n    switch (token.type) {\n        case 'alias':\n            node = composeAlias(ctx, token, onError);\n            if (anchor || tag)\n                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');\n            break;\n        case 'scalar':\n        case 'single-quoted-scalar':\n        case 'double-quoted-scalar':\n        case 'block-scalar':\n            node = composeScalar.composeScalar(ctx, token, tag, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n        case 'block-map':\n        case 'block-seq':\n        case 'flow-collection':\n            node = composeCollection.composeCollection(CN, ctx, token, tag, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n        default:\n            console.log(token);\n            throw new Error(`Unsupporten token type: ${token.type}`);\n    }\n    if (anchor && node.anchor === '')\n        onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');\n    if (spaceBefore)\n        node.spaceBefore = true;\n    if (comment) {\n        if (token.type === 'scalar' && token.source === '')\n            node.comment = comment;\n        else\n            node.commentBefore = comment;\n    }\n    return node;\n}\nfunction composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag }, onError) {\n    const token = {\n        type: 'scalar',\n        offset: utilEmptyScalarPosition.emptyScalarPosition(offset, before, pos),\n        indent: -1,\n        source: ''\n    };\n    const node = composeScalar.composeScalar(ctx, token, tag, onError);\n    if (anchor) {\n        node.anchor = anchor.source.substring(1);\n        if (node.anchor === '')\n            onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');\n    }\n    if (spaceBefore)\n        node.spaceBefore = true;\n    if (comment)\n        node.comment = comment;\n    return node;\n}\nfunction composeAlias({ options }, { offset, source, end }, onError) {\n    const alias = new Alias.Alias(source.substring(1));\n    if (alias.source === '')\n        onError(offset, 'BAD_ALIAS', 'Alias cannot be an empty string');\n    const valueEnd = offset + source.length;\n    const re = resolveEnd.resolveEnd(end, valueEnd, options.strict, onError);\n    alias.range = [offset, valueEnd, re.offset];\n    if (re.comment)\n        alias.comment = re.comment;\n    return alias;\n}\n\nexports.composeEmptyNode = composeEmptyNode;\nexports.composeNode = composeNode;\n","'use strict';\n\nvar Node = require('../nodes/Node.js');\nvar Scalar = require('../nodes/Scalar.js');\nvar resolveBlockScalar = require('./resolve-block-scalar.js');\nvar resolveFlowScalar = require('./resolve-flow-scalar.js');\n\nfunction composeScalar(ctx, token, tagToken, onError) {\n    const { value, type, comment, range } = token.type === 'block-scalar'\n        ? resolveBlockScalar.resolveBlockScalar(token, ctx.options.strict, onError)\n        : resolveFlowScalar.resolveFlowScalar(token, ctx.options.strict, onError);\n    const tagName = tagToken\n        ? ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg))\n        : null;\n    const tag = tagToken && tagName\n        ? findScalarTagByName(ctx.schema, value, tagName, tagToken, onError)\n        : findScalarTagByTest(ctx.schema, value, token.type === 'scalar');\n    let scalar;\n    try {\n        const res = tag.resolve(value, msg => onError(tagToken || token, 'TAG_RESOLVE_FAILED', msg), ctx.options);\n        scalar = Node.isScalar(res) ? res : new Scalar.Scalar(res);\n    }\n    catch (error) {\n        onError(tagToken || token, 'TAG_RESOLVE_FAILED', error.message);\n        scalar = new Scalar.Scalar(value);\n    }\n    scalar.range = range;\n    scalar.source = value;\n    if (type)\n        scalar.type = type;\n    if (tagName)\n        scalar.tag = tagName;\n    if (tag.format)\n        scalar.format = tag.format;\n    if (comment)\n        scalar.comment = comment;\n    return scalar;\n}\nfunction findScalarTagByName(schema, value, tagName, tagToken, onError) {\n    var _a;\n    if (tagName === '!')\n        return schema[Node.SCALAR]; // non-specific tag\n    const matchWithTest = [];\n    for (const tag of schema.tags) {\n        if (!tag.collection && tag.tag === tagName) {\n            if (tag.default && tag.test)\n                matchWithTest.push(tag);\n            else\n                return tag;\n        }\n    }\n    for (const tag of matchWithTest)\n        if ((_a = tag.test) === null || _a === void 0 ? void 0 : _a.test(value))\n            return tag;\n    const kt = schema.knownTags[tagName];\n    if (kt && !kt.collection) {\n        // Ensure that the known tag is available for stringifying,\n        // but does not get used by default.\n        schema.tags.push(Object.assign({}, kt, { default: false, test: undefined }));\n        return kt;\n    }\n    onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, tagName !== 'tag:yaml.org,2002:str');\n    return schema[Node.SCALAR];\n}\nfunction findScalarTagByTest(schema, value, apply) {\n    var _a;\n    if (apply) {\n        for (const tag of schema.tags) {\n            if (tag.default && ((_a = tag.test) === null || _a === void 0 ? void 0 : _a.test(value)))\n                return tag;\n        }\n    }\n    return schema[Node.SCALAR];\n}\n\nexports.composeScalar = composeScalar;\n","'use strict';\n\nvar directives = require('../doc/directives.js');\nvar Document = require('../doc/Document.js');\nvar errors = require('../errors.js');\nvar Node = require('../nodes/Node.js');\nvar options = require('../options.js');\nvar composeDoc = require('./compose-doc.js');\nvar resolveEnd = require('./resolve-end.js');\n\nfunction getErrorPos(src) {\n    if (typeof src === 'number')\n        return [src, src + 1];\n    if (Array.isArray(src))\n        return src.length === 2 ? src : [src[0], src[1]];\n    const { offset, source } = src;\n    return [offset, offset + (typeof source === 'string' ? source.length : 1)];\n}\nfunction parsePrelude(prelude) {\n    var _a;\n    let comment = '';\n    let atComment = false;\n    let afterEmptyLine = false;\n    for (let i = 0; i < prelude.length; ++i) {\n        const source = prelude[i];\n        switch (source[0]) {\n            case '#':\n                comment +=\n                    (comment === '' ? '' : afterEmptyLine ? '\\n\\n' : '\\n') +\n                        (source.substring(1) || ' ');\n                atComment = true;\n                afterEmptyLine = false;\n                break;\n            case '%':\n                if (((_a = prelude[i + 1]) === null || _a === void 0 ? void 0 : _a[0]) !== '#')\n                    i += 1;\n                atComment = false;\n                break;\n            default:\n                // This may be wrong after doc-end, but in that case it doesn't matter\n                if (!atComment)\n                    afterEmptyLine = true;\n                atComment = false;\n        }\n    }\n    return { comment, afterEmptyLine };\n}\n/**\n * Compose a stream of CST nodes into a stream of YAML Documents.\n *\n * ```ts\n * import { Composer, Parser } from 'yaml'\n *\n * const src: string = ...\n * const tokens = new Parser().parse(src)\n * const docs = new Composer().compose(tokens)\n * ```\n */\nclass Composer {\n    constructor(options$1 = {}) {\n        this.doc = null;\n        this.atDirectives = false;\n        this.prelude = [];\n        this.errors = [];\n        this.warnings = [];\n        this.onError = (source, code, message, warning) => {\n            const pos = getErrorPos(source);\n            if (warning)\n                this.warnings.push(new errors.YAMLWarning(pos, code, message));\n            else\n                this.errors.push(new errors.YAMLParseError(pos, code, message));\n        };\n        this.directives = new directives.Directives({\n            version: options$1.version || options.defaultOptions.version\n        });\n        this.options = options$1;\n    }\n    decorate(doc, afterDoc) {\n        const { comment, afterEmptyLine } = parsePrelude(this.prelude);\n        //console.log({ dc: doc.comment, prelude, comment })\n        if (comment) {\n            const dc = doc.contents;\n            if (afterDoc) {\n                doc.comment = doc.comment ? `${doc.comment}\\n${comment}` : comment;\n            }\n            else if (afterEmptyLine || doc.directives.marker || !dc) {\n                doc.commentBefore = comment;\n            }\n            else if (Node.isCollection(dc) && !dc.flow && dc.items.length > 0) {\n                let it = dc.items[0];\n                if (Node.isPair(it))\n                    it = it.key;\n                const cb = it.commentBefore;\n                it.commentBefore = cb ? `${comment}\\n${cb}` : comment;\n            }\n            else {\n                const cb = dc.commentBefore;\n                dc.commentBefore = cb ? `${comment}\\n${cb}` : comment;\n            }\n        }\n        if (afterDoc) {\n            Array.prototype.push.apply(doc.errors, this.errors);\n            Array.prototype.push.apply(doc.warnings, this.warnings);\n        }\n        else {\n            doc.errors = this.errors;\n            doc.warnings = this.warnings;\n        }\n        this.prelude = [];\n        this.errors = [];\n        this.warnings = [];\n    }\n    /**\n     * Current stream status information.\n     *\n     * Mostly useful at the end of input for an empty stream.\n     */\n    streamInfo() {\n        return {\n            comment: parsePrelude(this.prelude).comment,\n            directives: this.directives,\n            errors: this.errors,\n            warnings: this.warnings\n        };\n    }\n    /**\n     * Compose tokens into documents.\n     *\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\n     */\n    *compose(tokens, forceDoc = false, endOffset = -1) {\n        for (const token of tokens)\n            yield* this.next(token);\n        yield* this.end(forceDoc, endOffset);\n    }\n    /** Advance the composer by one CST token. */\n    *next(token) {\n        if (process.env.LOG_STREAM)\n            console.dir(token, { depth: null });\n        switch (token.type) {\n            case 'directive':\n                this.directives.add(token.source, (offset, message, warning) => {\n                    const pos = getErrorPos(token);\n                    pos[0] += offset;\n                    this.onError(pos, 'BAD_DIRECTIVE', message, warning);\n                });\n                this.prelude.push(token.source);\n                this.atDirectives = true;\n                break;\n            case 'document': {\n                const doc = composeDoc.composeDoc(this.options, this.directives, token, this.onError);\n                if (this.atDirectives && !doc.directives.marker)\n                    this.onError(token, 'MISSING_CHAR', 'Missing directives-end indicator line');\n                this.decorate(doc, false);\n                if (this.doc)\n                    yield this.doc;\n                this.doc = doc;\n                this.atDirectives = false;\n                break;\n            }\n            case 'byte-order-mark':\n            case 'space':\n                break;\n            case 'comment':\n            case 'newline':\n                this.prelude.push(token.source);\n                break;\n            case 'error': {\n                const msg = token.source\n                    ? `${token.message}: ${JSON.stringify(token.source)}`\n                    : token.message;\n                const error = new errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg);\n                if (this.atDirectives || !this.doc)\n                    this.errors.push(error);\n                else\n                    this.doc.errors.push(error);\n                break;\n            }\n            case 'doc-end': {\n                if (!this.doc) {\n                    const msg = 'Unexpected doc-end without preceding document';\n                    this.errors.push(new errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg));\n                    break;\n                }\n                const end = resolveEnd.resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);\n                this.decorate(this.doc, true);\n                if (end.comment) {\n                    const dc = this.doc.comment;\n                    this.doc.comment = dc ? `${dc}\\n${end.comment}` : end.comment;\n                }\n                this.doc.range[2] = end.offset;\n                break;\n            }\n            default:\n                this.errors.push(new errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', `Unsupported token ${token.type}`));\n        }\n    }\n    /**\n     * Call at end of input to yield any remaining document.\n     *\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\n     */\n    *end(forceDoc = false, endOffset = -1) {\n        if (this.doc) {\n            this.decorate(this.doc, true);\n            yield this.doc;\n            this.doc = null;\n        }\n        else if (forceDoc) {\n            const opts = Object.assign({ directives: this.directives }, this.options);\n            const doc = new Document.Document(undefined, opts);\n            if (this.atDirectives)\n                this.onError(endOffset, 'MISSING_CHAR', 'Missing directives-end indicator line');\n            doc.range = [0, endOffset, endOffset];\n            this.decorate(doc, false);\n            yield doc;\n        }\n    }\n}\n\nexports.Composer = Composer;\n","'use strict';\n\nvar Pair = require('../nodes/Pair.js');\nvar YAMLMap = require('../nodes/YAMLMap.js');\nvar resolveProps = require('./resolve-props.js');\nvar utilContainsNewline = require('./util-contains-newline.js');\nvar utilMapIncludes = require('./util-map-includes.js');\n\nconst startColMsg = 'All mapping items must start at the same column';\nfunction resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError) {\n    var _a;\n    const map = new YAMLMap.YAMLMap(ctx.schema);\n    let offset = bm.offset;\n    for (const { start, key, sep, value } of bm.items) {\n        // key properties\n        const keyProps = resolveProps.resolveProps(start, {\n            indicator: 'explicit-key-ind',\n            next: key || (sep === null || sep === void 0 ? void 0 : sep[0]),\n            offset,\n            onError,\n            startOnNewline: true\n        });\n        const implicitKey = !keyProps.found;\n        if (implicitKey) {\n            if (key) {\n                if (key.type === 'block-seq')\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');\n                else if ('indent' in key && key.indent !== bm.indent)\n                    onError(offset, 'BAD_INDENT', startColMsg);\n            }\n            if (!keyProps.anchor && !keyProps.tag && !sep) {\n                // TODO: assert being at last item?\n                if (keyProps.comment) {\n                    if (map.comment)\n                        map.comment += '\\n' + keyProps.comment;\n                    else\n                        map.comment = keyProps.comment;\n                }\n                continue;\n            }\n        }\n        else if (((_a = keyProps.found) === null || _a === void 0 ? void 0 : _a.indent) !== bm.indent)\n            onError(offset, 'BAD_INDENT', startColMsg);\n        if (implicitKey && utilContainsNewline.containsNewline(key))\n            onError(key, // checked by containsNewline()\n            'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');\n        // key value\n        const keyStart = keyProps.end;\n        const keyNode = key\n            ? composeNode(ctx, key, keyProps, onError)\n            : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);\n        if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))\n            onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n        // value properties\n        const valueProps = resolveProps.resolveProps(sep || [], {\n            indicator: 'map-value-ind',\n            next: value,\n            offset: keyNode.range[2],\n            onError,\n            startOnNewline: !key || key.type === 'block-scalar'\n        });\n        offset = valueProps.end;\n        if (valueProps.found) {\n            if (implicitKey) {\n                if ((value === null || value === void 0 ? void 0 : value.type) === 'block-map' && !valueProps.hasNewline)\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\n                if (ctx.options.strict &&\n                    keyProps.start < valueProps.found.offset - 1024)\n                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);\n            offset = valueNode.range[2];\n            map.items.push(new Pair.Pair(keyNode, valueNode));\n        }\n        else {\n            // key with no value\n            if (implicitKey)\n                onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');\n            if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            map.items.push(new Pair.Pair(keyNode));\n        }\n    }\n    map.range = [bm.offset, offset, offset];\n    return map;\n}\n\nexports.resolveBlockMap = resolveBlockMap;\n","'use strict';\n\nvar Scalar = require('../nodes/Scalar.js');\n\nfunction resolveBlockScalar(scalar, strict, onError) {\n    const start = scalar.offset;\n    const header = parseBlockScalarHeader(scalar, strict, onError);\n    if (!header)\n        return { value: '', type: null, comment: '', range: [start, start, start] };\n    const type = header.mode === '>' ? Scalar.Scalar.BLOCK_FOLDED : Scalar.Scalar.BLOCK_LITERAL;\n    const lines = scalar.source ? splitLines(scalar.source) : [];\n    // determine the end of content & start of chomping\n    let chompStart = lines.length;\n    for (let i = lines.length - 1; i >= 0; --i) {\n        const content = lines[i][1];\n        if (content === '' || content === '\\r')\n            chompStart = i;\n        else\n            break;\n    }\n    // shortcut for empty contents\n    if (!scalar.source || chompStart === 0) {\n        const value = header.chomp === '+' ? lines.map(line => line[0]).join('\\n') : '';\n        let end = start + header.length;\n        if (scalar.source)\n            end += scalar.source.length;\n        return { value, type, comment: header.comment, range: [start, end, end] };\n    }\n    // find the indentation level to trim from start\n    let trimIndent = scalar.indent + header.indent;\n    let offset = scalar.offset + header.length;\n    let contentStart = 0;\n    for (let i = 0; i < chompStart; ++i) {\n        const [indent, content] = lines[i];\n        if (content === '' || content === '\\r') {\n            if (header.indent === 0 && indent.length > trimIndent)\n                trimIndent = indent.length;\n        }\n        else {\n            if (indent.length < trimIndent) {\n                const message = 'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';\n                onError(offset + indent.length, 'MISSING_CHAR', message);\n            }\n            if (header.indent === 0)\n                trimIndent = indent.length;\n            contentStart = i;\n            break;\n        }\n        offset += indent.length + content.length + 1;\n    }\n    let value = '';\n    let sep = '';\n    let prevMoreIndented = false;\n    // leading whitespace is kept intact\n    for (let i = 0; i < contentStart; ++i)\n        value += lines[i][0].slice(trimIndent) + '\\n';\n    for (let i = contentStart; i < chompStart; ++i) {\n        let [indent, content] = lines[i];\n        offset += indent.length + content.length + 1;\n        const crlf = content[content.length - 1] === '\\r';\n        if (crlf)\n            content = content.slice(0, -1);\n        /* istanbul ignore if already caught in lexer */\n        if (content && indent.length < trimIndent) {\n            const src = header.indent\n                ? 'explicit indentation indicator'\n                : 'first line';\n            const message = `Block scalar lines must not be less indented than their ${src}`;\n            onError(offset - content.length - (crlf ? 2 : 1), 'BAD_INDENT', message);\n            indent = '';\n        }\n        if (type === Scalar.Scalar.BLOCK_LITERAL) {\n            value += sep + indent.slice(trimIndent) + content;\n            sep = '\\n';\n        }\n        else if (indent.length > trimIndent || content[0] === '\\t') {\n            // more-indented content within a folded block\n            if (sep === ' ')\n                sep = '\\n';\n            else if (!prevMoreIndented && sep === '\\n')\n                sep = '\\n\\n';\n            value += sep + indent.slice(trimIndent) + content;\n            sep = '\\n';\n            prevMoreIndented = true;\n        }\n        else if (content === '') {\n            // empty line\n            if (sep === '\\n')\n                value += '\\n';\n            else\n                sep = '\\n';\n        }\n        else {\n            value += sep + content;\n            sep = ' ';\n            prevMoreIndented = false;\n        }\n    }\n    switch (header.chomp) {\n        case '-':\n            break;\n        case '+':\n            for (let i = chompStart; i < lines.length; ++i)\n                value += '\\n' + lines[i][0].slice(trimIndent);\n            if (value[value.length - 1] !== '\\n')\n                value += '\\n';\n            break;\n        default:\n            value += '\\n';\n    }\n    const end = start + header.length + scalar.source.length;\n    return { value, type, comment: header.comment, range: [start, end, end] };\n}\nfunction parseBlockScalarHeader({ offset, props }, strict, onError) {\n    /* istanbul ignore if should not happen */\n    if (props[0].type !== 'block-scalar-header') {\n        onError(props[0], 'IMPOSSIBLE', 'Block scalar header not found');\n        return null;\n    }\n    const { source } = props[0];\n    const mode = source[0];\n    let indent = 0;\n    let chomp = '';\n    let error = -1;\n    for (let i = 1; i < source.length; ++i) {\n        const ch = source[i];\n        if (!chomp && (ch === '-' || ch === '+'))\n            chomp = ch;\n        else {\n            const n = Number(ch);\n            if (!indent && n)\n                indent = n;\n            else if (error === -1)\n                error = offset + i;\n        }\n    }\n    if (error !== -1)\n        onError(error, 'UNEXPECTED_TOKEN', `Block scalar header includes extra characters: ${source}`);\n    let hasSpace = false;\n    let comment = '';\n    let length = source.length;\n    for (let i = 1; i < props.length; ++i) {\n        const token = props[i];\n        switch (token.type) {\n            case 'space':\n                hasSpace = true;\n            // fallthrough\n            case 'newline':\n                length += token.source.length;\n                break;\n            case 'comment':\n                if (strict && !hasSpace) {\n                    const message = 'Comments must be separated from other tokens by white space characters';\n                    onError(token, 'MISSING_CHAR', message);\n                }\n                length += token.source.length;\n                comment = token.source.substring(1);\n                break;\n            case 'error':\n                onError(token, 'UNEXPECTED_TOKEN', token.message);\n                length += token.source.length;\n                break;\n            /* istanbul ignore next should not happen */\n            default: {\n                const message = `Unexpected token in block scalar header: ${token.type}`;\n                onError(token, 'UNEXPECTED_TOKEN', message);\n                const ts = token.source;\n                if (ts && typeof ts === 'string')\n                    length += ts.length;\n            }\n        }\n    }\n    return { mode, indent, chomp, comment, length };\n}\n/** @returns Array of lines split up as `[indent, content]` */\nfunction splitLines(source) {\n    const split = source.split(/\\n( *)/);\n    const first = split[0];\n    const m = first.match(/^( *)/);\n    const line0 = m && m[1] ? [m[1], first.slice(m[1].length)] : ['', first];\n    const lines = [line0];\n    for (let i = 1; i < split.length; i += 2)\n        lines.push([split[i], split[i + 1]]);\n    return lines;\n}\n\nexports.resolveBlockScalar = resolveBlockScalar;\n","'use strict';\n\nvar YAMLSeq = require('../nodes/YAMLSeq.js');\nvar resolveProps = require('./resolve-props.js');\n\nfunction resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError) {\n    const seq = new YAMLSeq.YAMLSeq(ctx.schema);\n    let offset = bs.offset;\n    for (const { start, value } of bs.items) {\n        const props = resolveProps.resolveProps(start, {\n            indicator: 'seq-item-ind',\n            next: value,\n            offset,\n            onError,\n            startOnNewline: true\n        });\n        offset = props.end;\n        if (!props.found) {\n            if (props.anchor || props.tag || value) {\n                if (value && value.type === 'block-seq')\n                    onError(offset, 'BAD_INDENT', 'All sequence items must start at the same column');\n                else\n                    onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');\n            }\n            else {\n                // TODO: assert being at last item?\n                if (props.comment)\n                    seq.comment = props.comment;\n                continue;\n            }\n        }\n        const node = value\n            ? composeNode(ctx, value, props, onError)\n            : composeEmptyNode(ctx, offset, start, null, props, onError);\n        offset = node.range[2];\n        seq.items.push(node);\n    }\n    seq.range = [bs.offset, offset, offset];\n    return seq;\n}\n\nexports.resolveBlockSeq = resolveBlockSeq;\n","'use strict';\n\nfunction resolveEnd(end, offset, reqSpace, onError) {\n    let comment = '';\n    if (end) {\n        let hasSpace = false;\n        let sep = '';\n        for (const token of end) {\n            const { source, type } = token;\n            switch (type) {\n                case 'space':\n                    hasSpace = true;\n                    break;\n                case 'comment': {\n                    if (reqSpace && !hasSpace)\n                        onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n                    const cb = source.substring(1) || ' ';\n                    if (!comment)\n                        comment = cb;\n                    else\n                        comment += sep + cb;\n                    sep = '';\n                    break;\n                }\n                case 'newline':\n                    if (comment)\n                        sep += source;\n                    hasSpace = true;\n                    break;\n                default:\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n            }\n            offset += source.length;\n        }\n    }\n    return { comment, offset };\n}\n\nexports.resolveEnd = resolveEnd;\n","'use strict';\n\nvar Node = require('../nodes/Node.js');\nvar Pair = require('../nodes/Pair.js');\nvar YAMLMap = require('../nodes/YAMLMap.js');\nvar YAMLSeq = require('../nodes/YAMLSeq.js');\nvar resolveEnd = require('./resolve-end.js');\nvar resolveProps = require('./resolve-props.js');\nvar utilContainsNewline = require('./util-contains-newline.js');\nvar utilMapIncludes = require('./util-map-includes.js');\n\nconst blockMsg = 'Block collections are not allowed within flow collections';\nconst isBlock = (token) => token && (token.type === 'block-map' || token.type === 'block-seq');\nfunction resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError) {\n    const isMap = fc.start.source === '{';\n    const fcName = isMap ? 'flow map' : 'flow sequence';\n    const coll = isMap\n        ? new YAMLMap.YAMLMap(ctx.schema)\n        : new YAMLSeq.YAMLSeq(ctx.schema);\n    coll.flow = true;\n    let offset = fc.offset;\n    for (let i = 0; i < fc.items.length; ++i) {\n        const { start, key, sep, value } = fc.items[i];\n        const props = resolveProps.resolveProps(start, {\n            flow: fcName,\n            indicator: 'explicit-key-ind',\n            next: key || (sep === null || sep === void 0 ? void 0 : sep[0]),\n            offset,\n            onError,\n            startOnNewline: false\n        });\n        if (!props.found) {\n            if (!props.anchor && !props.tag && !sep && !value) {\n                if (i === 0 && props.comma)\n                    onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n                else if (i < fc.items.length - 1)\n                    onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);\n                if (props.comment) {\n                    if (coll.comment)\n                        coll.comment += '\\n' + props.comment;\n                    else\n                        coll.comment = props.comment;\n                }\n                continue;\n            }\n            if (!isMap && ctx.options.strict && utilContainsNewline.containsNewline(key))\n                onError(key, // checked by containsNewline()\n                'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n        }\n        if (i === 0) {\n            if (props.comma)\n                onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n        }\n        else {\n            if (!props.comma)\n                onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);\n            if (props.comment) {\n                let prevItemComment = '';\n                loop: for (const st of start) {\n                    switch (st.type) {\n                        case 'comma':\n                        case 'space':\n                            break;\n                        case 'comment':\n                            prevItemComment = st.source.substring(1);\n                            break loop;\n                        default:\n                            break loop;\n                    }\n                }\n                if (prevItemComment) {\n                    let prev = coll.items[coll.items.length - 1];\n                    if (Node.isPair(prev))\n                        prev = prev.value || prev.key;\n                    if (prev.comment)\n                        prev.comment += '\\n' + prevItemComment;\n                    else\n                        prev.comment = prevItemComment;\n                    props.comment = props.comment.substring(prevItemComment.length + 1);\n                }\n            }\n        }\n        if (!isMap && !sep && !props.found) {\n            // item is a value in a seq\n            // → key & sep are empty, start does not include ? or :\n            const valueNode = value\n                ? composeNode(ctx, value, props, onError)\n                : composeEmptyNode(ctx, props.end, sep, null, props, onError);\n            coll.items.push(valueNode);\n            offset = valueNode.range[2];\n            if (isBlock(value))\n                onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n        }\n        else {\n            // item is a key+value pair\n            // key value\n            const keyStart = props.end;\n            const keyNode = key\n                ? composeNode(ctx, key, props, onError)\n                : composeEmptyNode(ctx, keyStart, start, null, props, onError);\n            if (isBlock(key))\n                onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            // value properties\n            const valueProps = resolveProps.resolveProps(sep || [], {\n                flow: fcName,\n                indicator: 'map-value-ind',\n                next: value,\n                offset: keyNode.range[2],\n                onError,\n                startOnNewline: false\n            });\n            if (valueProps.found) {\n                if (!isMap && !props.found && ctx.options.strict) {\n                    if (sep)\n                        for (const st of sep) {\n                            if (st === valueProps.found)\n                                break;\n                            if (st.type === 'newline') {\n                                onError(st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n                                break;\n                            }\n                        }\n                    if (props.start < valueProps.found.offset - 1024)\n                        onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');\n                }\n            }\n            else if (value) {\n                if ('source' in value && value.source && value.source[0] === ':')\n                    onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);\n                else\n                    onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : valueProps.found\n                    ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError)\n                    : null;\n            if (valueNode) {\n                if (isBlock(value))\n                    onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            }\n            else if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair.Pair(keyNode, valueNode);\n            if (isMap) {\n                const map = coll;\n                if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))\n                    onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n                map.items.push(pair);\n            }\n            else {\n                const map = new YAMLMap.YAMLMap(ctx.schema);\n                map.flow = true;\n                map.items.push(pair);\n                coll.items.push(map);\n            }\n            offset = valueNode ? valueNode.range[2] : valueProps.end;\n        }\n    }\n    const expectedEnd = isMap ? '}' : ']';\n    const [ce, ...ee] = fc.end;\n    let cePos = offset;\n    if (ce && ce.source === expectedEnd)\n        cePos = ce.offset + ce.source.length;\n    else {\n        onError(offset + 1, 'MISSING_CHAR', `Expected ${fcName} to end with ${expectedEnd}`);\n        if (ce && ce.source.length !== 1)\n            ee.unshift(ce);\n    }\n    if (ee.length > 0) {\n        const end = resolveEnd.resolveEnd(ee, cePos, ctx.options.strict, onError);\n        if (end.comment) {\n            if (coll.comment)\n                coll.comment += '\\n' + end.comment;\n            else\n                coll.comment = end.comment;\n        }\n        coll.range = [fc.offset, cePos, end.offset];\n    }\n    else {\n        coll.range = [fc.offset, cePos, cePos];\n    }\n    return coll;\n}\n\nexports.resolveFlowCollection = resolveFlowCollection;\n","'use strict';\n\nvar Scalar = require('../nodes/Scalar.js');\nvar resolveEnd = require('./resolve-end.js');\n\nfunction resolveFlowScalar(scalar, strict, onError) {\n    const { offset, type, source, end } = scalar;\n    let _type;\n    let value;\n    const _onError = (rel, code, msg) => onError(offset + rel, code, msg);\n    switch (type) {\n        case 'scalar':\n            _type = Scalar.Scalar.PLAIN;\n            value = plainValue(source, _onError);\n            break;\n        case 'single-quoted-scalar':\n            _type = Scalar.Scalar.QUOTE_SINGLE;\n            value = singleQuotedValue(source, _onError);\n            break;\n        case 'double-quoted-scalar':\n            _type = Scalar.Scalar.QUOTE_DOUBLE;\n            value = doubleQuotedValue(source, _onError);\n            break;\n        /* istanbul ignore next should not happen */\n        default:\n            onError(scalar, 'UNEXPECTED_TOKEN', `Expected a flow scalar value, but found: ${type}`);\n            return {\n                value: '',\n                type: null,\n                comment: '',\n                range: [offset, offset + source.length, offset + source.length]\n            };\n    }\n    const valueEnd = offset + source.length;\n    const re = resolveEnd.resolveEnd(end, valueEnd, strict, onError);\n    return {\n        value,\n        type: _type,\n        comment: re.comment,\n        range: [offset, valueEnd, re.offset]\n    };\n}\nfunction plainValue(source, onError) {\n    let badChar = '';\n    switch (source[0]) {\n        /* istanbul ignore next should not happen */\n        case '\\t':\n            badChar = 'a tab character';\n            break;\n        case ',':\n            badChar = 'flow indicator character ,';\n            break;\n        case '%':\n            badChar = 'directive indicator character %';\n            break;\n        case '|':\n        case '>': {\n            badChar = `block scalar indicator ${source[0]}`;\n            break;\n        }\n        case '@':\n        case '`': {\n            badChar = `reserved character ${source[0]}`;\n            break;\n        }\n    }\n    if (badChar)\n        onError(0, 'BAD_SCALAR_START', `Plain value cannot start with ${badChar}`);\n    return foldLines(source);\n}\nfunction singleQuotedValue(source, onError) {\n    if (source[source.length - 1] !== \"'\" || source.length === 1)\n        onError(source.length, 'MISSING_CHAR', \"Missing closing 'quote\");\n    return foldLines(source.slice(1, -1)).replace(/''/g, \"'\");\n}\nfunction foldLines(source) {\n    /**\n     * The negative lookbehind here and in the `re` RegExp is to\n     * prevent causing a polynomial search time in certain cases.\n     *\n     * The try-catch is for Safari, which doesn't support this yet:\n     * https://caniuse.com/js-regexp-lookbehind\n     */\n    let first, line;\n    try {\n        first = new RegExp('(.*?)(?<![ \\t])[ \\t]*\\r?\\n', 'sy');\n        line = new RegExp('[ \\t]*(.*?)(?:(?<![ \\t])[ \\t]*)?\\r?\\n', 'sy');\n    }\n    catch (_) {\n        first = /(.*?)[ \\t]*\\r?\\n/sy;\n        line = /[ \\t]*(.*?)[ \\t]*\\r?\\n/sy;\n    }\n    let match = first.exec(source);\n    if (!match)\n        return source;\n    let res = match[1];\n    let sep = ' ';\n    let pos = first.lastIndex;\n    line.lastIndex = pos;\n    while ((match = line.exec(source))) {\n        if (match[1] === '') {\n            if (sep === '\\n')\n                res += sep;\n            else\n                sep = '\\n';\n        }\n        else {\n            res += sep + match[1];\n            sep = ' ';\n        }\n        pos = line.lastIndex;\n    }\n    const last = /[ \\t]*(.*)/sy;\n    last.lastIndex = pos;\n    match = last.exec(source);\n    return res + sep + ((match && match[1]) || '');\n}\nfunction doubleQuotedValue(source, onError) {\n    let res = '';\n    for (let i = 1; i < source.length - 1; ++i) {\n        const ch = source[i];\n        if (ch === '\\r' && source[i + 1] === '\\n')\n            continue;\n        if (ch === '\\n') {\n            const { fold, offset } = foldNewline(source, i);\n            res += fold;\n            i = offset;\n        }\n        else if (ch === '\\\\') {\n            let next = source[++i];\n            const cc = escapeCodes[next];\n            if (cc)\n                res += cc;\n            else if (next === '\\n') {\n                // skip escaped newlines, but still trim the following line\n                next = source[i + 1];\n                while (next === ' ' || next === '\\t')\n                    next = source[++i + 1];\n            }\n            else if (next === 'x' || next === 'u' || next === 'U') {\n                const length = { x: 2, u: 4, U: 8 }[next];\n                res += parseCharCode(source, i + 1, length, onError);\n                i += length;\n            }\n            else {\n                const raw = source.substr(i - 1, 2);\n                onError(i - 1, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);\n                res += raw;\n            }\n        }\n        else if (ch === ' ' || ch === '\\t') {\n            // trim trailing whitespace\n            const wsStart = i;\n            let next = source[i + 1];\n            while (next === ' ' || next === '\\t')\n                next = source[++i + 1];\n            if (next !== '\\n')\n                res += i > wsStart ? source.slice(wsStart, i + 1) : ch;\n        }\n        else {\n            res += ch;\n        }\n    }\n    if (source[source.length - 1] !== '\"' || source.length === 1)\n        onError(source.length, 'MISSING_CHAR', 'Missing closing \"quote');\n    return res;\n}\n/**\n * Fold a single newline into a space, multiple newlines to N - 1 newlines.\n * Presumes `source[offset] === '\\n'`\n */\nfunction foldNewline(source, offset) {\n    let fold = '';\n    let ch = source[offset + 1];\n    while (ch === ' ' || ch === '\\t' || ch === '\\n' || ch === '\\r') {\n        if (ch === '\\r' && source[offset + 2] !== '\\n')\n            break;\n        if (ch === '\\n')\n            fold += '\\n';\n        offset += 1;\n        ch = source[offset + 1];\n    }\n    if (!fold)\n        fold = ' ';\n    return { fold, offset };\n}\nconst escapeCodes = {\n    '0': '\\0',\n    a: '\\x07',\n    b: '\\b',\n    e: '\\x1b',\n    f: '\\f',\n    n: '\\n',\n    r: '\\r',\n    t: '\\t',\n    v: '\\v',\n    N: '\\u0085',\n    _: '\\u00a0',\n    L: '\\u2028',\n    P: '\\u2029',\n    ' ': ' ',\n    '\"': '\"',\n    '/': '/',\n    '\\\\': '\\\\',\n    '\\t': '\\t'\n};\nfunction parseCharCode(source, offset, length, onError) {\n    const cc = source.substr(offset, length);\n    const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);\n    const code = ok ? parseInt(cc, 16) : NaN;\n    if (isNaN(code)) {\n        const raw = source.substr(offset - 2, length + 2);\n        onError(offset - 2, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);\n        return raw;\n    }\n    return String.fromCodePoint(code);\n}\n\nexports.resolveFlowScalar = resolveFlowScalar;\n","'use strict';\n\nfunction resolveProps(tokens, { flow, indicator, next, offset, onError, startOnNewline }) {\n    let spaceBefore = false;\n    let atNewline = startOnNewline;\n    let hasSpace = startOnNewline;\n    let comment = '';\n    let commentSep = '';\n    let hasNewline = false;\n    let reqSpace = false;\n    let anchor = null;\n    let tag = null;\n    let comma = null;\n    let found = null;\n    let start = null;\n    for (const token of tokens) {\n        if (reqSpace) {\n            if (token.type !== 'space' &&\n                token.type !== 'newline' &&\n                token.type !== 'comma')\n                onError(token.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');\n            reqSpace = false;\n        }\n        switch (token.type) {\n            case 'space':\n                // At the doc level, tabs at line start may be parsed\n                // as leading white space rather than indentation.\n                // In a flow collection, only the parser handles indent.\n                if (!flow &&\n                    atNewline &&\n                    indicator !== 'doc-start' &&\n                    token.source[0] === '\\t')\n                    onError(token, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');\n                hasSpace = true;\n                break;\n            case 'comment': {\n                if (!hasSpace)\n                    onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n                const cb = token.source.substring(1) || ' ';\n                if (!comment)\n                    comment = cb;\n                else\n                    comment += commentSep + cb;\n                commentSep = '';\n                atNewline = false;\n                break;\n            }\n            case 'newline':\n                if (atNewline) {\n                    if (comment)\n                        comment += token.source;\n                    else\n                        spaceBefore = true;\n                }\n                else\n                    commentSep += token.source;\n                atNewline = true;\n                hasNewline = true;\n                hasSpace = true;\n                break;\n            case 'anchor':\n                if (anchor)\n                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');\n                anchor = token;\n                if (start === null)\n                    start = token.offset;\n                atNewline = false;\n                hasSpace = false;\n                reqSpace = true;\n                break;\n            case 'tag': {\n                if (tag)\n                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');\n                tag = token;\n                if (start === null)\n                    start = token.offset;\n                atNewline = false;\n                hasSpace = false;\n                reqSpace = true;\n                break;\n            }\n            case indicator:\n                // Could here handle preceding comments differently\n                if (anchor || tag)\n                    onError(token, 'BAD_PROP_ORDER', `Anchors and tags must be after the ${token.source} indicator`);\n                found = token;\n                atNewline = false;\n                hasSpace = false;\n                break;\n            case 'comma':\n                if (flow) {\n                    if (comma)\n                        onError(token, 'UNEXPECTED_TOKEN', `Unexpected , in ${flow}`);\n                    comma = token;\n                    atNewline = false;\n                    hasSpace = false;\n                    break;\n                }\n            // else fallthrough\n            default:\n                onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.type} token`);\n                atNewline = false;\n                hasSpace = false;\n        }\n    }\n    const last = tokens[tokens.length - 1];\n    const end = last ? last.offset + last.source.length : offset;\n    if (reqSpace &&\n        next &&\n        next.type !== 'space' &&\n        next.type !== 'newline' &&\n        next.type !== 'comma' &&\n        (next.type !== 'scalar' || next.source !== ''))\n        onError(next.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');\n    return {\n        comma,\n        found,\n        spaceBefore,\n        comment,\n        hasNewline,\n        anchor,\n        tag,\n        end,\n        start: start !== null && start !== void 0 ? start : end\n    };\n}\n\nexports.resolveProps = resolveProps;\n","'use strict';\n\nfunction containsNewline(key) {\n    if (!key)\n        return null;\n    switch (key.type) {\n        case 'alias':\n        case 'scalar':\n        case 'double-quoted-scalar':\n        case 'single-quoted-scalar':\n            if (key.source.includes('\\n'))\n                return true;\n            if (key.end)\n                for (const st of key.end)\n                    if (st.type === 'newline')\n                        return true;\n            return false;\n        case 'flow-collection':\n            for (const it of key.items) {\n                for (const st of it.start)\n                    if (st.type === 'newline')\n                        return true;\n                if (it.sep)\n                    for (const st of it.sep)\n                        if (st.type === 'newline')\n                            return true;\n                if (containsNewline(it.key) || containsNewline(it.value))\n                    return true;\n            }\n            return false;\n        default:\n            return true;\n    }\n}\n\nexports.containsNewline = containsNewline;\n","'use strict';\n\nfunction emptyScalarPosition(offset, before, pos) {\n    if (before) {\n        if (pos === null)\n            pos = before.length;\n        for (let i = pos - 1; i >= 0; --i) {\n            let st = before[i];\n            switch (st.type) {\n                case 'space':\n                case 'comment':\n                case 'newline':\n                    offset -= st.source.length;\n                    continue;\n            }\n            // Technically, an empty scalar is immediately after the last non-empty\n            // node, but it's more useful to place it after any whitespace.\n            st = before[++i];\n            while ((st === null || st === void 0 ? void 0 : st.type) === 'space') {\n                offset += st.source.length;\n                st = before[++i];\n            }\n            break;\n        }\n    }\n    return offset;\n}\n\nexports.emptyScalarPosition = emptyScalarPosition;\n","'use strict';\n\nvar Node = require('../nodes/Node.js');\n\nfunction mapIncludes(ctx, items, search) {\n    const { uniqueKeys } = ctx.options;\n    if (uniqueKeys === false)\n        return false;\n    const isEqual = typeof uniqueKeys === 'function'\n        ? uniqueKeys\n        : (a, b) => a === b ||\n            (Node.isScalar(a) &&\n                Node.isScalar(b) &&\n                a.value === b.value &&\n                !(a.value === '<<' && ctx.schema.merge));\n    return items.some(pair => isEqual(pair.key, search));\n}\n\nexports.mapIncludes = mapIncludes;\n","'use strict';\n\nvar Alias = require('../nodes/Alias.js');\nvar Collection = require('../nodes/Collection.js');\nvar Node = require('../nodes/Node.js');\nvar Pair = require('../nodes/Pair.js');\nvar toJS = require('../nodes/toJS.js');\nvar options = require('../options.js');\nvar Schema = require('../schema/Schema.js');\nvar stringify = require('../stringify/stringify.js');\nvar stringifyDocument = require('../stringify/stringifyDocument.js');\nvar anchors = require('./anchors.js');\nvar applyReviver = require('./applyReviver.js');\nvar createNode = require('./createNode.js');\nvar directives = require('./directives.js');\n\nclass Document {\n    constructor(value, replacer, options$1) {\n        /** A comment before this Document */\n        this.commentBefore = null;\n        /** A comment immediately after this Document */\n        this.comment = null;\n        /** Errors encountered during parsing. */\n        this.errors = [];\n        /** Warnings encountered during parsing. */\n        this.warnings = [];\n        Object.defineProperty(this, Node.NODE_TYPE, { value: Node.DOC });\n        let _replacer = null;\n        if (typeof replacer === 'function' || Array.isArray(replacer)) {\n            _replacer = replacer;\n        }\n        else if (options$1 === undefined && replacer) {\n            options$1 = replacer;\n            replacer = undefined;\n        }\n        const opt = Object.assign({}, options.defaultOptions, options$1);\n        this.options = opt;\n        let { version } = opt;\n        if (options$1 === null || options$1 === void 0 ? void 0 : options$1.directives) {\n            this.directives = options$1.directives.atDocument();\n            if (this.directives.yaml.explicit)\n                version = this.directives.yaml.version;\n        }\n        else\n            this.directives = new directives.Directives({ version });\n        this.setSchema(version, options$1);\n        if (value === undefined)\n            this.contents = null;\n        else {\n            this.contents = this.createNode(value, _replacer, options$1);\n        }\n    }\n    /** Adds a value to the document. */\n    add(value) {\n        if (assertCollection(this.contents))\n            this.contents.add(value);\n    }\n    /** Adds a value to the document. */\n    addIn(path, value) {\n        if (assertCollection(this.contents))\n            this.contents.addIn(path, value);\n    }\n    /**\n     * Create a new `Alias` node, ensuring that the target `node` has the required anchor.\n     *\n     * If `node` already has an anchor, `name` is ignored.\n     * Otherwise, the `node.anchor` value will be set to `name`,\n     * or if an anchor with that name is already present in the document,\n     * `name` will be used as a prefix for a new unique anchor.\n     * If `name` is undefined, the generated anchor will use 'a' as a prefix.\n     */\n    createAlias(node, name) {\n        if (!node.anchor) {\n            const prev = anchors.anchorNames(this);\n            node.anchor =\n                !name || prev.has(name) ? anchors.findNewAnchor(name || 'a', prev) : name;\n        }\n        return new Alias.Alias(node.anchor);\n    }\n    createNode(value, replacer, options) {\n        let _replacer = undefined;\n        if (typeof replacer === 'function') {\n            value = replacer.call({ '': value }, '', value);\n            _replacer = replacer;\n        }\n        else if (Array.isArray(replacer)) {\n            const keyToStr = (v) => typeof v === 'number' || v instanceof String || v instanceof Number;\n            const asStr = replacer.filter(keyToStr).map(String);\n            if (asStr.length > 0)\n                replacer = replacer.concat(asStr);\n            _replacer = replacer;\n        }\n        else if (options === undefined && replacer) {\n            options = replacer;\n            replacer = undefined;\n        }\n        const { anchorPrefix, flow, keepUndefined, onTagObj, tag } = options || {};\n        const { onAnchor, setAnchors, sourceObjects } = anchors.createNodeAnchors(this, anchorPrefix || 'a');\n        const ctx = {\n            keepUndefined: keepUndefined !== null && keepUndefined !== void 0 ? keepUndefined : false,\n            onAnchor,\n            onTagObj,\n            replacer: _replacer,\n            schema: this.schema,\n            sourceObjects\n        };\n        const node = createNode.createNode(value, tag, ctx);\n        if (flow && Node.isCollection(node))\n            node.flow = true;\n        setAnchors();\n        return node;\n    }\n    /**\n     * Convert a key and a value into a `Pair` using the current schema,\n     * recursively wrapping all values as `Scalar` or `Collection` nodes.\n     */\n    createPair(key, value, options = {}) {\n        const k = this.createNode(key, null, options);\n        const v = this.createNode(value, null, options);\n        return new Pair.Pair(k, v);\n    }\n    /**\n     * Removes a value from the document.\n     * @returns `true` if the item was found and removed.\n     */\n    delete(key) {\n        return assertCollection(this.contents) ? this.contents.delete(key) : false;\n    }\n    /**\n     * Removes a value from the document.\n     * @returns `true` if the item was found and removed.\n     */\n    deleteIn(path) {\n        if (Collection.isEmptyPath(path)) {\n            if (this.contents == null)\n                return false;\n            this.contents = null;\n            return true;\n        }\n        return assertCollection(this.contents)\n            ? this.contents.deleteIn(path)\n            : false;\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    get(key, keepScalar) {\n        return Node.isCollection(this.contents)\n            ? this.contents.get(key, keepScalar)\n            : undefined;\n    }\n    /**\n     * Returns item at `path`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    getIn(path, keepScalar) {\n        if (Collection.isEmptyPath(path))\n            return !keepScalar && Node.isScalar(this.contents)\n                ? this.contents.value\n                : this.contents;\n        return Node.isCollection(this.contents)\n            ? this.contents.getIn(path, keepScalar)\n            : undefined;\n    }\n    /**\n     * Checks if the document includes a value with the key `key`.\n     */\n    has(key) {\n        return Node.isCollection(this.contents) ? this.contents.has(key) : false;\n    }\n    /**\n     * Checks if the document includes a value at `path`.\n     */\n    hasIn(path) {\n        if (Collection.isEmptyPath(path))\n            return this.contents !== undefined;\n        return Node.isCollection(this.contents) ? this.contents.hasIn(path) : false;\n    }\n    /**\n     * Sets a value in this document. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    set(key, value) {\n        if (this.contents == null) {\n            this.contents = Collection.collectionFromPath(this.schema, [key], value);\n        }\n        else if (assertCollection(this.contents)) {\n            this.contents.set(key, value);\n        }\n    }\n    /**\n     * Sets a value in this document. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    setIn(path, value) {\n        if (Collection.isEmptyPath(path))\n            this.contents = value;\n        else if (this.contents == null) {\n            this.contents = Collection.collectionFromPath(this.schema, Array.from(path), value);\n        }\n        else if (assertCollection(this.contents)) {\n            this.contents.setIn(path, value);\n        }\n    }\n    /**\n     * Change the YAML version and schema used by the document.\n     *\n     * Overrides all previously set schema options\n     */\n    setSchema(version, options) {\n        let _options;\n        switch (String(version)) {\n            case '1.1':\n                this.directives.yaml.version = '1.1';\n                _options = Object.assign({ merge: true, resolveKnownTags: false, schema: 'yaml-1.1' }, options);\n                break;\n            case '1.2':\n                this.directives.yaml.version = '1.2';\n                _options = Object.assign({ merge: false, resolveKnownTags: true, schema: 'core' }, options);\n                break;\n            default: {\n                const sv = JSON.stringify(version);\n                throw new Error(`Expected '1.1' or '1.2' as version, but found: ${sv}`);\n            }\n        }\n        this.schema = new Schema.Schema(_options);\n    }\n    // json & jsonArg are only used from toJSON()\n    toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {\n        const ctx = {\n            anchors: new Map(),\n            doc: this,\n            keep: !json,\n            mapAsMap: mapAsMap === true,\n            mapKeyWarned: false,\n            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100,\n            stringify: stringify.stringify\n        };\n        const res = toJS.toJS(this.contents, jsonArg || '', ctx);\n        if (typeof onAnchor === 'function')\n            for (const { count, res } of ctx.anchors.values())\n                onAnchor(res, count);\n        return typeof reviver === 'function'\n            ? applyReviver.applyReviver(reviver, { '': res }, '', res)\n            : res;\n    }\n    /**\n     * A JSON representation of the document `contents`.\n     *\n     * @param jsonArg Used by `JSON.stringify` to indicate the array index or\n     *   property name.\n     */\n    toJSON(jsonArg, onAnchor) {\n        return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });\n    }\n    /** A YAML representation of the document. */\n    toString(options = {}) {\n        if (this.errors.length > 0)\n            throw new Error('Document with errors cannot be stringified');\n        if ('indent' in options &&\n            (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {\n            const s = JSON.stringify(options.indent);\n            throw new Error(`\"indent\" option must be a positive integer, not ${s}`);\n        }\n        return stringifyDocument.stringifyDocument(this, options);\n    }\n}\nfunction assertCollection(contents) {\n    if (Node.isCollection(contents))\n        return true;\n    throw new Error('Expected a YAML collection as document contents');\n}\n\nexports.Document = Document;\n","'use strict';\n\nvar Node = require('../nodes/Node.js');\nvar visit = require('../visit.js');\n\n/**\n * Verify that the input string is a valid anchor.\n *\n * Will throw on errors.\n */\nfunction anchorIsValid(anchor) {\n    if (/[\\x00-\\x19\\s,[\\]{}]/.test(anchor)) {\n        const sa = JSON.stringify(anchor);\n        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;\n        throw new Error(msg);\n    }\n    return true;\n}\nfunction anchorNames(root) {\n    const anchors = new Set();\n    visit.visit(root, {\n        Value(_key, node) {\n            if (node.anchor)\n                anchors.add(node.anchor);\n        }\n    });\n    return anchors;\n}\n/** Find a new anchor name with the given `prefix` and a one-indexed suffix. */\nfunction findNewAnchor(prefix, exclude) {\n    for (let i = 1; true; ++i) {\n        const name = `${prefix}${i}`;\n        if (!exclude.has(name))\n            return name;\n    }\n}\nfunction createNodeAnchors(doc, prefix) {\n    const aliasObjects = [];\n    const sourceObjects = new Map();\n    let prevAnchors = null;\n    return {\n        onAnchor(source) {\n            aliasObjects.push(source);\n            if (!prevAnchors)\n                prevAnchors = anchorNames(doc);\n            const anchor = findNewAnchor(prefix, prevAnchors);\n            prevAnchors.add(anchor);\n            return anchor;\n        },\n        /**\n         * With circular references, the source node is only resolved after all\n         * of its child nodes are. This is why anchors are set only after all of\n         * the nodes have been created.\n         */\n        setAnchors() {\n            for (const source of aliasObjects) {\n                const ref = sourceObjects.get(source);\n                if (typeof ref === 'object' &&\n                    ref.anchor &&\n                    (Node.isScalar(ref.node) || Node.isCollection(ref.node))) {\n                    ref.node.anchor = ref.anchor;\n                }\n                else {\n                    const error = new Error('Failed to resolve repeated object (this should not happen)');\n                    error.source = source;\n                    throw error;\n                }\n            }\n        },\n        sourceObjects\n    };\n}\n\nexports.anchorIsValid = anchorIsValid;\nexports.anchorNames = anchorNames;\nexports.createNodeAnchors = createNodeAnchors;\nexports.findNewAnchor = findNewAnchor;\n","'use strict';\n\n/**\n * Applies the JSON.parse reviver algorithm as defined in the ECMA-262 spec,\n * in section 24.5.1.1 \"Runtime Semantics: InternalizeJSONProperty\" of the\n * 2021 edition: https://tc39.es/ecma262/#sec-json.parse\n *\n * Includes extensions for handling Map and Set objects.\n */\nfunction applyReviver(reviver, obj, key, val) {\n    if (val && typeof val === 'object') {\n        if (Array.isArray(val)) {\n            for (let i = 0, len = val.length; i < len; ++i) {\n                const v0 = val[i];\n                const v1 = applyReviver(reviver, val, String(i), v0);\n                if (v1 === undefined)\n                    delete val[i];\n                else if (v1 !== v0)\n                    val[i] = v1;\n            }\n        }\n        else if (val instanceof Map) {\n            for (const k of Array.from(val.keys())) {\n                const v0 = val.get(k);\n                const v1 = applyReviver(reviver, val, k, v0);\n                if (v1 === undefined)\n                    val.delete(k);\n                else if (v1 !== v0)\n                    val.set(k, v1);\n            }\n        }\n        else if (val instanceof Set) {\n            for (const v0 of Array.from(val)) {\n                const v1 = applyReviver(reviver, val, v0, v0);\n                if (v1 === undefined)\n                    val.delete(v0);\n                else if (v1 !== v0) {\n                    val.delete(v0);\n                    val.add(v1);\n                }\n            }\n        }\n        else {\n            for (const [k, v0] of Object.entries(val)) {\n                const v1 = applyReviver(reviver, val, k, v0);\n                if (v1 === undefined)\n                    delete val[k];\n                else if (v1 !== v0)\n                    val[k] = v1;\n            }\n        }\n    }\n    return reviver.call(obj, key, val);\n}\n\nexports.applyReviver = applyReviver;\n","'use strict';\n\nvar Alias = require('../nodes/Alias.js');\nvar Node = require('../nodes/Node.js');\nvar Scalar = require('../nodes/Scalar.js');\n\nconst defaultTagPrefix = 'tag:yaml.org,2002:';\nfunction findTagObject(value, tagName, tags) {\n    if (tagName) {\n        const match = tags.filter(t => t.tag === tagName);\n        const tagObj = match.find(t => !t.format) || match[0];\n        if (!tagObj)\n            throw new Error(`Tag ${tagName} not found`);\n        return tagObj;\n    }\n    return tags.find(t => t.identify && t.identify(value) && !t.format);\n}\nfunction createNode(value, tagName, ctx) {\n    var _a, _b;\n    if (Node.isNode(value))\n        return value;\n    if (Node.isPair(value)) {\n        const map = (_b = (_a = ctx.schema[Node.MAP]).createNode) === null || _b === void 0 ? void 0 : _b.call(_a, ctx.schema, null, ctx);\n        map.items.push(value);\n        return map;\n    }\n    if (value instanceof String ||\n        value instanceof Number ||\n        value instanceof Boolean ||\n        (typeof BigInt === 'function' && value instanceof BigInt) // not supported everywhere\n    ) {\n        // https://tc39.es/ecma262/#sec-serializejsonproperty\n        value = value.valueOf();\n    }\n    const { onAnchor, onTagObj, schema, sourceObjects } = ctx;\n    // Detect duplicate references to the same object & use Alias nodes for all\n    // after first. The `ref` wrapper allows for circular references to resolve.\n    let ref = undefined;\n    if (value && typeof value === 'object') {\n        ref = sourceObjects.get(value);\n        if (ref) {\n            if (!ref.anchor)\n                ref.anchor = onAnchor(value);\n            return new Alias.Alias(ref.anchor);\n        }\n        else {\n            ref = { anchor: null, node: null };\n            sourceObjects.set(value, ref);\n        }\n    }\n    if (tagName && tagName.startsWith('!!'))\n        tagName = defaultTagPrefix + tagName.slice(2);\n    let tagObj = findTagObject(value, tagName, schema.tags);\n    if (!tagObj) {\n        if (value && typeof value.toJSON === 'function')\n            value = value.toJSON();\n        if (!value || typeof value !== 'object') {\n            const node = new Scalar.Scalar(value);\n            if (ref)\n                ref.node = node;\n            return node;\n        }\n        tagObj =\n            value instanceof Map\n                ? schema[Node.MAP]\n                : Symbol.iterator in Object(value)\n                    ? schema[Node.SEQ]\n                    : schema[Node.MAP];\n    }\n    if (onTagObj) {\n        onTagObj(tagObj);\n        delete ctx.onTagObj;\n    }\n    const node = (tagObj === null || tagObj === void 0 ? void 0 : tagObj.createNode)\n        ? tagObj.createNode(ctx.schema, value, ctx)\n        : new Scalar.Scalar(value);\n    if (tagName)\n        node.tag = tagName;\n    if (ref)\n        ref.node = node;\n    return node;\n}\n\nexports.createNode = createNode;\n","'use strict';\n\nvar Node = require('../nodes/Node.js');\nvar visit = require('../visit.js');\n\nconst escapeChars = {\n    '!': '%21',\n    ',': '%2C',\n    '[': '%5B',\n    ']': '%5D',\n    '{': '%7B',\n    '}': '%7D'\n};\nconst escapeTagName = (tn) => tn.replace(/[!,[\\]{}]/g, ch => escapeChars[ch]);\nclass Directives {\n    constructor(yaml, tags) {\n        /**\n         * The directives-end/doc-start marker `---`. If `null`, a marker may still be\n         * included in the document's stringified representation.\n         */\n        this.marker = null;\n        this.yaml = Object.assign({}, Directives.defaultYaml, yaml);\n        this.tags = Object.assign({}, Directives.defaultTags, tags);\n    }\n    /**\n     * During parsing, get a Directives instance for the current document and\n     * update the stream state according to the current version's spec.\n     */\n    atDocument() {\n        const res = new Directives(this.yaml, this.tags);\n        switch (this.yaml.version) {\n            case '1.1':\n                this.atNextDocument = true;\n                break;\n            case '1.2':\n                this.atNextDocument = false;\n                this.yaml = {\n                    explicit: Directives.defaultYaml.explicit,\n                    version: '1.2'\n                };\n                this.tags = Object.assign({}, Directives.defaultTags);\n                break;\n        }\n        return res;\n    }\n    /**\n     * @param onError - May be called even if the action was successful\n     * @returns `true` on success\n     */\n    add(line, onError) {\n        if (this.atNextDocument) {\n            this.yaml = { explicit: Directives.defaultYaml.explicit, version: '1.1' };\n            this.tags = Object.assign({}, Directives.defaultTags);\n            this.atNextDocument = false;\n        }\n        const parts = line.trim().split(/[ \\t]+/);\n        const name = parts.shift();\n        switch (name) {\n            case '%TAG': {\n                if (parts.length !== 2) {\n                    onError(0, '%TAG directive should contain exactly two parts');\n                    if (parts.length < 2)\n                        return false;\n                }\n                const [handle, prefix] = parts;\n                this.tags[handle] = prefix;\n                return true;\n            }\n            case '%YAML': {\n                this.yaml.explicit = true;\n                if (parts.length < 1) {\n                    onError(0, '%YAML directive should contain exactly one part');\n                    return false;\n                }\n                const [version] = parts;\n                if (version === '1.1' || version === '1.2') {\n                    this.yaml.version = version;\n                    return true;\n                }\n                else {\n                    onError(6, `Unsupported YAML version ${version}`, true);\n                    return false;\n                }\n            }\n            default:\n                onError(0, `Unknown directive ${name}`, true);\n                return false;\n        }\n    }\n    /**\n     * Resolves a tag, matching handles to those defined in %TAG directives.\n     *\n     * @returns Resolved tag, which may also be the non-specific tag `'!'` or a\n     *   `'!local'` tag, or `null` if unresolvable.\n     */\n    tagName(source, onError) {\n        if (source === '!')\n            return '!'; // non-specific tag\n        if (source[0] !== '!') {\n            onError(`Not a valid tag: ${source}`);\n            return null;\n        }\n        if (source[1] === '<') {\n            const verbatim = source.slice(2, -1);\n            if (verbatim === '!' || verbatim === '!!') {\n                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);\n                return null;\n            }\n            if (source[source.length - 1] !== '>')\n                onError('Verbatim tags must end with a >');\n            return verbatim;\n        }\n        const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/);\n        if (!suffix)\n            onError(`The ${source} tag has no suffix`);\n        const prefix = this.tags[handle];\n        if (prefix)\n            return prefix + decodeURIComponent(suffix);\n        if (handle === '!')\n            return source; // local tag\n        onError(`Could not resolve tag: ${source}`);\n        return null;\n    }\n    /**\n     * Given a fully resolved tag, returns its printable string form,\n     * taking into account current tag prefixes and defaults.\n     */\n    tagString(tag) {\n        for (const [handle, prefix] of Object.entries(this.tags)) {\n            if (tag.startsWith(prefix))\n                return handle + escapeTagName(tag.substring(prefix.length));\n        }\n        return tag[0] === '!' ? tag : `!<${tag}>`;\n    }\n    toString(doc) {\n        const lines = this.yaml.explicit\n            ? [`%YAML ${this.yaml.version || '1.2'}`]\n            : [];\n        const tagEntries = Object.entries(this.tags);\n        let tagNames;\n        if (doc && tagEntries.length > 0 && Node.isNode(doc.contents)) {\n            const tags = {};\n            visit.visit(doc.contents, (_key, node) => {\n                if (Node.isNode(node) && node.tag)\n                    tags[node.tag] = true;\n            });\n            tagNames = Object.keys(tags);\n        }\n        else\n            tagNames = [];\n        for (const [handle, prefix] of tagEntries) {\n            if (handle === '!!' && prefix === 'tag:yaml.org,2002:')\n                continue;\n            if (!doc || tagNames.some(tn => tn.startsWith(prefix)))\n                lines.push(`%TAG ${handle} ${prefix}`);\n        }\n        return lines.join('\\n');\n    }\n}\nDirectives.defaultYaml = { explicit: false, version: '1.2' };\nDirectives.defaultTags = { '!!': 'tag:yaml.org,2002:' };\n\nexports.Directives = Directives;\n","'use strict';\n\nclass YAMLError extends Error {\n    constructor(name, pos, code, message) {\n        super();\n        this.name = name;\n        this.code = code;\n        this.message = message;\n        this.pos = pos;\n    }\n}\nclass YAMLParseError extends YAMLError {\n    constructor(pos, code, message) {\n        super('YAMLParseError', pos, code, message);\n    }\n}\nclass YAMLWarning extends YAMLError {\n    constructor(pos, code, message) {\n        super('YAMLWarning', pos, code, message);\n    }\n}\nconst prettifyError = (src, lc) => (error) => {\n    if (error.pos[0] === -1)\n        return;\n    error.linePos = error.pos.map(pos => lc.linePos(pos));\n    const { line, col } = error.linePos[0];\n    error.message += ` at line ${line}, column ${col}`;\n    let ci = col - 1;\n    let lineStr = src\n        .substring(lc.lineStarts[line - 1], lc.lineStarts[line])\n        .replace(/[\\n\\r]+$/, '');\n    // Trim to max 80 chars, keeping col position near the middle\n    if (ci >= 60 && lineStr.length > 80) {\n        const trimStart = Math.min(ci - 39, lineStr.length - 79);\n        lineStr = '…' + lineStr.substring(trimStart);\n        ci -= trimStart - 1;\n    }\n    if (lineStr.length > 80)\n        lineStr = lineStr.substring(0, 79) + '…';\n    // Include previous line in context if pointing at line start\n    if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {\n        // Regexp won't match if start is trimmed\n        let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);\n        if (prev.length > 80)\n            prev = prev.substring(0, 79) + '…\\n';\n        lineStr = prev + lineStr;\n    }\n    if (/[^ ]/.test(lineStr)) {\n        let count = 1;\n        const end = error.linePos[1];\n        if (end && end.line === line && end.col > col) {\n            count = Math.min(end.col - col, 80 - ci);\n        }\n        const pointer = ' '.repeat(ci) + '^'.repeat(count);\n        error.message += `:\\n\\n${lineStr}\\n${pointer}\\n`;\n    }\n};\n\nexports.YAMLError = YAMLError;\nexports.YAMLParseError = YAMLParseError;\nexports.YAMLWarning = YAMLWarning;\nexports.prettifyError = prettifyError;\n","'use strict';\n\nvar composer = require('./compose/composer.js');\nvar Document = require('./doc/Document.js');\nvar Schema = require('./schema/Schema.js');\nvar errors = require('./errors.js');\nvar Alias = require('./nodes/Alias.js');\nvar Node = require('./nodes/Node.js');\nvar Pair = require('./nodes/Pair.js');\nvar Scalar = require('./nodes/Scalar.js');\nvar YAMLMap = require('./nodes/YAMLMap.js');\nvar YAMLSeq = require('./nodes/YAMLSeq.js');\nvar options = require('./options.js');\nvar cst = require('./parse/cst.js');\nvar lexer = require('./parse/lexer.js');\nvar lineCounter = require('./parse/line-counter.js');\nvar parser = require('./parse/parser.js');\nvar publicApi = require('./public-api.js');\nvar visit = require('./visit.js');\n\n\n\nexports.Composer = composer.Composer;\nexports.Document = Document.Document;\nexports.Schema = Schema.Schema;\nexports.YAMLError = errors.YAMLError;\nexports.YAMLParseError = errors.YAMLParseError;\nexports.YAMLWarning = errors.YAMLWarning;\nexports.Alias = Alias.Alias;\nexports.isAlias = Node.isAlias;\nexports.isCollection = Node.isCollection;\nexports.isDocument = Node.isDocument;\nexports.isMap = Node.isMap;\nexports.isNode = Node.isNode;\nexports.isPair = Node.isPair;\nexports.isScalar = Node.isScalar;\nexports.isSeq = Node.isSeq;\nexports.Pair = Pair.Pair;\nexports.Scalar = Scalar.Scalar;\nexports.YAMLMap = YAMLMap.YAMLMap;\nexports.YAMLSeq = YAMLSeq.YAMLSeq;\nexports.defaultOptions = options.defaultOptions;\nexports.CST = cst;\nexports.Lexer = lexer.Lexer;\nexports.LineCounter = lineCounter.LineCounter;\nexports.Parser = parser.Parser;\nexports.parse = publicApi.parse;\nexports.parseAllDocuments = publicApi.parseAllDocuments;\nexports.parseDocument = publicApi.parseDocument;\nexports.stringify = publicApi.stringify;\nexports.visit = visit.visit;\n","'use strict';\n\nfunction debug(logLevel, ...messages) {\n    if (logLevel === 'debug')\n        console.log(...messages);\n}\nfunction warn(logLevel, warning) {\n    if (logLevel === 'debug' || logLevel === 'warn') {\n        if (typeof process !== 'undefined' && process.emitWarning)\n            process.emitWarning(warning);\n        else\n            console.warn(warning);\n    }\n}\n\nexports.debug = debug;\nexports.warn = warn;\n","'use strict';\n\nvar anchors = require('../doc/anchors.js');\nvar visit = require('../visit.js');\nvar Node = require('./Node.js');\n\nclass Alias extends Node.NodeBase {\n    constructor(source) {\n        super(Node.ALIAS);\n        this.source = source;\n        Object.defineProperty(this, 'tag', {\n            set() {\n                throw new Error('Alias nodes cannot have tags');\n            }\n        });\n    }\n    /**\n     * Resolve the value of this alias within `doc`, finding the last\n     * instance of the `source` anchor before this node.\n     */\n    resolve(doc) {\n        let found = undefined;\n        visit.visit(doc, {\n            Node: (_key, node) => {\n                if (node === this)\n                    return visit.visit.BREAK;\n                if (node.anchor === this.source)\n                    found = node;\n            }\n        });\n        return found;\n    }\n    toJSON(_arg, ctx) {\n        if (!ctx)\n            return { source: this.source };\n        const { anchors, doc, maxAliasCount } = ctx;\n        const source = this.resolve(doc);\n        if (!source) {\n            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n            throw new ReferenceError(msg);\n        }\n        const data = anchors.get(source);\n        /* istanbul ignore if */\n        if (!data || data.res === undefined) {\n            const msg = 'This should not happen: Alias anchor was not resolved?';\n            throw new ReferenceError(msg);\n        }\n        if (maxAliasCount >= 0) {\n            data.count += 1;\n            if (data.aliasCount === 0)\n                data.aliasCount = getAliasCount(doc, source, anchors);\n            if (data.count * data.aliasCount > maxAliasCount) {\n                const msg = 'Excessive alias count indicates a resource exhaustion attack';\n                throw new ReferenceError(msg);\n            }\n        }\n        return data.res;\n    }\n    toString(ctx, _onComment, _onChompKeep) {\n        const src = `*${this.source}`;\n        if (ctx) {\n            anchors.anchorIsValid(this.source);\n            if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {\n                const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n                throw new Error(msg);\n            }\n            if (ctx.implicitKey)\n                return `${src} `;\n        }\n        return src;\n    }\n}\nfunction getAliasCount(doc, node, anchors) {\n    if (Node.isAlias(node)) {\n        const source = node.resolve(doc);\n        const anchor = anchors && source && anchors.get(source);\n        return anchor ? anchor.count * anchor.aliasCount : 0;\n    }\n    else if (Node.isCollection(node)) {\n        let count = 0;\n        for (const item of node.items) {\n            const c = getAliasCount(doc, item, anchors);\n            if (c > count)\n                count = c;\n        }\n        return count;\n    }\n    else if (Node.isPair(node)) {\n        const kc = getAliasCount(doc, node.key, anchors);\n        const vc = getAliasCount(doc, node.value, anchors);\n        return Math.max(kc, vc);\n    }\n    return 1;\n}\n\nexports.Alias = Alias;\n","'use strict';\n\nvar createNode = require('../doc/createNode.js');\nvar Node = require('./Node.js');\n\nfunction collectionFromPath(schema, path, value) {\n    let v = value;\n    for (let i = path.length - 1; i >= 0; --i) {\n        const k = path[i];\n        if (typeof k === 'number' && Number.isInteger(k) && k >= 0) {\n            const a = [];\n            a[k] = v;\n            v = a;\n        }\n        else {\n            const o = {};\n            Object.defineProperty(o, typeof k === 'symbol' ? k : String(k), {\n                value: v,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n            v = o;\n        }\n    }\n    return createNode.createNode(v, undefined, {\n        onAnchor() {\n            throw new Error('Repeated objects are not supported here');\n        },\n        schema,\n        sourceObjects: new Map()\n    });\n}\n// null, undefined, or an empty non-string iterable (e.g. [])\nconst isEmptyPath = (path) => path == null ||\n    (typeof path === 'object' && !!path[Symbol.iterator]().next().done);\nclass Collection extends Node.NodeBase {\n    constructor(type, schema) {\n        super(type);\n        Object.defineProperty(this, 'schema', {\n            value: schema,\n            configurable: true,\n            enumerable: false,\n            writable: true\n        });\n    }\n    /**\n     * Adds a value to the collection. For `!!map` and `!!omap` the value must\n     * be a Pair instance or a `{ key, value }` object, which may not have a key\n     * that already exists in the map.\n     */\n    addIn(path, value) {\n        if (isEmptyPath(path))\n            this.add(value);\n        else {\n            const [key, ...rest] = path;\n            const node = this.get(key, true);\n            if (Node.isCollection(node))\n                node.addIn(rest, value);\n            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n    /**\n     * Removes a value from the collection.\n     * @returns `true` if the item was found and removed.\n     */\n    deleteIn([key, ...rest]) {\n        if (rest.length === 0)\n            return this.delete(key);\n        const node = this.get(key, true);\n        if (Node.isCollection(node))\n            return node.deleteIn(rest);\n        else\n            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    getIn([key, ...rest], keepScalar) {\n        const node = this.get(key, true);\n        if (rest.length === 0)\n            return !keepScalar && Node.isScalar(node) ? node.value : node;\n        else\n            return Node.isCollection(node) ? node.getIn(rest, keepScalar) : undefined;\n    }\n    hasAllNullValues(allowScalar) {\n        return this.items.every(node => {\n            if (!Node.isPair(node))\n                return false;\n            const n = node.value;\n            return (n == null ||\n                (allowScalar &&\n                    Node.isScalar(n) &&\n                    n.value == null &&\n                    !n.commentBefore &&\n                    !n.comment &&\n                    !n.tag));\n        });\n    }\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     */\n    hasIn([key, ...rest]) {\n        if (rest.length === 0)\n            return this.has(key);\n        const node = this.get(key, true);\n        return Node.isCollection(node) ? node.hasIn(rest) : false;\n    }\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    setIn([key, ...rest], value) {\n        if (rest.length === 0) {\n            this.set(key, value);\n        }\n        else {\n            const node = this.get(key, true);\n            if (Node.isCollection(node))\n                node.setIn(rest, value);\n            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n}\nCollection.maxFlowStringSingleLineLength = 60;\n\nexports.Collection = Collection;\nexports.collectionFromPath = collectionFromPath;\nexports.isEmptyPath = isEmptyPath;\n","'use strict';\n\nconst ALIAS = Symbol.for('yaml.alias');\nconst DOC = Symbol.for('yaml.document');\nconst MAP = Symbol.for('yaml.map');\nconst PAIR = Symbol.for('yaml.pair');\nconst SCALAR = Symbol.for('yaml.scalar');\nconst SEQ = Symbol.for('yaml.seq');\nconst NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case MAP:\n            case SEQ:\n                return true;\n        }\n    return false;\n}\nfunction isNode(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case ALIAS:\n            case MAP:\n            case SCALAR:\n            case SEQ:\n                return true;\n        }\n    return false;\n}\nconst hasAnchor = (node) => (isScalar(node) || isCollection(node)) && !!node.anchor;\nclass NodeBase {\n    constructor(type) {\n        Object.defineProperty(this, NODE_TYPE, { value: type });\n    }\n}\n\nexports.ALIAS = ALIAS;\nexports.DOC = DOC;\nexports.MAP = MAP;\nexports.NODE_TYPE = NODE_TYPE;\nexports.NodeBase = NodeBase;\nexports.PAIR = PAIR;\nexports.SCALAR = SCALAR;\nexports.SEQ = SEQ;\nexports.hasAnchor = hasAnchor;\nexports.isAlias = isAlias;\nexports.isCollection = isCollection;\nexports.isDocument = isDocument;\nexports.isMap = isMap;\nexports.isNode = isNode;\nexports.isPair = isPair;\nexports.isScalar = isScalar;\nexports.isSeq = isSeq;\n","'use strict';\n\nvar createNode = require('../doc/createNode.js');\nvar stringifyPair = require('../stringify/stringifyPair.js');\nvar addPairToJSMap = require('./addPairToJSMap.js');\nvar Node = require('./Node.js');\n\nfunction createPair(key, value, ctx) {\n    const k = createNode.createNode(key, undefined, ctx);\n    const v = createNode.createNode(value, undefined, ctx);\n    return new Pair(k, v);\n}\nclass Pair {\n    constructor(key, value = null) {\n        Object.defineProperty(this, Node.NODE_TYPE, { value: Node.PAIR });\n        this.key = key;\n        this.value = value;\n    }\n    toJSON(_, ctx) {\n        const pair = ctx && ctx.mapAsMap ? new Map() : {};\n        return addPairToJSMap.addPairToJSMap(ctx, pair, this);\n    }\n    toString(ctx, onComment, onChompKeep) {\n        return ctx && ctx.doc\n            ? stringifyPair.stringifyPair(this, ctx, onComment, onChompKeep)\n            : JSON.stringify(this);\n    }\n}\n\nexports.Pair = Pair;\nexports.createPair = createPair;\n","'use strict';\n\nvar Node = require('./Node.js');\nvar toJS = require('./toJS.js');\n\nconst isScalarValue = (value) => !value || (typeof value !== 'function' && typeof value !== 'object');\nclass Scalar extends Node.NodeBase {\n    constructor(value) {\n        super(Node.SCALAR);\n        this.value = value;\n    }\n    toJSON(arg, ctx) {\n        return ctx && ctx.keep ? this.value : toJS.toJS(this.value, arg, ctx);\n    }\n    toString() {\n        return String(this.value);\n    }\n}\nScalar.BLOCK_FOLDED = 'BLOCK_FOLDED';\nScalar.BLOCK_LITERAL = 'BLOCK_LITERAL';\nScalar.PLAIN = 'PLAIN';\nScalar.QUOTE_DOUBLE = 'QUOTE_DOUBLE';\nScalar.QUOTE_SINGLE = 'QUOTE_SINGLE';\n\nexports.Scalar = Scalar;\nexports.isScalarValue = isScalarValue;\n","'use strict';\n\nvar stringifyCollection = require('../stringify/stringifyCollection.js');\nvar addPairToJSMap = require('./addPairToJSMap.js');\nvar Collection = require('./Collection.js');\nvar Node = require('./Node.js');\nvar Pair = require('./Pair.js');\nvar Scalar = require('./Scalar.js');\n\nfunction findPair(items, key) {\n    const k = Node.isScalar(key) ? key.value : key;\n    for (const it of items) {\n        if (Node.isPair(it)) {\n            if (it.key === key || it.key === k)\n                return it;\n            if (Node.isScalar(it.key) && it.key.value === k)\n                return it;\n        }\n    }\n    return undefined;\n}\nclass YAMLMap extends Collection.Collection {\n    constructor(schema) {\n        super(Node.MAP, schema);\n        this.items = [];\n    }\n    static get tagName() {\n        return 'tag:yaml.org,2002:map';\n    }\n    /**\n     * Adds a value to the collection.\n     *\n     * @param overwrite - If not set `true`, using a key that is already in the\n     *   collection will throw. Otherwise, overwrites the previous value.\n     */\n    add(pair, overwrite) {\n        let _pair;\n        if (Node.isPair(pair))\n            _pair = pair;\n        else if (!pair || typeof pair !== 'object' || !('key' in pair)) {\n            // In TypeScript, this never happens.\n            _pair = new Pair.Pair(pair, pair.value);\n        }\n        else\n            _pair = new Pair.Pair(pair.key, pair.value);\n        const prev = findPair(this.items, _pair.key);\n        const sortEntries = this.schema && this.schema.sortMapEntries;\n        if (prev) {\n            if (!overwrite)\n                throw new Error(`Key ${_pair.key} already set`);\n            // For scalars, keep the old node & its comments and anchors\n            if (Node.isScalar(prev.value) && Scalar.isScalarValue(_pair.value))\n                prev.value.value = _pair.value;\n            else\n                prev.value = _pair.value;\n        }\n        else if (sortEntries) {\n            const i = this.items.findIndex(item => sortEntries(_pair, item) < 0);\n            if (i === -1)\n                this.items.push(_pair);\n            else\n                this.items.splice(i, 0, _pair);\n        }\n        else {\n            this.items.push(_pair);\n        }\n    }\n    delete(key) {\n        const it = findPair(this.items, key);\n        if (!it)\n            return false;\n        const del = this.items.splice(this.items.indexOf(it), 1);\n        return del.length > 0;\n    }\n    get(key, keepScalar) {\n        const it = findPair(this.items, key);\n        const node = it && it.value;\n        return !keepScalar && Node.isScalar(node) ? node.value : node;\n    }\n    has(key) {\n        return !!findPair(this.items, key);\n    }\n    set(key, value) {\n        this.add(new Pair.Pair(key, value), true);\n    }\n    /**\n     * @param ctx - Conversion context, originally set in Document#toJS()\n     * @param {Class} Type - If set, forces the returned collection type\n     * @returns Instance of Type, Map, or Object\n     */\n    toJSON(_, ctx, Type) {\n        const map = Type ? new Type() : ctx && ctx.mapAsMap ? new Map() : {};\n        if (ctx && ctx.onCreate)\n            ctx.onCreate(map);\n        for (const item of this.items)\n            addPairToJSMap.addPairToJSMap(ctx, map, item);\n        return map;\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        for (const item of this.items) {\n            if (!Node.isPair(item))\n                throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);\n        }\n        if (!ctx.allNullValues && this.hasAllNullValues(false))\n            ctx = Object.assign({}, ctx, { allNullValues: true });\n        return stringifyCollection.stringifyCollection(this, ctx, {\n            blockItem: n => n.str,\n            flowChars: { start: '{', end: '}' },\n            itemIndent: ctx.indent || '',\n            onChompKeep,\n            onComment\n        });\n    }\n}\n\nexports.YAMLMap = YAMLMap;\nexports.findPair = findPair;\n","'use strict';\n\nvar stringifyCollection = require('../stringify/stringifyCollection.js');\nvar Collection = require('./Collection.js');\nvar Node = require('./Node.js');\nvar Scalar = require('./Scalar.js');\nvar toJS = require('./toJS.js');\n\nclass YAMLSeq extends Collection.Collection {\n    constructor(schema) {\n        super(Node.SEQ, schema);\n        this.items = [];\n    }\n    static get tagName() {\n        return 'tag:yaml.org,2002:seq';\n    }\n    add(value) {\n        this.items.push(value);\n    }\n    /**\n     * Removes a value from the collection.\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     *\n     * @returns `true` if the item was found and removed.\n     */\n    delete(key) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            return false;\n        const del = this.items.splice(idx, 1);\n        return del.length > 0;\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     */\n    get(key, keepScalar) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            return undefined;\n        const it = this.items[idx];\n        return !keepScalar && Node.isScalar(it) ? it.value : it;\n    }\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     */\n    has(key) {\n        const idx = asItemIndex(key);\n        return typeof idx === 'number' && idx < this.items.length;\n    }\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     *\n     * If `key` does not contain a representation of an integer, this will throw.\n     * It may be wrapped in a `Scalar`.\n     */\n    set(key, value) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            throw new Error(`Expected a valid index, not ${key}.`);\n        const prev = this.items[idx];\n        if (Node.isScalar(prev) && Scalar.isScalarValue(value))\n            prev.value = value;\n        else\n            this.items[idx] = value;\n    }\n    toJSON(_, ctx) {\n        const seq = [];\n        if (ctx && ctx.onCreate)\n            ctx.onCreate(seq);\n        let i = 0;\n        for (const item of this.items)\n            seq.push(toJS.toJS(item, String(i++), ctx));\n        return seq;\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        return stringifyCollection.stringifyCollection(this, ctx, {\n            blockItem: n => (n.comment ? n.str : `- ${n.str}`),\n            flowChars: { start: '[', end: ']' },\n            itemIndent: (ctx.indent || '') + '  ',\n            onChompKeep,\n            onComment\n        });\n    }\n}\nfunction asItemIndex(key) {\n    let idx = Node.isScalar(key) ? key.value : key;\n    if (idx && typeof idx === 'string')\n        idx = Number(idx);\n    return typeof idx === 'number' && Number.isInteger(idx) && idx >= 0\n        ? idx\n        : null;\n}\n\nexports.YAMLSeq = YAMLSeq;\n","'use strict';\n\nvar log = require('../log.js');\nvar stringify = require('../stringify/stringify.js');\nvar Node = require('./Node.js');\nvar Scalar = require('./Scalar.js');\nvar toJS = require('./toJS.js');\n\nconst MERGE_KEY = '<<';\nfunction addPairToJSMap(ctx, map, { key, value }) {\n    if (ctx && ctx.doc.schema.merge && isMergeKey(key)) {\n        if (Node.isSeq(value))\n            for (const it of value.items)\n                mergeToJSMap(ctx, map, it);\n        else if (Array.isArray(value))\n            for (const it of value)\n                mergeToJSMap(ctx, map, it);\n        else\n            mergeToJSMap(ctx, map, value);\n    }\n    else {\n        const jsKey = toJS.toJS(key, '', ctx);\n        if (map instanceof Map) {\n            map.set(jsKey, toJS.toJS(value, jsKey, ctx));\n        }\n        else if (map instanceof Set) {\n            map.add(jsKey);\n        }\n        else {\n            const stringKey = stringifyKey(key, jsKey, ctx);\n            const jsValue = toJS.toJS(value, stringKey, ctx);\n            if (stringKey in map)\n                Object.defineProperty(map, stringKey, {\n                    value: jsValue,\n                    writable: true,\n                    enumerable: true,\n                    configurable: true\n                });\n            else\n                map[stringKey] = jsValue;\n        }\n    }\n    return map;\n}\nconst isMergeKey = (key) => key === MERGE_KEY ||\n    (Node.isScalar(key) &&\n        key.value === MERGE_KEY &&\n        (!key.type || key.type === Scalar.Scalar.PLAIN));\n// If the value associated with a merge key is a single mapping node, each of\n// its key/value pairs is inserted into the current mapping, unless the key\n// already exists in it. If the value associated with the merge key is a\n// sequence, then this sequence is expected to contain mapping nodes and each\n// of these nodes is merged in turn according to its order in the sequence.\n// Keys in mapping nodes earlier in the sequence override keys specified in\n// later mapping nodes. -- http://yaml.org/type/merge.html\nfunction mergeToJSMap(ctx, map, value) {\n    const source = ctx && Node.isAlias(value) ? value.resolve(ctx.doc) : value;\n    if (!Node.isMap(source))\n        throw new Error('Merge sources must be maps or map aliases');\n    const srcMap = source.toJSON(null, ctx, Map);\n    for (const [key, value] of srcMap) {\n        if (map instanceof Map) {\n            if (!map.has(key))\n                map.set(key, value);\n        }\n        else if (map instanceof Set) {\n            map.add(key);\n        }\n        else if (!Object.prototype.hasOwnProperty.call(map, key)) {\n            Object.defineProperty(map, key, {\n                value,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n        }\n    }\n    return map;\n}\nfunction stringifyKey(key, jsKey, ctx) {\n    if (jsKey === null)\n        return '';\n    if (typeof jsKey !== 'object')\n        return String(jsKey);\n    if (Node.isNode(key) && ctx && ctx.doc) {\n        const strCtx = stringify.createStringifyContext(ctx.doc, {});\n        strCtx.anchors = new Set();\n        for (const node of ctx.anchors.keys())\n            strCtx.anchors.add(node.anchor);\n        strCtx.inFlow = true;\n        strCtx.inStringifyKey = true;\n        const strKey = key.toString(strCtx);\n        if (!ctx.mapKeyWarned) {\n            let jsonStr = JSON.stringify(strKey);\n            if (jsonStr.length > 40)\n                jsonStr = jsonStr.substring(0, 36) + '...\"';\n            log.warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);\n            ctx.mapKeyWarned = true;\n        }\n        return strKey;\n    }\n    return JSON.stringify(jsKey);\n}\n\nexports.addPairToJSMap = addPairToJSMap;\n","'use strict';\n\nvar Node = require('./Node.js');\n\n/**\n * Recursively convert any node or its contents to native JavaScript\n *\n * @param value - The input value\n * @param arg - If `value` defines a `toJSON()` method, use this\n *   as its first argument\n * @param ctx - Conversion context, originally set in Document#toJS(). If\n *   `{ keep: true }` is not set, output should be suitable for JSON\n *   stringification.\n */\nfunction toJS(value, arg, ctx) {\n    if (Array.isArray(value))\n        return value.map((v, i) => toJS(v, String(i), ctx));\n    if (value && typeof value.toJSON === 'function') {\n        if (!ctx || !Node.hasAnchor(value))\n            return value.toJSON(arg, ctx);\n        const data = { aliasCount: 0, count: 1, res: undefined };\n        ctx.anchors.set(value, data);\n        ctx.onCreate = res => {\n            data.res = res;\n            delete ctx.onCreate;\n        };\n        const res = value.toJSON(arg, ctx);\n        if (ctx.onCreate)\n            ctx.onCreate(res);\n        return res;\n    }\n    if (typeof value === 'bigint' && !(ctx && ctx.keep))\n        return Number(value);\n    return value;\n}\n\nexports.toJS = toJS;\n","'use strict';\n\n/**\n * `yaml` defines document-specific options in three places: as an argument of\n * parse, create and stringify calls, in the values of `YAML.defaultOptions`,\n * and in the version-dependent `YAML.Document.defaults` object. Values set in\n * `YAML.defaultOptions` override version-dependent defaults, and argument\n * options override both.\n */\nconst defaultOptions = {\n    intAsBigInt: false,\n    logLevel: 'warn',\n    prettyErrors: true,\n    strict: true,\n    uniqueKeys: true,\n    version: '1.2'\n};\n\nexports.defaultOptions = defaultOptions;\n","'use strict';\n\nvar resolveBlockScalar = require('../compose/resolve-block-scalar.js');\nvar resolveFlowScalar = require('../compose/resolve-flow-scalar.js');\nvar errors = require('../errors.js');\nvar stringifyString = require('../stringify/stringifyString.js');\n\n/**\n * If `token` is a CST flow or block scalar, determine its string value and a few other attributes.\n * Otherwise, return `null`.\n */\nfunction resolveAsScalar(token, strict = true, onError) {\n    if (token) {\n        const _onError = (pos, code, message) => {\n            const offset = typeof pos === 'number' ? pos : Array.isArray(pos) ? pos[0] : pos.offset;\n            if (onError)\n                onError(offset, code, message);\n            else\n                throw new errors.YAMLParseError([offset, offset + 1], code, message);\n        };\n        switch (token.type) {\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return resolveFlowScalar.resolveFlowScalar(token, strict, _onError);\n            case 'block-scalar':\n                return resolveBlockScalar.resolveBlockScalar(token, strict, _onError);\n        }\n    }\n    return null;\n}\n/**\n * Create a new scalar token with `value`\n *\n * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,\n * as this function does not support any schema operations and won't check for such conflicts.\n *\n * @param value The string representation of the value, which will have its content properly indented.\n * @param context.end Comments and whitespace after the end of the value, or after the block scalar header. If undefined, a newline will be added.\n * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.\n * @param context.indent The indent level of the token.\n * @param context.inFlow Is this scalar within a flow collection? This may affect the resolved type of the token's value.\n * @param context.offset The offset position of the token.\n * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.\n */\nfunction createScalarToken(value, context) {\n    var _a;\n    const { implicitKey = false, indent, inFlow = false, offset = -1, type = 'PLAIN' } = context;\n    const source = stringifyString.stringifyString({ type, value }, {\n        implicitKey,\n        indent: indent > 0 ? ' '.repeat(indent) : '',\n        inFlow,\n        options: { lineWidth: -1 }\n    });\n    const end = (_a = context.end) !== null && _a !== void 0 ? _a : [\n        { type: 'newline', offset: -1, indent, source: '\\n' }\n    ];\n    switch (source[0]) {\n        case '|':\n        case '>': {\n            const he = source.indexOf('\\n');\n            const head = source.substring(0, he);\n            const body = source.substring(he + 1) + '\\n';\n            const props = [\n                { type: 'block-scalar-header', offset, indent, source: head }\n            ];\n            if (!addEndtoBlockProps(props, end))\n                props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n            return { type: 'block-scalar', offset, indent, props, source: body };\n        }\n        case '\"':\n            return { type: 'double-quoted-scalar', offset, indent, source, end };\n        case \"'\":\n            return { type: 'single-quoted-scalar', offset, indent, source, end };\n        default:\n            return { type: 'scalar', offset, indent, source, end };\n    }\n}\n/**\n * Set the value of `token` to the given string `value`, overwriting any previous contents and type that it may have.\n *\n * Best efforts are made to retain any comments previously associated with the `token`,\n * though all contents within a collection's `items` will be overwritten.\n *\n * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,\n * as this function does not support any schema operations and won't check for such conflicts.\n *\n * @param token Any token. If it does not include an `indent` value, the value will be stringified as if it were an implicit key.\n * @param value The string representation of the value, which will have its content properly indented.\n * @param context.afterKey In most cases, values after a key should have an additional level of indentation.\n * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.\n * @param context.inFlow Being within a flow collection may affect the resolved type of the token's value.\n * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.\n */\nfunction setScalarValue(token, value, context = {}) {\n    let { afterKey = false, implicitKey = false, inFlow = false, type } = context;\n    let indent = 'indent' in token ? token.indent : null;\n    if (afterKey && typeof indent === 'number')\n        indent += 2;\n    if (!type)\n        switch (token.type) {\n            case 'single-quoted-scalar':\n                type = 'QUOTE_SINGLE';\n                break;\n            case 'double-quoted-scalar':\n                type = 'QUOTE_DOUBLE';\n                break;\n            case 'block-scalar': {\n                const header = token.props[0];\n                if (header.type !== 'block-scalar-header')\n                    throw new Error('Invalid block scalar header');\n                type = header.source[0] === '>' ? 'BLOCK_FOLDED' : 'BLOCK_LITERAL';\n                break;\n            }\n            default:\n                type = 'PLAIN';\n        }\n    const source = stringifyString.stringifyString({ type, value }, {\n        implicitKey: implicitKey || indent === null,\n        indent: indent !== null && indent > 0 ? ' '.repeat(indent) : '',\n        inFlow,\n        options: { lineWidth: -1 }\n    });\n    switch (source[0]) {\n        case '|':\n        case '>':\n            setBlockScalarValue(token, source);\n            break;\n        case '\"':\n            setFlowScalarValue(token, source, 'double-quoted-scalar');\n            break;\n        case \"'\":\n            setFlowScalarValue(token, source, 'single-quoted-scalar');\n            break;\n        default:\n            setFlowScalarValue(token, source, 'scalar');\n    }\n}\nfunction setBlockScalarValue(token, source) {\n    const he = source.indexOf('\\n');\n    const head = source.substring(0, he);\n    const body = source.substring(he + 1) + '\\n';\n    if (token.type === 'block-scalar') {\n        const header = token.props[0];\n        if (header.type !== 'block-scalar-header')\n            throw new Error('Invalid block scalar header');\n        header.source = head;\n        token.source = body;\n    }\n    else {\n        const { offset } = token;\n        const indent = 'indent' in token ? token.indent : -1;\n        const props = [\n            { type: 'block-scalar-header', offset, indent, source: head }\n        ];\n        if (!addEndtoBlockProps(props, 'end' in token ? token.end : undefined))\n            props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n        for (const key of Object.keys(token))\n            if (key !== 'type' && key !== 'offset')\n                delete token[key];\n        Object.assign(token, { type: 'block-scalar', indent, props, source: body });\n    }\n}\n/** @returns `true` if last token is a newline */\nfunction addEndtoBlockProps(props, end) {\n    if (end)\n        for (const st of end)\n            switch (st.type) {\n                case 'space':\n                case 'comment':\n                    props.push(st);\n                    break;\n                case 'newline':\n                    props.push(st);\n                    return true;\n            }\n    return false;\n}\nfunction setFlowScalarValue(token, source, type) {\n    switch (token.type) {\n        case 'scalar':\n        case 'double-quoted-scalar':\n        case 'single-quoted-scalar':\n            token.type = type;\n            token.source = source;\n            break;\n        case 'block-scalar': {\n            const end = token.props.slice(1);\n            let oa = source.length;\n            if (token.props[0].type === 'block-scalar-header')\n                oa -= token.props[0].source.length;\n            for (const tok of end)\n                tok.offset += oa;\n            delete token.props;\n            Object.assign(token, { type, source, end });\n            break;\n        }\n        case 'block-map':\n        case 'block-seq': {\n            const offset = token.offset + source.length;\n            const nl = { type: 'newline', offset, indent: token.indent, source: '\\n' };\n            delete token.items;\n            Object.assign(token, { type, source, end: [nl] });\n            break;\n        }\n        default: {\n            const indent = 'indent' in token ? token.indent : -1;\n            const end = 'end' in token && Array.isArray(token.end)\n                ? token.end.filter(st => st.type === 'space' ||\n                    st.type === 'comment' ||\n                    st.type === 'newline')\n                : [];\n            for (const key of Object.keys(token))\n                if (key !== 'type' && key !== 'offset')\n                    delete token[key];\n            Object.assign(token, { type, indent, source, end });\n        }\n    }\n}\n\nexports.createScalarToken = createScalarToken;\nexports.resolveAsScalar = resolveAsScalar;\nexports.setScalarValue = setScalarValue;\n","'use strict';\n\n/**\n * Stringify a CST document, token, or collection item\n *\n * Fair warning: This applies no validation whatsoever, and\n * simply concatenates the sources in their logical order.\n */\nconst stringify = (cst) => 'type' in cst ? stringifyToken(cst) : stringifyItem(cst);\nfunction stringifyToken(token) {\n    switch (token.type) {\n        case 'block-scalar': {\n            let res = '';\n            for (const tok of token.props)\n                res += stringifyToken(tok);\n            return res + token.source;\n        }\n        case 'block-map':\n        case 'block-seq': {\n            let res = '';\n            for (const item of token.items)\n                res += stringifyItem(item);\n            return res;\n        }\n        case 'flow-collection': {\n            let res = token.start.source;\n            for (const item of token.items)\n                res += stringifyItem(item);\n            for (const st of token.end)\n                res += st.source;\n            return res;\n        }\n        case 'document': {\n            let res = stringifyItem(token);\n            if (token.end)\n                for (const st of token.end)\n                    res += st.source;\n            return res;\n        }\n        default: {\n            let res = token.source;\n            if ('end' in token && token.end)\n                for (const st of token.end)\n                    res += st.source;\n            return res;\n        }\n    }\n}\nfunction stringifyItem({ start, key, sep, value }) {\n    let res = '';\n    for (const st of start)\n        res += st.source;\n    if (key)\n        res += stringifyToken(key);\n    if (sep)\n        for (const st of sep)\n            res += st.source;\n    if (value)\n        res += stringifyToken(value);\n    return res;\n}\n\nexports.stringify = stringify;\n","'use strict';\n\nconst BREAK = Symbol('break visit');\nconst SKIP = Symbol('skip children');\nconst REMOVE = Symbol('remove item');\n/**\n * Apply a visitor to a CST document or item.\n *\n * Walks through the tree (depth-first) starting from the root, calling a\n * `visitor` function with two arguments when entering each item:\n *   - `item`: The current item, which included the following members:\n *     - `start: SourceToken[]` – Source tokens before the key or value,\n *       possibly including its anchor or tag.\n *     - `key?: Token | null` – Set for pair values. May then be `null`, if\n *       the key before the `:` separator is empty.\n *     - `sep?: SourceToken[]` – Source tokens between the key and the value,\n *       which should include the `:` map value indicator if `value` is set.\n *     - `value?: Token` – The value of a sequence item, or of a map pair.\n *   - `path`: The steps from the root to the current node, as an array of\n *     `['key' | 'value', number]` tuples.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this token, continue with\n *      next sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current item, then continue with the next one\n *   - `number`: Set the index of the next step. This is useful especially if\n *     the index of the current token has changed.\n *   - `function`: Define the next visitor for this item. After the original\n *     visitor is called on item entry, next visitors are called after handling\n *     a non-empty `key` and when exiting the item.\n */\nfunction visit(cst, visitor) {\n    if ('type' in cst && cst.type === 'document')\n        cst = { start: cst.start, value: cst.value };\n    _visit(Object.freeze([]), cst, visitor);\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisit.BREAK = BREAK;\n/** Do not visit the children of the current item */\nvisit.SKIP = SKIP;\n/** Remove the current item */\nvisit.REMOVE = REMOVE;\n/** Find the item at `path` from `cst` as the root */\nvisit.itemAtPath = (cst, path) => {\n    let item = cst;\n    for (const [field, index] of path) {\n        const tok = item && item[field];\n        if (tok && 'items' in tok) {\n            item = tok.items[index];\n        }\n        else\n            return undefined;\n    }\n    return item;\n};\n/**\n * Get the immediate parent collection of the item at `path` from `cst` as the root.\n *\n * Throws an error if the collection is not found, which should never happen if the item itself exists.\n */\nvisit.parentCollection = (cst, path) => {\n    const parent = visit.itemAtPath(cst, path.slice(0, -1));\n    const field = path[path.length - 1][0];\n    const coll = parent && parent[field];\n    if (coll && 'items' in coll)\n        return coll;\n    throw new Error('Parent collection not found');\n};\nfunction _visit(path, item, visitor) {\n    let ctrl = visitor(item, path);\n    if (typeof ctrl === 'symbol')\n        return ctrl;\n    for (const field of ['key', 'value']) {\n        const token = item[field];\n        if (token && 'items' in token) {\n            for (let i = 0; i < token.items.length; ++i) {\n                const ci = _visit(Object.freeze(path.concat([[field, i]])), token.items[i], visitor);\n                if (typeof ci === 'number')\n                    i = ci - 1;\n                else if (ci === BREAK)\n                    return BREAK;\n                else if (ci === REMOVE) {\n                    token.items.splice(i, 1);\n                    i -= 1;\n                }\n            }\n            if (typeof ctrl === 'function' && field === 'key')\n                ctrl = ctrl(item, path);\n        }\n    }\n    return typeof ctrl === 'function' ? ctrl(item, path) : ctrl;\n}\n\nexports.visit = visit;\n","'use strict';\n\nvar cstScalar = require('./cst-scalar.js');\nvar cstStringify = require('./cst-stringify.js');\nvar cstVisit = require('./cst-visit.js');\n\n/** The byte order mark */\nconst BOM = '\\u{FEFF}';\n/** Start of doc-mode */\nconst DOCUMENT = '\\x02'; // C0: Start of Text\n/** Unexpected end of flow-mode */\nconst FLOW_END = '\\x18'; // C0: Cancel\n/** Next token is a scalar value */\nconst SCALAR = '\\x1f'; // C0: Unit Separator\n/** @returns `true` if `token` is a flow or block collection */\nconst isCollection = (token) => !!token && 'items' in token;\n/** @returns `true` if `token` is a flow or block scalar; not an alias */\nconst isScalar = (token) => !!token &&\n    (token.type === 'scalar' ||\n        token.type === 'single-quoted-scalar' ||\n        token.type === 'double-quoted-scalar' ||\n        token.type === 'block-scalar');\n/* istanbul ignore next */\n/** Get a printable representation of a lexer token */\nfunction prettyToken(token) {\n    switch (token) {\n        case BOM:\n            return '<BOM>';\n        case DOCUMENT:\n            return '<DOC>';\n        case FLOW_END:\n            return '<FLOW_END>';\n        case SCALAR:\n            return '<SCALAR>';\n        default:\n            return JSON.stringify(token);\n    }\n}\n/** Identify the type of a lexer token. May return `null` for unknown tokens. */\nfunction tokenType(source) {\n    switch (source) {\n        case BOM:\n            return 'byte-order-mark';\n        case DOCUMENT:\n            return 'doc-mode';\n        case FLOW_END:\n            return 'flow-error-end';\n        case SCALAR:\n            return 'scalar';\n        case '---':\n            return 'doc-start';\n        case '...':\n            return 'doc-end';\n        case '':\n        case '\\n':\n        case '\\r\\n':\n            return 'newline';\n        case '-':\n            return 'seq-item-ind';\n        case '?':\n            return 'explicit-key-ind';\n        case ':':\n            return 'map-value-ind';\n        case '{':\n            return 'flow-map-start';\n        case '}':\n            return 'flow-map-end';\n        case '[':\n            return 'flow-seq-start';\n        case ']':\n            return 'flow-seq-end';\n        case ',':\n            return 'comma';\n    }\n    switch (source[0]) {\n        case ' ':\n        case '\\t':\n            return 'space';\n        case '#':\n            return 'comment';\n        case '%':\n            return 'directive-line';\n        case '*':\n            return 'alias';\n        case '&':\n            return 'anchor';\n        case '!':\n            return 'tag';\n        case \"'\":\n            return 'single-quoted-scalar';\n        case '\"':\n            return 'double-quoted-scalar';\n        case '|':\n        case '>':\n            return 'block-scalar-header';\n    }\n    return null;\n}\n\nexports.createScalarToken = cstScalar.createScalarToken;\nexports.resolveAsScalar = cstScalar.resolveAsScalar;\nexports.setScalarValue = cstScalar.setScalarValue;\nexports.stringify = cstStringify.stringify;\nexports.visit = cstVisit.visit;\nexports.BOM = BOM;\nexports.DOCUMENT = DOCUMENT;\nexports.FLOW_END = FLOW_END;\nexports.SCALAR = SCALAR;\nexports.isCollection = isCollection;\nexports.isScalar = isScalar;\nexports.prettyToken = prettyToken;\nexports.tokenType = tokenType;\n","'use strict';\n\nvar cst = require('./cst.js');\n\n/*\nSTART -> stream\n\nstream\n  directive -> line-end -> stream\n  indent + line-end -> stream\n  [else] -> line-start\n\nline-end\n  comment -> line-end\n  newline -> .\n  input-end -> END\n\nline-start\n  doc-start -> doc\n  doc-end -> stream\n  [else] -> indent -> block-start\n\nblock-start\n  seq-item-start -> block-start\n  explicit-key-start -> block-start\n  map-value-start -> block-start\n  [else] -> doc\n\ndoc\n  line-end -> line-start\n  spaces -> doc\n  anchor -> doc\n  tag -> doc\n  flow-start -> flow -> doc\n  flow-end -> error -> doc\n  seq-item-start -> error -> doc\n  explicit-key-start -> error -> doc\n  map-value-start -> doc\n  alias -> doc\n  quote-start -> quoted-scalar -> doc\n  block-scalar-header -> line-end -> block-scalar(min) -> line-start\n  [else] -> plain-scalar(false, min) -> doc\n\nflow\n  line-end -> flow\n  spaces -> flow\n  anchor -> flow\n  tag -> flow\n  flow-start -> flow -> flow\n  flow-end -> .\n  seq-item-start -> error -> flow\n  explicit-key-start -> flow\n  map-value-start -> flow\n  alias -> flow\n  quote-start -> quoted-scalar -> flow\n  comma -> flow\n  [else] -> plain-scalar(true, 0) -> flow\n\nquoted-scalar\n  quote-end -> .\n  [else] -> quoted-scalar\n\nblock-scalar(min)\n  newline + peek(indent < min) -> .\n  [else] -> block-scalar(min)\n\nplain-scalar(is-flow, min)\n  scalar-end(is-flow) -> .\n  peek(newline + (indent < min)) -> .\n  [else] -> plain-scalar(min)\n*/\nfunction isEmpty(ch) {\n    switch (ch) {\n        case undefined:\n        case ' ':\n        case '\\n':\n        case '\\r':\n        case '\\t':\n            return true;\n        default:\n            return false;\n    }\n}\nconst hexDigits = '0123456789ABCDEFabcdef'.split('');\nconst tagChars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()\".split('');\nconst invalidFlowScalarChars = ',[]{}'.split('');\nconst invalidAnchorChars = ' ,[]{}\\n\\r\\t'.split('');\nconst isNotAnchorChar = (ch) => !ch || invalidAnchorChars.includes(ch);\n/**\n * Splits an input string into lexical tokens, i.e. smaller strings that are\n * easily identifiable by `tokens.tokenType()`.\n *\n * Lexing starts always in a \"stream\" context. Incomplete input may be buffered\n * until a complete token can be emitted.\n *\n * In addition to slices of the original input, the following control characters\n * may also be emitted:\n *\n * - `\\x02` (Start of Text): A document starts with the next token\n * - `\\x18` (Cancel): Unexpected end of flow-mode (indicates an error)\n * - `\\x1f` (Unit Separator): Next token is a scalar value\n * - `\\u{FEFF}` (Byte order mark): Emitted separately outside documents\n */\nclass Lexer {\n    constructor() {\n        /**\n         * Flag indicating whether the end of the current buffer marks the end of\n         * all input\n         */\n        this.atEnd = false;\n        /**\n         * Explicit indent set in block scalar header, as an offset from the current\n         * minimum indent, so e.g. set to 1 from a header `|2+`. Set to -1 if not\n         * explicitly set.\n         */\n        this.blockScalarIndent = -1;\n        /**\n         * Block scalars that include a + (keep) chomping indicator in their header\n         * include trailing empty lines, which are otherwise excluded from the\n         * scalar's contents.\n         */\n        this.blockScalarKeep = false;\n        /** Current input */\n        this.buffer = '';\n        /**\n         * Flag noting whether the map value indicator : can immediately follow this\n         * node within a flow context.\n         */\n        this.flowKey = false;\n        /** Count of surrounding flow collection levels. */\n        this.flowLevel = 0;\n        /**\n         * Minimum level of indentation required for next lines to be parsed as a\n         * part of the current scalar value.\n         */\n        this.indentNext = 0;\n        /** Indentation level of the current line. */\n        this.indentValue = 0;\n        /** Stores the state of the lexer if reaching the end of incpomplete input */\n        this.next = null;\n        /** A pointer to `buffer`; the current position of the lexer. */\n        this.pos = 0;\n    }\n    /**\n     * Generate YAML tokens from the `source` string. If `incomplete`,\n     * a part of the last line may be left as a buffer for the next call.\n     *\n     * @returns A generator of lexical tokens\n     */\n    *lex(source, incomplete = false) {\n        if (source)\n            this.buffer = this.buffer ? this.buffer + source : source;\n        this.atEnd = !incomplete;\n        let next = this.next || 'stream';\n        while (next && (incomplete || this.hasChars(1)))\n            next = yield* this.parseNext(next);\n    }\n    atLineEnd() {\n        let i = this.pos;\n        let ch = this.buffer[i];\n        while (ch === ' ' || ch === '\\t')\n            ch = this.buffer[++i];\n        if (!ch || ch === '#' || ch === '\\n')\n            return true;\n        if (ch === '\\r')\n            return this.buffer[i + 1] === '\\n';\n        return false;\n    }\n    charAt(n) {\n        return this.buffer[this.pos + n];\n    }\n    continueScalar(offset) {\n        let ch = this.buffer[offset];\n        if (this.indentNext > 0) {\n            let indent = 0;\n            while (ch === ' ')\n                ch = this.buffer[++indent + offset];\n            if (ch === '\\r') {\n                const next = this.buffer[indent + offset + 1];\n                if (next === '\\n' || (!next && !this.atEnd))\n                    return offset + indent + 1;\n            }\n            return ch === '\\n' || indent >= this.indentNext || (!ch && !this.atEnd)\n                ? offset + indent\n                : -1;\n        }\n        if (ch === '-' || ch === '.') {\n            const dt = this.buffer.substr(offset, 3);\n            if ((dt === '---' || dt === '...') && isEmpty(this.buffer[offset + 3]))\n                return -1;\n        }\n        return offset;\n    }\n    getLine() {\n        let end = this.buffer.indexOf('\\n', this.pos);\n        if (end === -1)\n            return this.atEnd ? this.buffer.substring(this.pos) : null;\n        if (this.buffer[end - 1] === '\\r')\n            end -= 1;\n        return this.buffer.substring(this.pos, end);\n    }\n    hasChars(n) {\n        return this.pos + n <= this.buffer.length;\n    }\n    setNext(state) {\n        this.buffer = this.buffer.substring(this.pos);\n        this.pos = 0;\n        this.next = state;\n        return null;\n    }\n    peek(n) {\n        return this.buffer.substr(this.pos, n);\n    }\n    *parseNext(next) {\n        switch (next) {\n            case 'stream':\n                return yield* this.parseStream();\n            case 'line-start':\n                return yield* this.parseLineStart();\n            case 'block-start':\n                return yield* this.parseBlockStart();\n            case 'doc':\n                return yield* this.parseDocument();\n            case 'flow':\n                return yield* this.parseFlowCollection();\n            case 'quoted-scalar':\n                return yield* this.parseQuotedScalar();\n            case 'block-scalar':\n                return yield* this.parseBlockScalar();\n            case 'plain-scalar':\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseStream() {\n        let line = this.getLine();\n        if (line === null)\n            return this.setNext('stream');\n        if (line[0] === cst.BOM) {\n            yield* this.pushCount(1);\n            line = line.substring(1);\n        }\n        if (line[0] === '%') {\n            let dirEnd = line.length;\n            const cs = line.indexOf('#');\n            if (cs !== -1) {\n                const ch = line[cs - 1];\n                if (ch === ' ' || ch === '\\t')\n                    dirEnd = cs - 1;\n            }\n            while (true) {\n                const ch = line[dirEnd - 1];\n                if (ch === ' ' || ch === '\\t')\n                    dirEnd -= 1;\n                else\n                    break;\n            }\n            const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));\n            yield* this.pushCount(line.length - n); // possible comment\n            this.pushNewline();\n            return 'stream';\n        }\n        if (this.atLineEnd()) {\n            const sp = yield* this.pushSpaces(true);\n            yield* this.pushCount(line.length - sp);\n            yield* this.pushNewline();\n            return 'stream';\n        }\n        yield cst.DOCUMENT;\n        return yield* this.parseLineStart();\n    }\n    *parseLineStart() {\n        const ch = this.charAt(0);\n        if (!ch && !this.atEnd)\n            return this.setNext('line-start');\n        if (ch === '-' || ch === '.') {\n            if (!this.atEnd && !this.hasChars(4))\n                return this.setNext('line-start');\n            const s = this.peek(3);\n            if (s === '---' && isEmpty(this.charAt(3))) {\n                yield* this.pushCount(3);\n                this.indentValue = 0;\n                this.indentNext = 0;\n                return 'doc';\n            }\n            else if (s === '...' && isEmpty(this.charAt(3))) {\n                yield* this.pushCount(3);\n                return 'stream';\n            }\n        }\n        this.indentValue = yield* this.pushSpaces(false);\n        if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))\n            this.indentNext = this.indentValue;\n        return yield* this.parseBlockStart();\n    }\n    *parseBlockStart() {\n        const [ch0, ch1] = this.peek(2);\n        if (!ch1 && !this.atEnd)\n            return this.setNext('block-start');\n        if ((ch0 === '-' || ch0 === '?' || ch0 === ':') && isEmpty(ch1)) {\n            const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));\n            this.indentNext = this.indentValue + 1;\n            this.indentValue += n;\n            return yield* this.parseBlockStart();\n        }\n        return 'doc';\n    }\n    *parseDocument() {\n        yield* this.pushSpaces(true);\n        const line = this.getLine();\n        if (line === null)\n            return this.setNext('doc');\n        let n = yield* this.pushIndicators();\n        switch (line[n]) {\n            case '#':\n                yield* this.pushCount(line.length - n);\n            // fallthrough\n            case undefined:\n                yield* this.pushNewline();\n                return yield* this.parseLineStart();\n            case '{':\n            case '[':\n                yield* this.pushCount(1);\n                this.flowKey = false;\n                this.flowLevel = 1;\n                return 'flow';\n            case '}':\n            case ']':\n                // this is an error\n                yield* this.pushCount(1);\n                return 'doc';\n            case '*':\n                yield* this.pushUntil(isNotAnchorChar);\n                return 'doc';\n            case '\"':\n            case \"'\":\n                return yield* this.parseQuotedScalar();\n            case '|':\n            case '>':\n                n += yield* this.parseBlockScalarHeader();\n                n += yield* this.pushSpaces(true);\n                yield* this.pushCount(line.length - n);\n                yield* this.pushNewline();\n                return yield* this.parseBlockScalar();\n            default:\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseFlowCollection() {\n        let nl, sp;\n        let indent = -1;\n        do {\n            nl = yield* this.pushNewline();\n            sp = yield* this.pushSpaces(true);\n            if (nl > 0)\n                this.indentValue = indent = sp;\n        } while (nl + sp > 0);\n        const line = this.getLine();\n        if (line === null)\n            return this.setNext('flow');\n        if ((indent !== -1 && indent < this.indentNext) ||\n            (indent === 0 &&\n                (line.startsWith('---') || line.startsWith('...')) &&\n                isEmpty(line[3]))) {\n            // Allowing for the terminal ] or } at the same (rather than greater)\n            // indent level as the initial [ or { is technically invalid, but\n            // failing here would be surprising to users.\n            const atFlowEndMarker = indent === this.indentNext - 1 &&\n                this.flowLevel === 1 &&\n                (line[0] === ']' || line[0] === '}');\n            if (!atFlowEndMarker) {\n                // this is an error\n                this.flowLevel = 0;\n                yield cst.FLOW_END;\n                return yield* this.parseLineStart();\n            }\n        }\n        let n = 0;\n        while (line[n] === ',')\n            n += (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));\n        n += yield* this.pushIndicators();\n        switch (line[n]) {\n            case undefined:\n                return 'flow';\n            case '#':\n                yield* this.pushCount(line.length - n);\n                return 'flow';\n            case '{':\n            case '[':\n                yield* this.pushCount(1);\n                this.flowKey = false;\n                this.flowLevel += 1;\n                return 'flow';\n            case '}':\n            case ']':\n                yield* this.pushCount(1);\n                this.flowKey = true;\n                this.flowLevel -= 1;\n                return this.flowLevel ? 'flow' : 'doc';\n            case '*':\n                yield* this.pushUntil(isNotAnchorChar);\n                return 'flow';\n            case '\"':\n            case \"'\":\n                this.flowKey = true;\n                return yield* this.parseQuotedScalar();\n            case ':': {\n                const next = this.charAt(1);\n                if (this.flowKey || isEmpty(next) || next === ',') {\n                    yield* this.pushCount(1);\n                    yield* this.pushSpaces(true);\n                    return 'flow';\n                }\n            }\n            // fallthrough\n            default:\n                this.flowKey = false;\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseQuotedScalar() {\n        const quote = this.charAt(0);\n        let end = this.buffer.indexOf(quote, this.pos + 1);\n        if (quote === \"'\") {\n            while (end !== -1 && this.buffer[end + 1] === \"'\")\n                end = this.buffer.indexOf(\"'\", end + 2);\n        }\n        else {\n            // double-quote\n            while (end !== -1) {\n                let n = 0;\n                while (this.buffer[end - 1 - n] === '\\\\')\n                    n += 1;\n                if (n % 2 === 0)\n                    break;\n                end = this.buffer.indexOf('\"', end + 1);\n            }\n        }\n        let nl = this.buffer.indexOf('\\n', this.pos);\n        if (nl !== -1 && nl < end) {\n            while (nl !== -1 && nl < end) {\n                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = this.buffer.indexOf('\\n', cs);\n            }\n            if (nl !== -1 && nl < end) {\n                // this is an error caused by an unexpected unindent\n                end = nl - 1;\n            }\n        }\n        if (end === -1) {\n            if (!this.atEnd)\n                return this.setNext('quoted-scalar');\n            end = this.buffer.length;\n        }\n        yield* this.pushToIndex(end + 1, false);\n        return this.flowLevel ? 'flow' : 'doc';\n    }\n    *parseBlockScalarHeader() {\n        this.blockScalarIndent = -1;\n        this.blockScalarKeep = false;\n        let i = this.pos;\n        while (true) {\n            const ch = this.buffer[++i];\n            if (ch === '+')\n                this.blockScalarKeep = true;\n            else if (ch > '0' && ch <= '9')\n                this.blockScalarIndent = Number(ch) - 1;\n            else if (ch !== '-')\n                break;\n        }\n        return yield* this.pushUntil(ch => isEmpty(ch) || ch === '#');\n    }\n    *parseBlockScalar() {\n        let nl = this.pos - 1; // may be -1 if this.pos === 0\n        let indent = 0;\n        let ch;\n        loop: for (let i = this.pos; (ch = this.buffer[i]); ++i) {\n            switch (ch) {\n                case ' ':\n                    indent += 1;\n                    break;\n                case '\\n':\n                    nl = i;\n                    indent = 0;\n                    break;\n                case '\\r': {\n                    const next = this.buffer[i + 1];\n                    if (!next && !this.atEnd)\n                        return this.setNext('block-scalar');\n                    if (next === '\\n')\n                        break;\n                } // fallthrough\n                default:\n                    break loop;\n            }\n        }\n        if (!ch && !this.atEnd)\n            return this.setNext('block-scalar');\n        if (indent >= this.indentNext) {\n            if (this.blockScalarIndent === -1)\n                this.indentNext = indent;\n            else\n                this.indentNext += this.blockScalarIndent;\n            do {\n                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = this.buffer.indexOf('\\n', cs);\n            } while (nl !== -1);\n            if (nl === -1) {\n                if (!this.atEnd)\n                    return this.setNext('block-scalar');\n                nl = this.buffer.length;\n            }\n        }\n        if (!this.blockScalarKeep) {\n            do {\n                let i = nl - 1;\n                let ch = this.buffer[i];\n                if (ch === '\\r')\n                    ch = this.buffer[--i];\n                while (ch === ' ' || ch === '\\t')\n                    ch = this.buffer[--i];\n                if (ch === '\\n' && i >= this.pos)\n                    nl = i;\n                else\n                    break;\n            } while (true);\n        }\n        yield cst.SCALAR;\n        yield* this.pushToIndex(nl + 1, true);\n        return yield* this.parseLineStart();\n    }\n    *parsePlainScalar() {\n        const inFlow = this.flowLevel > 0;\n        let end = this.pos - 1;\n        let i = this.pos - 1;\n        let ch;\n        while ((ch = this.buffer[++i])) {\n            if (ch === ':') {\n                const next = this.buffer[i + 1];\n                if (isEmpty(next) || (inFlow && next === ','))\n                    break;\n                end = i;\n            }\n            else if (isEmpty(ch)) {\n                const next = this.buffer[i + 1];\n                if (next === '#' || (inFlow && invalidFlowScalarChars.includes(next)))\n                    break;\n                if (ch === '\\r') {\n                    if (next === '\\n') {\n                        i += 1;\n                        ch = '\\n';\n                    }\n                    else\n                        end = i;\n                }\n                if (ch === '\\n') {\n                    const cs = this.continueScalar(i + 1);\n                    if (cs === -1)\n                        break;\n                    i = Math.max(i, cs - 2); // to advance, but still account for ' #'\n                }\n            }\n            else {\n                if (inFlow && invalidFlowScalarChars.includes(ch))\n                    break;\n                end = i;\n            }\n        }\n        if (!ch && !this.atEnd)\n            return this.setNext('plain-scalar');\n        yield cst.SCALAR;\n        yield* this.pushToIndex(end + 1, true);\n        return inFlow ? 'flow' : 'doc';\n    }\n    *pushCount(n) {\n        if (n > 0) {\n            yield this.buffer.substr(this.pos, n);\n            this.pos += n;\n            return n;\n        }\n        return 0;\n    }\n    *pushToIndex(i, allowEmpty) {\n        const s = this.buffer.slice(this.pos, i);\n        if (s) {\n            yield s;\n            this.pos += s.length;\n            return s.length;\n        }\n        else if (allowEmpty)\n            yield '';\n        return 0;\n    }\n    *pushIndicators() {\n        switch (this.charAt(0)) {\n            case '!':\n                return ((yield* this.pushTag()) +\n                    (yield* this.pushSpaces(true)) +\n                    (yield* this.pushIndicators()));\n            case '&':\n                return ((yield* this.pushUntil(isNotAnchorChar)) +\n                    (yield* this.pushSpaces(true)) +\n                    (yield* this.pushIndicators()));\n            case ':':\n            case '?': // this is an error outside flow collections\n            case '-': // this is an error\n                if (isEmpty(this.charAt(1))) {\n                    if (this.flowLevel === 0)\n                        this.indentNext = this.indentValue + 1;\n                    return ((yield* this.pushCount(1)) +\n                        (yield* this.pushSpaces(true)) +\n                        (yield* this.pushIndicators()));\n                }\n        }\n        return 0;\n    }\n    *pushTag() {\n        if (this.charAt(1) === '<') {\n            let i = this.pos + 2;\n            let ch = this.buffer[i];\n            while (!isEmpty(ch) && ch !== '>')\n                ch = this.buffer[++i];\n            return yield* this.pushToIndex(ch === '>' ? i + 1 : i, false);\n        }\n        else {\n            let i = this.pos + 1;\n            let ch = this.buffer[i];\n            while (ch) {\n                if (tagChars.includes(ch))\n                    ch = this.buffer[++i];\n                else if (ch === '%' &&\n                    hexDigits.includes(this.buffer[i + 1]) &&\n                    hexDigits.includes(this.buffer[i + 2])) {\n                    ch = this.buffer[(i += 3)];\n                }\n                else\n                    break;\n            }\n            return yield* this.pushToIndex(i, false);\n        }\n    }\n    *pushNewline() {\n        const ch = this.buffer[this.pos];\n        if (ch === '\\n')\n            return yield* this.pushCount(1);\n        else if (ch === '\\r' && this.charAt(1) === '\\n')\n            return yield* this.pushCount(2);\n        else\n            return 0;\n    }\n    *pushSpaces(allowTabs) {\n        let i = this.pos - 1;\n        let ch;\n        do {\n            ch = this.buffer[++i];\n        } while (ch === ' ' || (allowTabs && ch === '\\t'));\n        const n = i - this.pos;\n        if (n > 0) {\n            yield this.buffer.substr(this.pos, n);\n            this.pos = i;\n        }\n        return n;\n    }\n    *pushUntil(test) {\n        let i = this.pos;\n        let ch = this.buffer[i];\n        while (!test(ch))\n            ch = this.buffer[++i];\n        return yield* this.pushToIndex(i, false);\n    }\n}\n\nexports.Lexer = Lexer;\n","'use strict';\n\n/**\n * Tracks newlines during parsing in order to provide an efficient API for\n * determining the one-indexed `{ line, col }` position for any offset\n * within the input.\n */\nclass LineCounter {\n    constructor() {\n        this.lineStarts = [];\n        /**\n         * Should be called in ascending order. Otherwise, call\n         * `lineCounter.lineStarts.sort()` before calling `linePos()`.\n         */\n        this.addNewLine = (offset) => this.lineStarts.push(offset);\n        /**\n         * Performs a binary search and returns the 1-indexed { line, col }\n         * position of `offset`. If `line === 0`, `addNewLine` has never been\n         * called or `offset` is before the first known newline.\n         */\n        this.linePos = (offset) => {\n            let low = 0;\n            let high = this.lineStarts.length;\n            while (low < high) {\n                const mid = (low + high) >> 1; // Math.floor((low + high) / 2)\n                if (this.lineStarts[mid] < offset)\n                    low = mid + 1;\n                else\n                    high = mid;\n            }\n            if (this.lineStarts[low] === offset)\n                return { line: low + 1, col: 1 };\n            if (low === 0)\n                return { line: 0, col: offset };\n            const start = this.lineStarts[low - 1];\n            return { line: low, col: offset - start + 1 };\n        };\n    }\n}\n\nexports.LineCounter = LineCounter;\n","'use strict';\n\nvar cst = require('./cst.js');\nvar lexer = require('./lexer.js');\n\nfunction includesToken(list, type) {\n    for (let i = 0; i < list.length; ++i)\n        if (list[i].type === type)\n            return true;\n    return false;\n}\nfunction includesNonEmpty(list) {\n    for (let i = 0; i < list.length; ++i) {\n        switch (list[i].type) {\n            case 'space':\n            case 'comment':\n            case 'newline':\n                break;\n            default:\n                return true;\n        }\n    }\n    return false;\n}\nfunction isFlowToken(token) {\n    switch (token === null || token === void 0 ? void 0 : token.type) {\n        case 'alias':\n        case 'scalar':\n        case 'single-quoted-scalar':\n        case 'double-quoted-scalar':\n        case 'flow-collection':\n            return true;\n        default:\n            return false;\n    }\n}\nfunction getPrevProps(parent) {\n    switch (parent.type) {\n        case 'document':\n            return parent.start;\n        case 'block-map': {\n            const it = parent.items[parent.items.length - 1];\n            return it.sep || it.start;\n        }\n        case 'block-seq':\n            return parent.items[parent.items.length - 1].start;\n        /* istanbul ignore next should not happen */\n        default:\n            return [];\n    }\n}\n/** Note: May modify input array */\nfunction getFirstKeyStartProps(prev) {\n    var _a;\n    if (prev.length === 0)\n        return [];\n    let i = prev.length;\n    loop: while (--i >= 0) {\n        switch (prev[i].type) {\n            case 'doc-start':\n            case 'explicit-key-ind':\n            case 'map-value-ind':\n            case 'seq-item-ind':\n            case 'newline':\n                break loop;\n        }\n    }\n    while (((_a = prev[++i]) === null || _a === void 0 ? void 0 : _a.type) === 'space') {\n        /* loop */\n    }\n    return prev.splice(i, prev.length);\n}\nfunction fixFlowSeqItems(fc) {\n    if (fc.start.type === 'flow-seq-start') {\n        for (const it of fc.items) {\n            if (it.sep &&\n                !it.value &&\n                !includesToken(it.start, 'explicit-key-ind') &&\n                !includesToken(it.sep, 'map-value-ind')) {\n                if (it.key)\n                    it.value = it.key;\n                delete it.key;\n                if (isFlowToken(it.value)) {\n                    if (it.value.end)\n                        Array.prototype.push.apply(it.value.end, it.sep);\n                    else\n                        it.value.end = it.sep;\n                }\n                else\n                    Array.prototype.push.apply(it.start, it.sep);\n                delete it.sep;\n            }\n        }\n    }\n}\n/**\n * A YAML concrete syntax tree (CST) parser\n *\n * ```ts\n * const src: string = ...\n * for (const token of new Parser().parse(src)) {\n *   // token: Token\n * }\n * ```\n *\n * To use the parser with a user-provided lexer:\n *\n * ```ts\n * function* parse(source: string, lexer: Lexer) {\n *   const parser = new Parser()\n *   for (const lexeme of lexer.lex(source))\n *     yield* parser.next(lexeme)\n *   yield* parser.end()\n * }\n *\n * const src: string = ...\n * const lexer = new Lexer()\n * for (const token of parse(src, lexer)) {\n *   // token: Token\n * }\n * ```\n */\nclass Parser {\n    /**\n     * @param onNewLine - If defined, called separately with the start position of\n     *   each new line (in `parse()`, including the start of input).\n     */\n    constructor(onNewLine) {\n        /** If true, space and sequence indicators count as indentation */\n        this.atNewLine = true;\n        /** If true, next token is a scalar value */\n        this.atScalar = false;\n        /** Current indentation level */\n        this.indent = 0;\n        /** Current offset since the start of parsing */\n        this.offset = 0;\n        /** On the same line with a block map key */\n        this.onKeyLine = false;\n        /** Top indicates the node that's currently being built */\n        this.stack = [];\n        /** The source of the current token, set in parse() */\n        this.source = '';\n        /** The type of the current token, set in parse() */\n        this.type = '';\n        // Must be defined after `next()`\n        this.lexer = new lexer.Lexer();\n        this.onNewLine = onNewLine;\n    }\n    /**\n     * Parse `source` as a YAML stream.\n     * If `incomplete`, a part of the last line may be left as a buffer for the next call.\n     *\n     * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.\n     *\n     * @returns A generator of tokens representing each directive, document, and other structure.\n     */\n    *parse(source, incomplete = false) {\n        if (this.onNewLine && this.offset === 0)\n            this.onNewLine(0);\n        for (const lexeme of this.lexer.lex(source, incomplete))\n            yield* this.next(lexeme);\n        if (!incomplete)\n            yield* this.end();\n    }\n    /**\n     * Advance the parser by the `source` of one lexical token.\n     */\n    *next(source) {\n        this.source = source;\n        if (process.env.LOG_TOKENS)\n            console.log('|', cst.prettyToken(source));\n        if (this.atScalar) {\n            this.atScalar = false;\n            yield* this.step();\n            this.offset += source.length;\n            return;\n        }\n        const type = cst.tokenType(source);\n        if (!type) {\n            const message = `Not a YAML token: ${source}`;\n            yield* this.pop({ type: 'error', offset: this.offset, message, source });\n            this.offset += source.length;\n        }\n        else if (type === 'scalar') {\n            this.atNewLine = false;\n            this.atScalar = true;\n            this.type = 'scalar';\n        }\n        else {\n            this.type = type;\n            yield* this.step();\n            switch (type) {\n                case 'newline':\n                    this.atNewLine = true;\n                    this.indent = 0;\n                    if (this.onNewLine)\n                        this.onNewLine(this.offset + source.length);\n                    break;\n                case 'space':\n                    if (this.atNewLine && source[0] === ' ')\n                        this.indent += source.length;\n                    break;\n                case 'explicit-key-ind':\n                case 'map-value-ind':\n                case 'seq-item-ind':\n                    if (this.atNewLine)\n                        this.indent += source.length;\n                    break;\n                case 'doc-mode':\n                    return;\n                default:\n                    this.atNewLine = false;\n            }\n            this.offset += source.length;\n        }\n    }\n    /** Call at end of input to push out any remaining constructions */\n    *end() {\n        while (this.stack.length > 0)\n            yield* this.pop();\n    }\n    get sourceToken() {\n        const st = {\n            type: this.type,\n            offset: this.offset,\n            indent: this.indent,\n            source: this.source\n        };\n        return st;\n    }\n    *step() {\n        const top = this.peek(1);\n        if (this.type === 'doc-end' && (!top || top.type !== 'doc-end')) {\n            while (this.stack.length > 0)\n                yield* this.pop();\n            this.stack.push({\n                type: 'doc-end',\n                offset: this.offset,\n                source: this.source\n            });\n            return;\n        }\n        if (!top)\n            return yield* this.stream();\n        switch (top.type) {\n            case 'document':\n                return yield* this.document(top);\n            case 'alias':\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return yield* this.scalar(top);\n            case 'block-scalar':\n                return yield* this.blockScalar(top);\n            case 'block-map':\n                return yield* this.blockMap(top);\n            case 'block-seq':\n                return yield* this.blockSequence(top);\n            case 'flow-collection':\n                return yield* this.flowCollection(top);\n            case 'doc-end':\n                return yield* this.documentEnd(top);\n        }\n        /* istanbul ignore next should not happen */\n        yield* this.pop();\n    }\n    peek(n) {\n        return this.stack[this.stack.length - n];\n    }\n    *pop(error) {\n        const token = error || this.stack.pop();\n        /* istanbul ignore if should not happen */\n        if (!token) {\n            const message = 'Tried to pop an empty stack';\n            yield { type: 'error', offset: this.offset, source: '', message };\n        }\n        else if (this.stack.length === 0) {\n            yield token;\n        }\n        else {\n            const top = this.peek(1);\n            // For these, parent indent is needed instead of own\n            if (token.type === 'block-scalar' || token.type === 'flow-collection')\n                token.indent = 'indent' in top ? top.indent : -1;\n            if (token.type === 'flow-collection')\n                fixFlowSeqItems(token);\n            switch (top.type) {\n                case 'document':\n                    top.value = token;\n                    break;\n                case 'block-scalar':\n                    top.props.push(token); // error\n                    break;\n                case 'block-map': {\n                    const it = top.items[top.items.length - 1];\n                    if (it.value) {\n                        top.items.push({ start: [], key: token, sep: [] });\n                        this.onKeyLine = true;\n                        return;\n                    }\n                    else if (it.sep) {\n                        it.value = token;\n                    }\n                    else {\n                        Object.assign(it, { key: token, sep: [] });\n                        this.onKeyLine = !includesToken(it.start, 'explicit-key-ind');\n                        return;\n                    }\n                    break;\n                }\n                case 'block-seq': {\n                    const it = top.items[top.items.length - 1];\n                    if (it.value)\n                        top.items.push({ start: [], value: token });\n                    else\n                        it.value = token;\n                    break;\n                }\n                case 'flow-collection': {\n                    const it = top.items[top.items.length - 1];\n                    if (!it || it.value)\n                        top.items.push({ start: [], key: token, sep: [] });\n                    else if (it.sep)\n                        it.value = token;\n                    else\n                        Object.assign(it, { key: token, sep: [] });\n                    return;\n                }\n                /* istanbul ignore next should not happen */\n                default:\n                    yield* this.pop();\n                    yield* this.pop(token);\n            }\n            if ((top.type === 'document' ||\n                top.type === 'block-map' ||\n                top.type === 'block-seq') &&\n                (token.type === 'block-map' || token.type === 'block-seq')) {\n                const last = token.items[token.items.length - 1];\n                if (last &&\n                    !last.sep &&\n                    !last.value &&\n                    last.start.length > 0 &&\n                    !includesNonEmpty(last.start) &&\n                    (token.indent === 0 ||\n                        last.start.every(st => st.type !== 'comment' || st.indent < token.indent))) {\n                    if (top.type === 'document')\n                        top.end = last.start;\n                    else\n                        top.items.push({ start: last.start });\n                    token.items.splice(-1, 1);\n                }\n            }\n        }\n    }\n    *stream() {\n        switch (this.type) {\n            case 'directive-line':\n                yield { type: 'directive', offset: this.offset, source: this.source };\n                return;\n            case 'byte-order-mark':\n            case 'space':\n            case 'comment':\n            case 'newline':\n                yield this.sourceToken;\n                return;\n            case 'doc-mode':\n            case 'doc-start': {\n                const doc = {\n                    type: 'document',\n                    offset: this.offset,\n                    start: []\n                };\n                if (this.type === 'doc-start')\n                    doc.start.push(this.sourceToken);\n                this.stack.push(doc);\n                return;\n            }\n        }\n        yield {\n            type: 'error',\n            offset: this.offset,\n            message: `Unexpected ${this.type} token in YAML stream`,\n            source: this.source\n        };\n    }\n    *document(doc) {\n        if (doc.value)\n            return yield* this.lineEnd(doc);\n        switch (this.type) {\n            case 'doc-start': {\n                if (includesNonEmpty(doc.start)) {\n                    yield* this.pop();\n                    yield* this.step();\n                }\n                else\n                    doc.start.push(this.sourceToken);\n                return;\n            }\n            case 'anchor':\n            case 'tag':\n            case 'space':\n            case 'comment':\n            case 'newline':\n                doc.start.push(this.sourceToken);\n                return;\n        }\n        const bv = this.startBlockValue(doc);\n        if (bv)\n            this.stack.push(bv);\n        else {\n            yield {\n                type: 'error',\n                offset: this.offset,\n                message: `Unexpected ${this.type} token in YAML document`,\n                source: this.source\n            };\n        }\n    }\n    *scalar(scalar) {\n        if (this.type === 'map-value-ind') {\n            const prev = getPrevProps(this.peek(2));\n            const start = getFirstKeyStartProps(prev);\n            let sep;\n            if (scalar.end) {\n                sep = scalar.end;\n                sep.push(this.sourceToken);\n                delete scalar.end;\n            }\n            else\n                sep = [this.sourceToken];\n            const map = {\n                type: 'block-map',\n                offset: scalar.offset,\n                indent: scalar.indent,\n                items: [{ start, key: scalar, sep }]\n            };\n            this.onKeyLine = true;\n            this.stack[this.stack.length - 1] = map;\n        }\n        else\n            yield* this.lineEnd(scalar);\n    }\n    *blockScalar(scalar) {\n        switch (this.type) {\n            case 'space':\n            case 'comment':\n            case 'newline':\n                scalar.props.push(this.sourceToken);\n                return;\n            case 'scalar':\n                scalar.source = this.source;\n                // block-scalar source includes trailing newline\n                this.atNewLine = true;\n                this.indent = 0;\n                if (this.onNewLine) {\n                    let nl = this.source.indexOf('\\n') + 1;\n                    while (nl !== 0) {\n                        this.onNewLine(this.offset + nl);\n                        nl = this.source.indexOf('\\n', nl) + 1;\n                    }\n                }\n                yield* this.pop();\n                break;\n            /* istanbul ignore next should not happen */\n            default:\n                yield* this.pop();\n                yield* this.step();\n        }\n    }\n    *blockMap(map) {\n        var _a;\n        const it = map.items[map.items.length - 1];\n        // it.sep is true-ish if pair already has key or : separator\n        switch (this.type) {\n            case 'newline':\n                this.onKeyLine = false;\n                if (it.value) {\n                    const end = 'end' in it.value ? it.value.end : undefined;\n                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;\n                    if ((last === null || last === void 0 ? void 0 : last.type) === 'comment')\n                        end === null || end === void 0 ? void 0 : end.push(this.sourceToken);\n                    else\n                        map.items.push({ start: [this.sourceToken] });\n                }\n                else if (it.sep)\n                    it.sep.push(this.sourceToken);\n                else\n                    it.start.push(this.sourceToken);\n                return;\n            case 'space':\n            case 'comment':\n                if (it.value)\n                    map.items.push({ start: [this.sourceToken] });\n                else if (it.sep)\n                    it.sep.push(this.sourceToken);\n                else {\n                    if (this.atIndentedComment(it.start, map.indent)) {\n                        const prev = map.items[map.items.length - 2];\n                        const end = (_a = prev === null || prev === void 0 ? void 0 : prev.value) === null || _a === void 0 ? void 0 : _a.end;\n                        if (Array.isArray(end)) {\n                            Array.prototype.push.apply(end, it.start);\n                            end.push(this.sourceToken);\n                            map.items.pop();\n                            return;\n                        }\n                    }\n                    it.start.push(this.sourceToken);\n                }\n                return;\n        }\n        if (this.indent >= map.indent) {\n            const atNextItem = !this.onKeyLine &&\n                this.indent === map.indent &&\n                (it.sep || includesNonEmpty(it.start));\n            switch (this.type) {\n                case 'anchor':\n                case 'tag':\n                    if (atNextItem || it.value) {\n                        map.items.push({ start: [this.sourceToken] });\n                        this.onKeyLine = true;\n                    }\n                    else if (it.sep)\n                        it.sep.push(this.sourceToken);\n                    else\n                        it.start.push(this.sourceToken);\n                    return;\n                case 'explicit-key-ind':\n                    if (!it.sep && !includesToken(it.start, 'explicit-key-ind'))\n                        it.start.push(this.sourceToken);\n                    else if (atNextItem || it.value)\n                        map.items.push({ start: [this.sourceToken] });\n                    else\n                        this.stack.push({\n                            type: 'block-map',\n                            offset: this.offset,\n                            indent: this.indent,\n                            items: [{ start: [this.sourceToken] }]\n                        });\n                    this.onKeyLine = true;\n                    return;\n                case 'map-value-ind':\n                    if (!it.sep)\n                        Object.assign(it, { key: null, sep: [this.sourceToken] });\n                    else if (it.value ||\n                        (atNextItem && !includesToken(it.start, 'explicit-key-ind')))\n                        map.items.push({ start: [], key: null, sep: [this.sourceToken] });\n                    else if (includesToken(it.sep, 'map-value-ind'))\n                        this.stack.push({\n                            type: 'block-map',\n                            offset: this.offset,\n                            indent: this.indent,\n                            items: [{ start: [], key: null, sep: [this.sourceToken] }]\n                        });\n                    else if (includesToken(it.start, 'explicit-key-ind') &&\n                        isFlowToken(it.key) &&\n                        !includesToken(it.sep, 'newline')) {\n                        const start = getFirstKeyStartProps(it.start);\n                        const key = it.key;\n                        const sep = it.sep;\n                        sep.push(this.sourceToken);\n                        // @ts-ignore type guard is wrong here\n                        delete it.key, delete it.sep;\n                        this.stack.push({\n                            type: 'block-map',\n                            offset: this.offset,\n                            indent: this.indent,\n                            items: [{ start, key, sep }]\n                        });\n                    }\n                    else\n                        it.sep.push(this.sourceToken);\n                    this.onKeyLine = true;\n                    return;\n                case 'alias':\n                case 'scalar':\n                case 'single-quoted-scalar':\n                case 'double-quoted-scalar': {\n                    const fs = this.flowScalar(this.type);\n                    if (atNextItem || it.value) {\n                        map.items.push({ start: [], key: fs, sep: [] });\n                        this.onKeyLine = true;\n                    }\n                    else if (it.sep) {\n                        this.stack.push(fs);\n                    }\n                    else {\n                        Object.assign(it, { key: fs, sep: [] });\n                        this.onKeyLine = true;\n                    }\n                    return;\n                }\n                default: {\n                    const bv = this.startBlockValue(map);\n                    if (bv) {\n                        if (atNextItem &&\n                            bv.type !== 'block-seq' &&\n                            includesToken(it.start, 'explicit-key-ind'))\n                            map.items.push({ start: [] });\n                        this.stack.push(bv);\n                        return;\n                    }\n                }\n            }\n        }\n        yield* this.pop();\n        yield* this.step();\n    }\n    *blockSequence(seq) {\n        var _a;\n        const it = seq.items[seq.items.length - 1];\n        switch (this.type) {\n            case 'newline':\n                if (it.value) {\n                    const end = 'end' in it.value ? it.value.end : undefined;\n                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;\n                    if ((last === null || last === void 0 ? void 0 : last.type) === 'comment')\n                        end === null || end === void 0 ? void 0 : end.push(this.sourceToken);\n                    else\n                        seq.items.push({ start: [this.sourceToken] });\n                }\n                else\n                    it.start.push(this.sourceToken);\n                return;\n            case 'space':\n            case 'comment':\n                if (it.value)\n                    seq.items.push({ start: [this.sourceToken] });\n                else {\n                    if (this.atIndentedComment(it.start, seq.indent)) {\n                        const prev = seq.items[seq.items.length - 2];\n                        const end = (_a = prev === null || prev === void 0 ? void 0 : prev.value) === null || _a === void 0 ? void 0 : _a.end;\n                        if (Array.isArray(end)) {\n                            Array.prototype.push.apply(end, it.start);\n                            end.push(this.sourceToken);\n                            seq.items.pop();\n                            return;\n                        }\n                    }\n                    it.start.push(this.sourceToken);\n                }\n                return;\n            case 'anchor':\n            case 'tag':\n                if (it.value || this.indent <= seq.indent)\n                    break;\n                it.start.push(this.sourceToken);\n                return;\n            case 'seq-item-ind':\n                if (this.indent !== seq.indent)\n                    break;\n                if (it.value || includesToken(it.start, 'seq-item-ind'))\n                    seq.items.push({ start: [this.sourceToken] });\n                else\n                    it.start.push(this.sourceToken);\n                return;\n        }\n        if (this.indent > seq.indent) {\n            const bv = this.startBlockValue(seq);\n            if (bv) {\n                this.stack.push(bv);\n                return;\n            }\n        }\n        yield* this.pop();\n        yield* this.step();\n    }\n    *flowCollection(fc) {\n        const it = fc.items[fc.items.length - 1];\n        if (this.type === 'flow-error-end') {\n            let top;\n            do {\n                yield* this.pop();\n                top = this.peek(1);\n            } while (top && top.type === 'flow-collection');\n        }\n        else if (fc.end.length === 0) {\n            switch (this.type) {\n                case 'comma':\n                case 'explicit-key-ind':\n                    if (!it || it.sep)\n                        fc.items.push({ start: [this.sourceToken] });\n                    else\n                        it.start.push(this.sourceToken);\n                    return;\n                case 'map-value-ind':\n                    if (!it || it.value)\n                        fc.items.push({ start: [], key: null, sep: [this.sourceToken] });\n                    else if (it.sep)\n                        it.sep.push(this.sourceToken);\n                    else\n                        Object.assign(it, { key: null, sep: [this.sourceToken] });\n                    return;\n                case 'space':\n                case 'comment':\n                case 'newline':\n                case 'anchor':\n                case 'tag':\n                    if (!it || it.value)\n                        fc.items.push({ start: [this.sourceToken] });\n                    else if (it.sep)\n                        it.sep.push(this.sourceToken);\n                    else\n                        it.start.push(this.sourceToken);\n                    return;\n                case 'alias':\n                case 'scalar':\n                case 'single-quoted-scalar':\n                case 'double-quoted-scalar': {\n                    const fs = this.flowScalar(this.type);\n                    if (!it || it.value)\n                        fc.items.push({ start: [], key: fs, sep: [] });\n                    else if (it.sep)\n                        this.stack.push(fs);\n                    else\n                        Object.assign(it, { key: fs, sep: [] });\n                    return;\n                }\n                case 'flow-map-end':\n                case 'flow-seq-end':\n                    fc.end.push(this.sourceToken);\n                    return;\n            }\n            const bv = this.startBlockValue(fc);\n            /* istanbul ignore else should not happen */\n            if (bv)\n                this.stack.push(bv);\n            else {\n                yield* this.pop();\n                yield* this.step();\n            }\n        }\n        else {\n            const parent = this.peek(2);\n            if (parent.type === 'block-map' &&\n                (this.type === 'map-value-ind' ||\n                    (this.type === 'newline' &&\n                        !parent.items[parent.items.length - 1].sep))) {\n                yield* this.pop();\n                yield* this.step();\n            }\n            else if (this.type === 'map-value-ind' &&\n                parent.type !== 'flow-collection') {\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                fixFlowSeqItems(fc);\n                const sep = fc.end.splice(1, fc.end.length);\n                sep.push(this.sourceToken);\n                const map = {\n                    type: 'block-map',\n                    offset: fc.offset,\n                    indent: fc.indent,\n                    items: [{ start, key: fc, sep }]\n                };\n                this.onKeyLine = true;\n                this.stack[this.stack.length - 1] = map;\n            }\n            else {\n                yield* this.lineEnd(fc);\n            }\n        }\n    }\n    flowScalar(type) {\n        if (this.onNewLine) {\n            let nl = this.source.indexOf('\\n') + 1;\n            while (nl !== 0) {\n                this.onNewLine(this.offset + nl);\n                nl = this.source.indexOf('\\n', nl) + 1;\n            }\n        }\n        return {\n            type,\n            offset: this.offset,\n            indent: this.indent,\n            source: this.source\n        };\n    }\n    startBlockValue(parent) {\n        switch (this.type) {\n            case 'alias':\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return this.flowScalar(this.type);\n            case 'block-scalar-header':\n                return {\n                    type: 'block-scalar',\n                    offset: this.offset,\n                    indent: this.indent,\n                    props: [this.sourceToken],\n                    source: ''\n                };\n            case 'flow-map-start':\n            case 'flow-seq-start':\n                return {\n                    type: 'flow-collection',\n                    offset: this.offset,\n                    indent: this.indent,\n                    start: this.sourceToken,\n                    items: [],\n                    end: []\n                };\n            case 'seq-item-ind':\n                return {\n                    type: 'block-seq',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start: [this.sourceToken] }]\n                };\n            case 'explicit-key-ind': {\n                this.onKeyLine = true;\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                start.push(this.sourceToken);\n                return {\n                    type: 'block-map',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start }]\n                };\n            }\n            case 'map-value-ind': {\n                this.onKeyLine = true;\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                return {\n                    type: 'block-map',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start, key: null, sep: [this.sourceToken] }]\n                };\n            }\n        }\n        return null;\n    }\n    atIndentedComment(start, indent) {\n        if (this.type !== 'comment')\n            return false;\n        if (this.indent <= indent)\n            return false;\n        return start.every(st => st.type === 'newline' || st.type === 'space');\n    }\n    *documentEnd(docEnd) {\n        if (this.type !== 'doc-mode') {\n            if (docEnd.end)\n                docEnd.end.push(this.sourceToken);\n            else\n                docEnd.end = [this.sourceToken];\n            if (this.type === 'newline')\n                yield* this.pop();\n        }\n    }\n    *lineEnd(token) {\n        switch (this.type) {\n            case 'comma':\n            case 'doc-start':\n            case 'doc-end':\n            case 'flow-seq-end':\n            case 'flow-map-end':\n            case 'map-value-ind':\n                yield* this.pop();\n                yield* this.step();\n                break;\n            case 'newline':\n                this.onKeyLine = false;\n            // fallthrough\n            case 'space':\n            case 'comment':\n            default:\n                // all other values are errors\n                if (token.end)\n                    token.end.push(this.sourceToken);\n                else\n                    token.end = [this.sourceToken];\n                if (this.type === 'newline')\n                    yield* this.pop();\n        }\n    }\n}\n\nexports.Parser = Parser;\n","'use strict';\n\nvar composer = require('./compose/composer.js');\nvar Document = require('./doc/Document.js');\nvar errors = require('./errors.js');\nvar log = require('./log.js');\nvar lineCounter = require('./parse/line-counter.js');\nvar parser = require('./parse/parser.js');\n\nfunction parseOptions(options) {\n    const prettyErrors = !options || options.prettyErrors !== false;\n    const lineCounter$1 = (options && options.lineCounter) ||\n        (prettyErrors && new lineCounter.LineCounter()) ||\n        null;\n    return { lineCounter: lineCounter$1, prettyErrors };\n}\n/**\n * Parse the input as a stream of YAML documents.\n *\n * Documents should be separated from each other by `...` or `---` marker lines.\n *\n * @returns If an empty `docs` array is returned, it will be of type\n *   EmptyStream and contain additional stream information. In\n *   TypeScript, you should use `'empty' in docs` as a type guard for it.\n */\nfunction parseAllDocuments(source, options = {}) {\n    const { lineCounter, prettyErrors } = parseOptions(options);\n    const parser$1 = new parser.Parser(lineCounter === null || lineCounter === void 0 ? void 0 : lineCounter.addNewLine);\n    const composer$1 = new composer.Composer(options);\n    const docs = Array.from(composer$1.compose(parser$1.parse(source)));\n    if (prettyErrors && lineCounter)\n        for (const doc of docs) {\n            doc.errors.forEach(errors.prettifyError(source, lineCounter));\n            doc.warnings.forEach(errors.prettifyError(source, lineCounter));\n        }\n    if (docs.length > 0)\n        return docs;\n    return Object.assign([], { empty: true }, composer$1.streamInfo());\n}\n/** Parse an input string into a single YAML.Document */\nfunction parseDocument(source, options = {}) {\n    const { lineCounter, prettyErrors } = parseOptions(options);\n    const parser$1 = new parser.Parser(lineCounter === null || lineCounter === void 0 ? void 0 : lineCounter.addNewLine);\n    const composer$1 = new composer.Composer(options);\n    // `doc` is always set by compose.end(true) at the very latest\n    let doc = null;\n    for (const _doc of composer$1.compose(parser$1.parse(source), true, source.length)) {\n        if (!doc)\n            doc = _doc;\n        else if (doc.options.logLevel !== 'silent') {\n            doc.errors.push(new errors.YAMLParseError(_doc.range.slice(0, 2), 'MULTIPLE_DOCS', 'Source contains multiple documents; please use YAML.parseAllDocuments()'));\n            break;\n        }\n    }\n    if (prettyErrors && lineCounter) {\n        doc.errors.forEach(errors.prettifyError(source, lineCounter));\n        doc.warnings.forEach(errors.prettifyError(source, lineCounter));\n    }\n    return doc;\n}\nfunction parse(src, reviver, options) {\n    let _reviver = undefined;\n    if (typeof reviver === 'function') {\n        _reviver = reviver;\n    }\n    else if (options === undefined && reviver && typeof reviver === 'object') {\n        options = reviver;\n    }\n    const doc = parseDocument(src, options);\n    if (!doc)\n        return null;\n    doc.warnings.forEach(warning => log.warn(doc.options.logLevel, warning));\n    if (doc.errors.length > 0) {\n        if (doc.options.logLevel !== 'silent')\n            throw doc.errors[0];\n        else\n            doc.errors = [];\n    }\n    return doc.toJS(Object.assign({ reviver: _reviver }, options));\n}\nfunction stringify(value, replacer, options) {\n    let _replacer = null;\n    if (typeof replacer === 'function' || Array.isArray(replacer)) {\n        _replacer = replacer;\n    }\n    else if (options === undefined && replacer) {\n        options = replacer;\n    }\n    if (typeof options === 'string')\n        options = options.length;\n    if (typeof options === 'number') {\n        const indent = Math.round(options);\n        options = indent < 1 ? undefined : indent > 8 ? { indent: 8 } : { indent };\n    }\n    if (value === undefined) {\n        const { keepUndefined } = options || replacer || {};\n        if (!keepUndefined)\n            return undefined;\n    }\n    return new Document.Document(value, _replacer, options).toString(options);\n}\n\nexports.parse = parse;\nexports.parseAllDocuments = parseAllDocuments;\nexports.parseDocument = parseDocument;\nexports.stringify = stringify;\n","'use strict';\n\nvar Node = require('../nodes/Node.js');\nvar map = require('./common/map.js');\nvar seq = require('./common/seq.js');\nvar string = require('./common/string.js');\nvar tags = require('./tags.js');\n\nconst sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\nclass Schema {\n    constructor({ customTags, merge, resolveKnownTags, schema, sortMapEntries }) {\n        this.merge = !!merge;\n        this.name = schema || 'core';\n        this.knownTags = resolveKnownTags ? tags.coreKnownTags : {};\n        this.tags = tags.getTags(customTags, this.name);\n        Object.defineProperty(this, Node.MAP, { value: map.map });\n        Object.defineProperty(this, Node.SCALAR, { value: string.string });\n        Object.defineProperty(this, Node.SEQ, { value: seq.seq });\n        // Used by createMap()\n        this.sortMapEntries =\n            sortMapEntries === true ? sortMapEntriesByKey : sortMapEntries || null;\n    }\n}\n\nexports.Schema = Schema;\n","'use strict';\n\nvar Node = require('../../nodes/Node.js');\nvar Pair = require('../../nodes/Pair.js');\nvar YAMLMap = require('../../nodes/YAMLMap.js');\n\nfunction createMap(schema, obj, ctx) {\n    const { keepUndefined, replacer } = ctx;\n    const map = new YAMLMap.YAMLMap(schema);\n    const add = (key, value) => {\n        if (typeof replacer === 'function')\n            value = replacer.call(obj, key, value);\n        else if (Array.isArray(replacer) && !replacer.includes(key))\n            return;\n        if (value !== undefined || keepUndefined)\n            map.items.push(Pair.createPair(key, value, ctx));\n    };\n    if (obj instanceof Map) {\n        for (const [key, value] of obj)\n            add(key, value);\n    }\n    else if (obj && typeof obj === 'object') {\n        for (const key of Object.keys(obj))\n            add(key, obj[key]);\n    }\n    if (typeof schema.sortMapEntries === 'function') {\n        map.items.sort(schema.sortMapEntries);\n    }\n    return map;\n}\nconst map = {\n    collection: 'map',\n    createNode: createMap,\n    default: true,\n    nodeClass: YAMLMap.YAMLMap,\n    tag: 'tag:yaml.org,2002:map',\n    resolve(map, onError) {\n        if (!Node.isMap(map))\n            onError('Expected a mapping for this tag');\n        return map;\n    }\n};\n\nexports.map = map;\n","'use strict';\n\nvar Scalar = require('../../nodes/Scalar.js');\n\nconst nullTag = {\n    identify: value => value == null,\n    createNode: () => new Scalar.Scalar(null),\n    default: true,\n    tag: 'tag:yaml.org,2002:null',\n    test: /^(?:~|[Nn]ull|NULL)?$/,\n    resolve: () => new Scalar.Scalar(null),\n    stringify: ({ source }, ctx) => source && nullTag.test.test(source) ? source : ctx.options.nullStr\n};\n\nexports.nullTag = nullTag;\n","'use strict';\n\nvar createNode = require('../../doc/createNode.js');\nvar Node = require('../../nodes/Node.js');\nvar YAMLSeq = require('../../nodes/YAMLSeq.js');\n\nfunction createSeq(schema, obj, ctx) {\n    const { replacer } = ctx;\n    const seq = new YAMLSeq.YAMLSeq(schema);\n    if (obj && Symbol.iterator in Object(obj)) {\n        let i = 0;\n        for (let it of obj) {\n            if (typeof replacer === 'function') {\n                const key = obj instanceof Set ? it : String(i++);\n                it = replacer.call(obj, key, it);\n            }\n            seq.items.push(createNode.createNode(it, undefined, ctx));\n        }\n    }\n    return seq;\n}\nconst seq = {\n    collection: 'seq',\n    createNode: createSeq,\n    default: true,\n    nodeClass: YAMLSeq.YAMLSeq,\n    tag: 'tag:yaml.org,2002:seq',\n    resolve(seq, onError) {\n        if (!Node.isSeq(seq))\n            onError('Expected a sequence for this tag');\n        return seq;\n    }\n};\n\nexports.seq = seq;\n","'use strict';\n\nvar stringifyString = require('../../stringify/stringifyString.js');\n\nconst string = {\n    identify: value => typeof value === 'string',\n    default: true,\n    tag: 'tag:yaml.org,2002:str',\n    resolve: str => str,\n    stringify(item, ctx, onComment, onChompKeep) {\n        ctx = Object.assign({ actualString: true }, ctx);\n        return stringifyString.stringifyString(item, ctx, onComment, onChompKeep);\n    }\n};\n\nexports.string = string;\n","'use strict';\n\nvar Scalar = require('../../nodes/Scalar.js');\n\nconst boolTag = {\n    identify: value => typeof value === 'boolean',\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,\n    resolve: str => new Scalar.Scalar(str[0] === 't' || str[0] === 'T'),\n    stringify({ source, value }, ctx) {\n        if (source && boolTag.test.test(source)) {\n            const sv = source[0] === 't' || source[0] === 'T';\n            if (value === sv)\n                return source;\n        }\n        return value ? ctx.options.trueStr : ctx.options.falseStr;\n    }\n};\n\nexports.boolTag = boolTag;\n","'use strict';\n\nvar Scalar = require('../../nodes/Scalar.js');\nvar stringifyNumber = require('../../stringify/stringifyNumber.js');\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^(?:[-+]?\\.(?:inf|Inf|INF|nan|NaN|NAN))$/,\n    resolve: str => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber.stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\n    resolve: str => parseFloat(str),\n    stringify: ({ value }) => Number(value).toExponential()\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,\n    resolve(str) {\n        const node = new Scalar.Scalar(parseFloat(str));\n        const dot = str.indexOf('.');\n        if (dot !== -1 && str[str.length - 1] === '0')\n            node.minFractionDigits = str.length - dot - 1;\n        return node;\n    },\n    stringify: stringifyNumber.stringifyNumber\n};\n\nexports.float = float;\nexports.floatExp = floatExp;\nexports.floatNaN = floatNaN;\n","'use strict';\n\nvar stringifyNumber = require('../../stringify/stringifyNumber.js');\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nconst intResolve = (str, offset, radix, { intAsBigInt }) => (intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix));\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value) && value >= 0)\n        return prefix + value.toString(radix);\n    return stringifyNumber.stringifyNumber(node);\n}\nconst intOct = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^0o[0-7]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),\n    stringify: node => intStringify(node, 8, '0o')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber.stringifyNumber\n};\nconst intHex = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^0x[0-9a-fA-F]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexports.int = int;\nexports.intHex = intHex;\nexports.intOct = intOct;\n","'use strict';\n\nvar map = require('../common/map.js');\nvar _null = require('../common/null.js');\nvar seq = require('../common/seq.js');\nvar string = require('../common/string.js');\nvar bool = require('./bool.js');\nvar float = require('./float.js');\nvar int = require('./int.js');\n\nconst schema = [\n    map.map,\n    seq.seq,\n    string.string,\n    _null.nullTag,\n    bool.boolTag,\n    int.intOct,\n    int.int,\n    int.intHex,\n    float.floatNaN,\n    float.floatExp,\n    float.float\n];\n\nexports.schema = schema;\n","'use strict';\n\nvar Scalar = require('../../nodes/Scalar.js');\nvar map = require('../common/map.js');\nvar seq = require('../common/seq.js');\n\nfunction intIdentify(value) {\n    return typeof value === 'bigint' || Number.isInteger(value);\n}\nconst stringifyJSON = ({ value }) => JSON.stringify(value);\nconst jsonScalars = [\n    {\n        identify: value => typeof value === 'string',\n        default: true,\n        tag: 'tag:yaml.org,2002:str',\n        resolve: str => str,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => value == null,\n        createNode: () => new Scalar.Scalar(null),\n        default: true,\n        tag: 'tag:yaml.org,2002:null',\n        test: /^null$/,\n        resolve: () => null,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => typeof value === 'boolean',\n        default: true,\n        tag: 'tag:yaml.org,2002:bool',\n        test: /^true|false$/,\n        resolve: str => str === 'true',\n        stringify: stringifyJSON\n    },\n    {\n        identify: intIdentify,\n        default: true,\n        tag: 'tag:yaml.org,2002:int',\n        test: /^-?(?:0|[1-9][0-9]*)$/,\n        resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),\n        stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)\n    },\n    {\n        identify: value => typeof value === 'number',\n        default: true,\n        tag: 'tag:yaml.org,2002:float',\n        test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n        resolve: str => parseFloat(str),\n        stringify: stringifyJSON\n    }\n];\nconst jsonError = {\n    default: true,\n    tag: '',\n    test: /^/,\n    resolve(str, onError) {\n        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);\n        return str;\n    }\n};\nconst schema = [map.map, seq.seq].concat(jsonScalars, jsonError);\n\nexports.schema = schema;\n","'use strict';\n\nvar map = require('./common/map.js');\nvar _null = require('./common/null.js');\nvar seq = require('./common/seq.js');\nvar string = require('./common/string.js');\nvar bool = require('./core/bool.js');\nvar float = require('./core/float.js');\nvar int = require('./core/int.js');\nvar schema = require('./core/schema.js');\nvar schema$1 = require('./json/schema.js');\nvar binary = require('./yaml-1.1/binary.js');\nvar omap = require('./yaml-1.1/omap.js');\nvar pairs = require('./yaml-1.1/pairs.js');\nvar schema$2 = require('./yaml-1.1/schema.js');\nvar set = require('./yaml-1.1/set.js');\nvar timestamp = require('./yaml-1.1/timestamp.js');\n\nconst schemas = {\n    core: schema.schema,\n    failsafe: [map.map, seq.seq, string.string],\n    json: schema$1.schema,\n    yaml11: schema$2.schema,\n    'yaml-1.1': schema$2.schema\n};\nconst tagsByName = {\n    binary: binary.binary,\n    bool: bool.boolTag,\n    float: float.float,\n    floatExp: float.floatExp,\n    floatNaN: float.floatNaN,\n    floatTime: timestamp.floatTime,\n    int: int.int,\n    intHex: int.intHex,\n    intOct: int.intOct,\n    intTime: timestamp.intTime,\n    map: map.map,\n    null: _null.nullTag,\n    omap: omap.omap,\n    pairs: pairs.pairs,\n    seq: seq.seq,\n    set: set.set,\n    timestamp: timestamp.timestamp\n};\nconst coreKnownTags = {\n    'tag:yaml.org,2002:binary': binary.binary,\n    'tag:yaml.org,2002:omap': omap.omap,\n    'tag:yaml.org,2002:pairs': pairs.pairs,\n    'tag:yaml.org,2002:set': set.set,\n    'tag:yaml.org,2002:timestamp': timestamp.timestamp\n};\nfunction getTags(customTags, schemaName) {\n    let tags = schemas[schemaName];\n    if (!tags) {\n        const keys = Object.keys(schemas)\n            .filter(key => key !== 'yaml11')\n            .map(key => JSON.stringify(key))\n            .join(', ');\n        throw new Error(`Unknown schema \"${schemaName}\"; use one of ${keys}`);\n    }\n    if (Array.isArray(customTags)) {\n        for (const tag of customTags)\n            tags = tags.concat(tag);\n    }\n    else if (typeof customTags === 'function') {\n        tags = customTags(tags.slice());\n    }\n    return tags.map(tag => {\n        if (typeof tag !== 'string')\n            return tag;\n        const tagObj = tagsByName[tag];\n        if (tagObj)\n            return tagObj;\n        const keys = Object.keys(tagsByName)\n            .map(key => JSON.stringify(key))\n            .join(', ');\n        throw new Error(`Unknown custom tag \"${tag}\"; use one of ${keys}`);\n    });\n}\n\nexports.coreKnownTags = coreKnownTags;\nexports.getTags = getTags;\n","'use strict';\n\nvar Scalar = require('../../nodes/Scalar.js');\nvar stringifyString = require('../../stringify/stringifyString.js');\n\nconst binary = {\n    identify: value => value instanceof Uint8Array,\n    default: false,\n    tag: 'tag:yaml.org,2002:binary',\n    /**\n     * Returns a Buffer in node and an Uint8Array in browsers\n     *\n     * To use the resulting buffer as an image, you'll want to do something like:\n     *\n     *   const blob = new Blob([buffer], { type: 'image/jpeg' })\n     *   document.querySelector('#photo').src = URL.createObjectURL(blob)\n     */\n    resolve(src, onError) {\n        if (typeof Buffer === 'function') {\n            return Buffer.from(src, 'base64');\n        }\n        else if (typeof atob === 'function') {\n            // On IE 11, atob() can't handle newlines\n            const str = atob(src.replace(/[\\n\\r]/g, ''));\n            const buffer = new Uint8Array(str.length);\n            for (let i = 0; i < str.length; ++i)\n                buffer[i] = str.charCodeAt(i);\n            return buffer;\n        }\n        else {\n            onError('This environment does not support reading binary tags; either Buffer or atob is required');\n            return src;\n        }\n    },\n    stringify({ comment, type, value }, ctx, onComment, onChompKeep) {\n        const buf = value; // checked earlier by binary.identify()\n        let str;\n        if (typeof Buffer === 'function') {\n            str =\n                buf instanceof Buffer\n                    ? buf.toString('base64')\n                    : Buffer.from(buf.buffer).toString('base64');\n        }\n        else if (typeof btoa === 'function') {\n            let s = '';\n            for (let i = 0; i < buf.length; ++i)\n                s += String.fromCharCode(buf[i]);\n            str = btoa(s);\n        }\n        else {\n            throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');\n        }\n        if (!type)\n            type = Scalar.Scalar.BLOCK_LITERAL;\n        if (type !== Scalar.Scalar.QUOTE_DOUBLE) {\n            const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);\n            const n = Math.ceil(str.length / lineWidth);\n            const lines = new Array(n);\n            for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {\n                lines[i] = str.substr(o, lineWidth);\n            }\n            str = lines.join(type === Scalar.Scalar.BLOCK_LITERAL ? '\\n' : ' ');\n        }\n        return stringifyString.stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);\n    }\n};\n\nexports.binary = binary;\n","'use strict';\n\nvar Scalar = require('../../nodes/Scalar.js');\n\nfunction boolStringify({ value, source }, ctx) {\n    const boolObj = value ? trueTag : falseTag;\n    if (source && boolObj.test.test(source))\n        return source;\n    return value ? ctx.options.trueStr : ctx.options.falseStr;\n}\nconst trueTag = {\n    identify: value => value === true,\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,\n    resolve: () => new Scalar.Scalar(true),\n    stringify: boolStringify\n};\nconst falseTag = {\n    identify: value => value === false,\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,\n    resolve: () => new Scalar.Scalar(false),\n    stringify: boolStringify\n};\n\nexports.falseTag = falseTag;\nexports.trueTag = trueTag;\n","'use strict';\n\nvar Scalar = require('../../nodes/Scalar.js');\nvar stringifyNumber = require('../../stringify/stringifyNumber.js');\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?\\.(?:inf|Inf|INF|nan|NaN|NAN)$/,\n    resolve: (str) => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber.stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\\.[0-9_]*)?[eE][-+]?[0-9]+$/,\n    resolve: (str) => parseFloat(str.replace(/_/g, '')),\n    stringify: ({ value }) => Number(value).toExponential()\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:[0-9][0-9_]*)?\\.[0-9_]*$/,\n    resolve(str) {\n        const node = new Scalar.Scalar(parseFloat(str.replace(/_/g, '')));\n        const dot = str.indexOf('.');\n        if (dot !== -1) {\n            const f = str.substring(dot + 1).replace(/_/g, '');\n            if (f[f.length - 1] === '0')\n                node.minFractionDigits = f.length;\n        }\n        return node;\n    },\n    stringify: stringifyNumber.stringifyNumber\n};\n\nexports.float = float;\nexports.floatExp = floatExp;\nexports.floatNaN = floatNaN;\n","'use strict';\n\nvar stringifyNumber = require('../../stringify/stringifyNumber.js');\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nfunction intResolve(str, offset, radix, { intAsBigInt }) {\n    const sign = str[0];\n    if (sign === '-' || sign === '+')\n        offset += 1;\n    str = str.substring(offset).replace(/_/g, '');\n    if (intAsBigInt) {\n        switch (radix) {\n            case 2:\n                str = `0b${str}`;\n                break;\n            case 8:\n                str = `0o${str}`;\n                break;\n            case 16:\n                str = `0x${str}`;\n                break;\n        }\n        const n = BigInt(str);\n        return sign === '-' ? BigInt(-1) * n : n;\n    }\n    const n = parseInt(str, radix);\n    return sign === '-' ? -1 * n : n;\n}\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value)) {\n        const str = value.toString(radix);\n        return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;\n    }\n    return stringifyNumber.stringifyNumber(node);\n}\nconst intBin = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'BIN',\n    test: /^[-+]?0b[0-1_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),\n    stringify: node => intStringify(node, 2, '0b')\n};\nconst intOct = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^[-+]?0[0-7_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),\n    stringify: node => intStringify(node, 8, '0')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9][0-9_]*$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber.stringifyNumber\n};\nconst intHex = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^[-+]?0x[0-9a-fA-F_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexports.int = int;\nexports.intBin = intBin;\nexports.intHex = intHex;\nexports.intOct = intOct;\n","'use strict';\n\nvar YAMLSeq = require('../../nodes/YAMLSeq.js');\nvar toJS = require('../../nodes/toJS.js');\nvar Node = require('../../nodes/Node.js');\nvar YAMLMap = require('../../nodes/YAMLMap.js');\nvar pairs = require('./pairs.js');\n\nclass YAMLOMap extends YAMLSeq.YAMLSeq {\n    constructor() {\n        super();\n        this.add = YAMLMap.YAMLMap.prototype.add.bind(this);\n        this.delete = YAMLMap.YAMLMap.prototype.delete.bind(this);\n        this.get = YAMLMap.YAMLMap.prototype.get.bind(this);\n        this.has = YAMLMap.YAMLMap.prototype.has.bind(this);\n        this.set = YAMLMap.YAMLMap.prototype.set.bind(this);\n        this.tag = YAMLOMap.tag;\n    }\n    /**\n     * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,\n     * but TypeScript won't allow widening the signature of a child method.\n     */\n    toJSON(_, ctx) {\n        if (!ctx)\n            return super.toJSON(_);\n        const map = new Map();\n        if (ctx && ctx.onCreate)\n            ctx.onCreate(map);\n        for (const pair of this.items) {\n            let key, value;\n            if (Node.isPair(pair)) {\n                key = toJS.toJS(pair.key, '', ctx);\n                value = toJS.toJS(pair.value, key, ctx);\n            }\n            else {\n                key = toJS.toJS(pair, '', ctx);\n            }\n            if (map.has(key))\n                throw new Error('Ordered maps must not include duplicate keys');\n            map.set(key, value);\n        }\n        return map;\n    }\n}\nYAMLOMap.tag = 'tag:yaml.org,2002:omap';\nconst omap = {\n    collection: 'seq',\n    identify: value => value instanceof Map,\n    nodeClass: YAMLOMap,\n    default: false,\n    tag: 'tag:yaml.org,2002:omap',\n    resolve(seq, onError) {\n        const pairs$1 = pairs.resolvePairs(seq, onError);\n        const seenKeys = [];\n        for (const { key } of pairs$1.items) {\n            if (Node.isScalar(key)) {\n                if (seenKeys.includes(key.value)) {\n                    onError(`Ordered maps must not include duplicate keys: ${key.value}`);\n                }\n                else {\n                    seenKeys.push(key.value);\n                }\n            }\n        }\n        return Object.assign(new YAMLOMap(), pairs$1);\n    },\n    createNode(schema, iterable, ctx) {\n        const pairs$1 = pairs.createPairs(schema, iterable, ctx);\n        const omap = new YAMLOMap();\n        omap.items = pairs$1.items;\n        return omap;\n    }\n};\n\nexports.YAMLOMap = YAMLOMap;\nexports.omap = omap;\n","'use strict';\n\nvar Node = require('../../nodes/Node.js');\nvar Pair = require('../../nodes/Pair.js');\nvar Scalar = require('../../nodes/Scalar.js');\nvar YAMLSeq = require('../../nodes/YAMLSeq.js');\n\nfunction resolvePairs(seq, onError) {\n    if (Node.isSeq(seq)) {\n        for (let i = 0; i < seq.items.length; ++i) {\n            let item = seq.items[i];\n            if (Node.isPair(item))\n                continue;\n            else if (Node.isMap(item)) {\n                if (item.items.length > 1)\n                    onError('Each pair must have its own sequence indicator');\n                const pair = item.items[0] || new Pair.Pair(new Scalar.Scalar(null));\n                if (item.commentBefore)\n                    pair.key.commentBefore = pair.key.commentBefore\n                        ? `${item.commentBefore}\\n${pair.key.commentBefore}`\n                        : item.commentBefore;\n                if (item.comment) {\n                    const cn = pair.value || pair.key;\n                    cn.comment = cn.comment\n                        ? `${item.comment}\\n${cn.comment}`\n                        : item.comment;\n                }\n                item = pair;\n            }\n            seq.items[i] = Node.isPair(item) ? item : new Pair.Pair(item);\n        }\n    }\n    else\n        onError('Expected a sequence for this tag');\n    return seq;\n}\nfunction createPairs(schema, iterable, ctx) {\n    const { replacer } = ctx;\n    const pairs = new YAMLSeq.YAMLSeq(schema);\n    pairs.tag = 'tag:yaml.org,2002:pairs';\n    let i = 0;\n    if (iterable && Symbol.iterator in Object(iterable))\n        for (let it of iterable) {\n            if (typeof replacer === 'function')\n                it = replacer.call(iterable, String(i++), it);\n            let key, value;\n            if (Array.isArray(it)) {\n                if (it.length === 2) {\n                    key = it[0];\n                    value = it[1];\n                }\n                else\n                    throw new TypeError(`Expected [key, value] tuple: ${it}`);\n            }\n            else if (it && it instanceof Object) {\n                const keys = Object.keys(it);\n                if (keys.length === 1) {\n                    key = keys[0];\n                    value = it[key];\n                }\n                else\n                    throw new TypeError(`Expected { key: value } tuple: ${it}`);\n            }\n            else {\n                key = it;\n            }\n            pairs.items.push(Pair.createPair(key, value, ctx));\n        }\n    return pairs;\n}\nconst pairs = {\n    collection: 'seq',\n    default: false,\n    tag: 'tag:yaml.org,2002:pairs',\n    resolve: resolvePairs,\n    createNode: createPairs\n};\n\nexports.createPairs = createPairs;\nexports.pairs = pairs;\nexports.resolvePairs = resolvePairs;\n","'use strict';\n\nvar map = require('../common/map.js');\nvar _null = require('../common/null.js');\nvar seq = require('../common/seq.js');\nvar string = require('../common/string.js');\nvar binary = require('./binary.js');\nvar bool = require('./bool.js');\nvar float = require('./float.js');\nvar int = require('./int.js');\nvar omap = require('./omap.js');\nvar pairs = require('./pairs.js');\nvar set = require('./set.js');\nvar timestamp = require('./timestamp.js');\n\nconst schema = [\n    map.map,\n    seq.seq,\n    string.string,\n    _null.nullTag,\n    bool.trueTag,\n    bool.falseTag,\n    int.intBin,\n    int.intOct,\n    int.int,\n    int.intHex,\n    float.floatNaN,\n    float.floatExp,\n    float.float,\n    binary.binary,\n    omap.omap,\n    pairs.pairs,\n    set.set,\n    timestamp.intTime,\n    timestamp.floatTime,\n    timestamp.timestamp\n];\n\nexports.schema = schema;\n","'use strict';\n\nvar Node = require('../../nodes/Node.js');\nvar Pair = require('../../nodes/Pair.js');\nvar YAMLMap = require('../../nodes/YAMLMap.js');\n\nclass YAMLSet extends YAMLMap.YAMLMap {\n    constructor(schema) {\n        super(schema);\n        this.tag = YAMLSet.tag;\n    }\n    add(key) {\n        let pair;\n        if (Node.isPair(key))\n            pair = key;\n        else if (typeof key === 'object' &&\n            'key' in key &&\n            'value' in key &&\n            key.value === null)\n            pair = new Pair.Pair(key.key, null);\n        else\n            pair = new Pair.Pair(key, null);\n        const prev = YAMLMap.findPair(this.items, pair.key);\n        if (!prev)\n            this.items.push(pair);\n    }\n    get(key, keepPair) {\n        const pair = YAMLMap.findPair(this.items, key);\n        return !keepPair && Node.isPair(pair)\n            ? Node.isScalar(pair.key)\n                ? pair.key.value\n                : pair.key\n            : pair;\n    }\n    set(key, value) {\n        if (typeof value !== 'boolean')\n            throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);\n        const prev = YAMLMap.findPair(this.items, key);\n        if (prev && !value) {\n            this.items.splice(this.items.indexOf(prev), 1);\n        }\n        else if (!prev && value) {\n            this.items.push(new Pair.Pair(key));\n        }\n    }\n    toJSON(_, ctx) {\n        return super.toJSON(_, ctx, Set);\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        if (this.hasAllNullValues(true))\n            return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);\n        else\n            throw new Error('Set items must all have null values');\n    }\n}\nYAMLSet.tag = 'tag:yaml.org,2002:set';\nconst set = {\n    collection: 'map',\n    identify: value => value instanceof Set,\n    nodeClass: YAMLSet,\n    default: false,\n    tag: 'tag:yaml.org,2002:set',\n    resolve(map, onError) {\n        if (Node.isMap(map)) {\n            if (map.hasAllNullValues(true))\n                return Object.assign(new YAMLSet(), map);\n            else\n                onError('Set items must all have null values');\n        }\n        else\n            onError('Expected a mapping for this tag');\n        return map;\n    },\n    createNode(schema, iterable, ctx) {\n        const { replacer } = ctx;\n        const set = new YAMLSet(schema);\n        if (iterable && Symbol.iterator in Object(iterable))\n            for (let value of iterable) {\n                if (typeof replacer === 'function')\n                    value = replacer.call(iterable, value, value);\n                set.items.push(Pair.createPair(value, null, ctx));\n            }\n        return set;\n    }\n};\n\nexports.YAMLSet = YAMLSet;\nexports.set = set;\n","'use strict';\n\nvar stringifyNumber = require('../../stringify/stringifyNumber.js');\n\n/** Internal types handle bigint as number, because TS can't figure it out. */\nfunction parseSexagesimal(str, asBigInt) {\n    const sign = str[0];\n    const parts = sign === '-' || sign === '+' ? str.substring(1) : str;\n    const num = (n) => asBigInt ? BigInt(n) : Number(n);\n    const res = parts\n        .replace(/_/g, '')\n        .split(':')\n        .reduce((res, p) => res * num(60) + num(p), num(0));\n    return (sign === '-' ? num(-1) * res : res);\n}\n/**\n * hhhh:mm:ss.sss\n *\n * Internal types handle bigint as number, because TS can't figure it out.\n */\nfunction stringifySexagesimal(node) {\n    let { value } = node;\n    let num = (n) => n;\n    if (typeof value === 'bigint')\n        num = n => BigInt(n);\n    else if (isNaN(value) || !isFinite(value))\n        return stringifyNumber.stringifyNumber(node);\n    let sign = '';\n    if (value < 0) {\n        sign = '-';\n        value *= num(-1);\n    }\n    const _60 = num(60);\n    const parts = [value % _60]; // seconds, including ms\n    if (value < 60) {\n        parts.unshift(0); // at least one : is required\n    }\n    else {\n        value = (value - parts[0]) / _60;\n        parts.unshift(value % _60); // minutes\n        if (value >= 60) {\n            value = (value - parts[0]) / _60;\n            parts.unshift(value); // hours\n        }\n    }\n    return (sign +\n        parts\n            .map(n => (n < 10 ? '0' + String(n) : String(n)))\n            .join(':')\n            .replace(/000000\\d*$/, '') // % 60 may introduce error\n    );\n}\nconst intTime = {\n    identify: value => typeof value === 'bigint' || Number.isInteger(value),\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,\n    resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),\n    stringify: stringifySexagesimal\n};\nconst floatTime = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*$/,\n    resolve: str => parseSexagesimal(str, false),\n    stringify: stringifySexagesimal\n};\nconst timestamp = {\n    identify: value => value instanceof Date,\n    default: true,\n    tag: 'tag:yaml.org,2002:timestamp',\n    // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part\n    // may be omitted altogether, resulting in a date format. In such a case, the time part is\n    // assumed to be 00:00:00Z (start of day, UTC).\n    test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd\n        '(?:' + // time is optional\n        '(?:t|T|[ \\\\t]+)' + // t | T | whitespace\n        '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?\n        '(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30\n        ')?$'),\n    resolve(str) {\n        const match = str.match(timestamp.test);\n        if (!match)\n            throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');\n        const [, year, month, day, hour, minute, second] = match.map(Number);\n        const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;\n        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);\n        const tz = match[8];\n        if (tz && tz !== 'Z') {\n            let d = parseSexagesimal(tz, false);\n            if (Math.abs(d) < 30)\n                d *= 60;\n            date -= 60000 * d;\n        }\n        return new Date(date);\n    },\n    stringify: ({ value }) => value.toISOString().replace(/((T00:00)?:00)?\\.000Z$/, '')\n};\n\nexports.floatTime = floatTime;\nexports.intTime = intTime;\nexports.timestamp = timestamp;\n","'use strict';\n\nconst FOLD_FLOW = 'flow';\nconst FOLD_BLOCK = 'block';\nconst FOLD_QUOTED = 'quoted';\n/**\n * Tries to keep input at up to `lineWidth` characters, splitting only on spaces\n * not followed by newlines or spaces unless `mode` is `'quoted'`. Lines are\n * terminated with `\\n` and started with `indent`.\n */\nfunction foldFlowLines(text, indent, mode = 'flow', { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {\n    if (!lineWidth || lineWidth < 0)\n        return text;\n    const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);\n    if (text.length <= endStep)\n        return text;\n    const folds = [];\n    const escapedFolds = {};\n    let end = lineWidth - indent.length;\n    if (typeof indentAtStart === 'number') {\n        if (indentAtStart > lineWidth - Math.max(2, minContentWidth))\n            folds.push(0);\n        else\n            end = lineWidth - indentAtStart;\n    }\n    let split = undefined;\n    let prev = undefined;\n    let overflow = false;\n    let i = -1;\n    let escStart = -1;\n    let escEnd = -1;\n    if (mode === FOLD_BLOCK) {\n        i = consumeMoreIndentedLines(text, i);\n        if (i !== -1)\n            end = i + endStep;\n    }\n    for (let ch; (ch = text[(i += 1)]);) {\n        if (mode === FOLD_QUOTED && ch === '\\\\') {\n            escStart = i;\n            switch (text[i + 1]) {\n                case 'x':\n                    i += 3;\n                    break;\n                case 'u':\n                    i += 5;\n                    break;\n                case 'U':\n                    i += 9;\n                    break;\n                default:\n                    i += 1;\n            }\n            escEnd = i;\n        }\n        if (ch === '\\n') {\n            if (mode === FOLD_BLOCK)\n                i = consumeMoreIndentedLines(text, i);\n            end = i + endStep;\n            split = undefined;\n        }\n        else {\n            if (ch === ' ' &&\n                prev &&\n                prev !== ' ' &&\n                prev !== '\\n' &&\n                prev !== '\\t') {\n                // space surrounded by non-space can be replaced with newline + indent\n                const next = text[i + 1];\n                if (next && next !== ' ' && next !== '\\n' && next !== '\\t')\n                    split = i;\n            }\n            if (i >= end) {\n                if (split) {\n                    folds.push(split);\n                    end = split + endStep;\n                    split = undefined;\n                }\n                else if (mode === FOLD_QUOTED) {\n                    // white-space collected at end may stretch past lineWidth\n                    while (prev === ' ' || prev === '\\t') {\n                        prev = ch;\n                        ch = text[(i += 1)];\n                        overflow = true;\n                    }\n                    // Account for newline escape, but don't break preceding escape\n                    const j = i > escEnd + 1 ? i - 2 : escStart - 1;\n                    // Bail out if lineWidth & minContentWidth are shorter than an escape string\n                    if (escapedFolds[j])\n                        return text;\n                    folds.push(j);\n                    escapedFolds[j] = true;\n                    end = j + endStep;\n                    split = undefined;\n                }\n                else {\n                    overflow = true;\n                }\n            }\n        }\n        prev = ch;\n    }\n    if (overflow && onOverflow)\n        onOverflow();\n    if (folds.length === 0)\n        return text;\n    if (onFold)\n        onFold();\n    let res = text.slice(0, folds[0]);\n    for (let i = 0; i < folds.length; ++i) {\n        const fold = folds[i];\n        const end = folds[i + 1] || text.length;\n        if (fold === 0)\n            res = `\\n${indent}${text.slice(0, end)}`;\n        else {\n            if (mode === FOLD_QUOTED && escapedFolds[fold])\n                res += `${text[fold]}\\\\`;\n            res += `\\n${indent}${text.slice(fold + 1, end)}`;\n        }\n    }\n    return res;\n}\n/**\n * Presumes `i + 1` is at the start of a line\n * @returns index of last newline in more-indented block\n */\nfunction consumeMoreIndentedLines(text, i) {\n    let ch = text[i + 1];\n    while (ch === ' ' || ch === '\\t') {\n        do {\n            ch = text[(i += 1)];\n        } while (ch && ch !== '\\n');\n        ch = text[i + 1];\n    }\n    return i;\n}\n\nexports.FOLD_BLOCK = FOLD_BLOCK;\nexports.FOLD_FLOW = FOLD_FLOW;\nexports.FOLD_QUOTED = FOLD_QUOTED;\nexports.foldFlowLines = foldFlowLines;\n","'use strict';\n\nvar anchors = require('../doc/anchors.js');\nvar Node = require('../nodes/Node.js');\nvar stringifyString = require('./stringifyString.js');\n\nconst createStringifyContext = (doc, options) => ({\n    anchors: new Set(),\n    doc,\n    indent: '',\n    indentStep: typeof options.indent === 'number' ? ' '.repeat(options.indent) : '  ',\n    options: Object.assign({\n        defaultKeyType: null,\n        defaultStringType: 'PLAIN',\n        directives: null,\n        doubleQuotedAsJSON: false,\n        doubleQuotedMinMultiLineLength: 40,\n        falseStr: 'false',\n        indentSeq: true,\n        lineWidth: 80,\n        minContentWidth: 20,\n        nullStr: 'null',\n        simpleKeys: false,\n        singleQuote: false,\n        trueStr: 'true',\n        verifyAliasOrder: true\n    }, options)\n});\nfunction getTagObject(tags, item) {\n    if (item.tag) {\n        const match = tags.filter(t => t.tag === item.tag);\n        if (match.length > 0)\n            return match.find(t => t.format === item.format) || match[0];\n    }\n    let tagObj = undefined;\n    let obj;\n    if (Node.isScalar(item)) {\n        obj = item.value;\n        const match = tags.filter(t => t.identify && t.identify(obj));\n        tagObj =\n            match.find(t => t.format === item.format) || match.find(t => !t.format);\n    }\n    else {\n        obj = item;\n        tagObj = tags.find(t => t.nodeClass && obj instanceof t.nodeClass);\n    }\n    if (!tagObj) {\n        // @ts-ignore\n        const name = obj && obj.constructor ? obj.constructor.name : typeof obj;\n        throw new Error(`Tag not resolved for ${name} value`);\n    }\n    return tagObj;\n}\n// needs to be called before value stringifier to allow for circular anchor refs\nfunction stringifyProps(node, tagObj, { anchors: anchors$1, doc }) {\n    const props = [];\n    const anchor = (Node.isScalar(node) || Node.isCollection(node)) && node.anchor;\n    if (anchor && anchors.anchorIsValid(anchor)) {\n        anchors$1.add(anchor);\n        props.push(`&${anchor}`);\n    }\n    if (node.tag) {\n        props.push(doc.directives.tagString(node.tag));\n    }\n    else if (!tagObj.default) {\n        props.push(doc.directives.tagString(tagObj.tag));\n    }\n    return props.join(' ');\n}\nfunction stringify(item, ctx, onComment, onChompKeep) {\n    if (Node.isPair(item))\n        return item.toString(ctx, onComment, onChompKeep);\n    if (Node.isAlias(item))\n        return item.toString(ctx);\n    let tagObj = undefined;\n    const node = Node.isNode(item)\n        ? item\n        : ctx.doc.createNode(item, { onTagObj: o => (tagObj = o) });\n    if (!tagObj)\n        tagObj = getTagObject(ctx.doc.schema.tags, node);\n    const props = stringifyProps(node, tagObj, ctx);\n    if (props.length > 0)\n        ctx.indentAtStart = (ctx.indentAtStart || 0) + props.length + 1;\n    const str = typeof tagObj.stringify === 'function'\n        ? tagObj.stringify(node, ctx, onComment, onChompKeep)\n        : Node.isScalar(node)\n            ? stringifyString.stringifyString(node, ctx, onComment, onChompKeep)\n            : node.toString(ctx, onComment, onChompKeep);\n    if (!props)\n        return str;\n    return Node.isScalar(node) || str[0] === '{' || str[0] === '['\n        ? `${props} ${str}`\n        : `${props}\\n${ctx.indent}${str}`;\n}\n\nexports.createStringifyContext = createStringifyContext;\nexports.stringify = stringify;\n","'use strict';\n\nvar Collection = require('../nodes/Collection.js');\nvar Node = require('../nodes/Node.js');\nvar stringify = require('./stringify.js');\nvar stringifyComment = require('./stringifyComment.js');\n\nfunction stringifyCollection({ comment, flow, items }, ctx, { blockItem, flowChars, itemIndent, onChompKeep, onComment }) {\n    const { indent, indentStep } = ctx;\n    const inFlow = flow || ctx.inFlow;\n    if (inFlow)\n        itemIndent += indentStep;\n    ctx = Object.assign({}, ctx, { indent: itemIndent, inFlow, type: null });\n    let singleLineOutput = true;\n    let chompKeep = false; // flag for the preceding node's status\n    const nodes = items.reduce((nodes, item, i) => {\n        let comment = null;\n        if (Node.isNode(item)) {\n            if (!chompKeep && item.spaceBefore)\n                nodes.push({ comment: true, str: '' });\n            let cb = item.commentBefore;\n            if (cb && chompKeep)\n                cb = cb.replace(/^\\n+/, '');\n            if (cb) {\n                if (/^\\n+$/.test(cb))\n                    cb = cb.substring(1);\n                // This match will always succeed on a non-empty string\n                for (const line of cb.match(/^.*$/gm)) {\n                    const str = line === ' ' ? '#' : line ? `#${line}` : '';\n                    nodes.push({ comment: true, str });\n                }\n            }\n            if (item.comment) {\n                comment = item.comment;\n                singleLineOutput = false;\n            }\n        }\n        else if (Node.isPair(item)) {\n            const ik = Node.isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (!chompKeep && ik.spaceBefore)\n                    nodes.push({ comment: true, str: '' });\n                let cb = ik.commentBefore;\n                if (cb && chompKeep)\n                    cb = cb.replace(/^\\n+/, '');\n                if (cb) {\n                    if (/^\\n+$/.test(cb))\n                        cb = cb.substring(1);\n                    // This match will always succeed on a non-empty string\n                    for (const line of cb.match(/^.*$/gm)) {\n                        const str = line === ' ' ? '#' : line ? `#${line}` : '';\n                        nodes.push({ comment: true, str });\n                    }\n                }\n                if (ik.comment)\n                    singleLineOutput = false;\n            }\n            if (inFlow) {\n                const iv = Node.isNode(item.value) ? item.value : null;\n                if (iv) {\n                    if (iv.comment)\n                        comment = iv.comment;\n                    if (iv.comment || iv.commentBefore)\n                        singleLineOutput = false;\n                }\n                else if (item.value == null && ik && ik.comment) {\n                    comment = ik.comment;\n                }\n            }\n        }\n        chompKeep = false;\n        let str = stringify.stringify(item, ctx, () => (comment = null), () => (chompKeep = true));\n        if (inFlow && i < items.length - 1)\n            str += ',';\n        str = stringifyComment.addComment(str, itemIndent, comment);\n        if (chompKeep && (comment || inFlow))\n            chompKeep = false;\n        nodes.push({ comment: false, str });\n        return nodes;\n    }, []);\n    let str;\n    if (nodes.length === 0) {\n        str = flowChars.start + flowChars.end;\n    }\n    else if (inFlow) {\n        const { start, end } = flowChars;\n        const strings = nodes.map(n => n.str);\n        let singleLineLength = 2;\n        for (const node of nodes) {\n            if (node.comment || node.str.includes('\\n')) {\n                singleLineOutput = false;\n                break;\n            }\n            singleLineLength += node.str.length + 2;\n        }\n        if (!singleLineOutput ||\n            singleLineLength > Collection.Collection.maxFlowStringSingleLineLength) {\n            str = start;\n            for (const s of strings) {\n                str += s ? `\\n${indentStep}${indent}${s}` : '\\n';\n            }\n            str += `\\n${indent}${end}`;\n        }\n        else {\n            str = `${start} ${strings.join(' ')} ${end}`;\n        }\n    }\n    else {\n        const strings = nodes.map(blockItem);\n        str = strings.shift() || '';\n        for (const s of strings)\n            str += s ? `\\n${indent}${s}` : '\\n';\n    }\n    if (comment) {\n        str += '\\n' + stringifyComment.stringifyComment(comment, indent);\n        if (onComment)\n            onComment();\n    }\n    else if (chompKeep && onChompKeep)\n        onChompKeep();\n    return str;\n}\n\nexports.stringifyCollection = stringifyCollection;\n","'use strict';\n\nconst stringifyComment = (comment, indent) => /^\\n+$/.test(comment)\n    ? comment.substring(1)\n    : comment.replace(/^(?!$)(?: $)?/gm, `${indent}#`);\nfunction addComment(str, indent, comment) {\n    return !comment\n        ? str\n        : comment.includes('\\n')\n            ? `${str}\\n` + stringifyComment(comment, indent)\n            : str.endsWith(' ')\n                ? `${str}#${comment}`\n                : `${str} #${comment}`;\n}\n\nexports.addComment = addComment;\nexports.stringifyComment = stringifyComment;\n","'use strict';\n\nvar Node = require('../nodes/Node.js');\nvar stringify = require('./stringify.js');\nvar stringifyComment = require('./stringifyComment.js');\n\nfunction stringifyDocument(doc, options) {\n    const lines = [];\n    let hasDirectives = options.directives === true;\n    if (options.directives !== false) {\n        const dir = doc.directives.toString(doc);\n        if (dir) {\n            lines.push(dir);\n            hasDirectives = true;\n        }\n        else if (doc.directives.marker)\n            hasDirectives = true;\n    }\n    if (hasDirectives)\n        lines.push('---');\n    if (doc.commentBefore) {\n        if (lines.length !== 1)\n            lines.unshift('');\n        lines.unshift(stringifyComment.stringifyComment(doc.commentBefore, ''));\n    }\n    const ctx = stringify.createStringifyContext(doc, options);\n    let chompKeep = false;\n    let contentComment = null;\n    if (doc.contents) {\n        if (Node.isNode(doc.contents)) {\n            if (doc.contents.spaceBefore && hasDirectives)\n                lines.push('');\n            if (doc.contents.commentBefore)\n                lines.push(stringifyComment.stringifyComment(doc.contents.commentBefore, ''));\n            // top-level block scalars need to be indented if followed by a comment\n            ctx.forceBlockIndent = !!doc.comment;\n            contentComment = doc.contents.comment;\n        }\n        const onChompKeep = contentComment ? undefined : () => (chompKeep = true);\n        let body = stringify.stringify(doc.contents, ctx, () => (contentComment = null), onChompKeep);\n        if (contentComment)\n            body = stringifyComment.addComment(body, '', contentComment);\n        if ((body[0] === '|' || body[0] === '>') &&\n            lines[lines.length - 1] === '---') {\n            // Top-level block scalars with a preceding doc marker ought to use the\n            // same line for their header.\n            lines[lines.length - 1] = `--- ${body}`;\n        }\n        else\n            lines.push(body);\n    }\n    else {\n        lines.push(stringify.stringify(doc.contents, ctx));\n    }\n    let dc = doc.comment;\n    if (dc && chompKeep)\n        dc = dc.replace(/^\\n+/, '');\n    if (dc) {\n        if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '')\n            lines.push('');\n        lines.push(stringifyComment.stringifyComment(dc, ''));\n    }\n    return lines.join('\\n') + '\\n';\n}\n\nexports.stringifyDocument = stringifyDocument;\n","'use strict';\n\nfunction stringifyNumber({ format, minFractionDigits, tag, value }) {\n    if (typeof value === 'bigint')\n        return String(value);\n    const num = typeof value === 'number' ? value : Number(value);\n    if (!isFinite(num))\n        return isNaN(num) ? '.nan' : num < 0 ? '-.inf' : '.inf';\n    let n = JSON.stringify(value);\n    if (!format &&\n        minFractionDigits &&\n        (!tag || tag === 'tag:yaml.org,2002:float') &&\n        /^\\d/.test(n)) {\n        let i = n.indexOf('.');\n        if (i < 0) {\n            i = n.length;\n            n += '.';\n        }\n        let d = minFractionDigits - (n.length - i - 1);\n        while (d-- > 0)\n            n += '0';\n    }\n    return n;\n}\n\nexports.stringifyNumber = stringifyNumber;\n","'use strict';\n\nvar Node = require('../nodes/Node.js');\nvar Scalar = require('../nodes/Scalar.js');\nvar stringify = require('./stringify.js');\nvar stringifyComment = require('./stringifyComment.js');\n\nfunction stringifyPair({ key, value }, ctx, onComment, onChompKeep) {\n    const { allNullValues, doc, indent, indentStep, options: { indentSeq, simpleKeys } } = ctx;\n    let keyComment = (Node.isNode(key) && key.comment) || null;\n    if (simpleKeys) {\n        if (keyComment) {\n            throw new Error('With simple keys, key nodes cannot have comments');\n        }\n        if (Node.isCollection(key)) {\n            const msg = 'With simple keys, collection cannot be used as a key value';\n            throw new Error(msg);\n        }\n    }\n    let explicitKey = !simpleKeys &&\n        (!key ||\n            (keyComment && value == null && !ctx.inFlow) ||\n            Node.isCollection(key) ||\n            (Node.isScalar(key)\n                ? key.type === Scalar.Scalar.BLOCK_FOLDED || key.type === Scalar.Scalar.BLOCK_LITERAL\n                : typeof key === 'object'));\n    ctx = Object.assign({}, ctx, {\n        allNullValues: false,\n        implicitKey: !explicitKey && (simpleKeys || !allNullValues),\n        indent: indent + indentStep\n    });\n    let keyCommentDone = false;\n    let chompKeep = false;\n    let str = stringify.stringify(key, ctx, () => (keyCommentDone = true), () => (chompKeep = true));\n    if (!explicitKey && !ctx.inFlow && str.length > 1024) {\n        if (simpleKeys)\n            throw new Error('With simple keys, single line scalar must not span more than 1024 characters');\n        explicitKey = true;\n    }\n    if (ctx.inFlow) {\n        if (allNullValues || value == null) {\n            if (keyCommentDone && onComment)\n                onComment();\n            return explicitKey ? `? ${str}` : str;\n        }\n    }\n    else if ((allNullValues && !simpleKeys) || (value == null && explicitKey)) {\n        if (keyCommentDone)\n            keyComment = null;\n        if (chompKeep && !keyComment && onChompKeep)\n            onChompKeep();\n        return stringifyComment.addComment(`? ${str}`, ctx.indent, keyComment);\n    }\n    if (keyCommentDone)\n        keyComment = null;\n    str = explicitKey\n        ? `? ${stringifyComment.addComment(str, ctx.indent, keyComment)}\\n${indent}:`\n        : stringifyComment.addComment(`${str}:`, ctx.indent, keyComment);\n    let vcb = '';\n    let valueComment = null;\n    if (Node.isNode(value)) {\n        if (value.spaceBefore)\n            vcb = '\\n';\n        if (value.commentBefore)\n            vcb += `\\n${stringifyComment.stringifyComment(value.commentBefore, ctx.indent)}`;\n        valueComment = value.comment;\n    }\n    else if (value && typeof value === 'object') {\n        value = doc.createNode(value);\n    }\n    ctx.implicitKey = false;\n    if (!explicitKey && !keyComment && Node.isScalar(value))\n        ctx.indentAtStart = str.length + 1;\n    chompKeep = false;\n    if (!indentSeq &&\n        indentStep.length >= 2 &&\n        !ctx.inFlow &&\n        !explicitKey &&\n        Node.isSeq(value) &&\n        !value.flow &&\n        !value.tag &&\n        !value.anchor) {\n        // If indentSeq === false, consider '- ' as part of indentation where possible\n        ctx.indent = ctx.indent.substr(2);\n    }\n    let valueCommentDone = false;\n    const valueStr = stringify.stringify(value, ctx, () => (valueCommentDone = true), () => (chompKeep = true));\n    let ws = ' ';\n    if (vcb || keyComment) {\n        ws = `${vcb}\\n${ctx.indent}`;\n    }\n    else if (!explicitKey && Node.isCollection(value)) {\n        const flow = valueStr[0] === '[' || valueStr[0] === '{';\n        if (!flow || valueStr.includes('\\n'))\n            ws = `\\n${ctx.indent}`;\n    }\n    else if (valueStr[0] === '\\n')\n        ws = '';\n    if (ctx.inFlow) {\n        if (valueCommentDone && onComment)\n            onComment();\n        return str + ws + valueStr;\n    }\n    else {\n        if (valueCommentDone)\n            valueComment = null;\n        if (chompKeep && !valueComment && onChompKeep)\n            onChompKeep();\n        return stringifyComment.addComment(str + ws + valueStr, ctx.indent, valueComment);\n    }\n}\n\nexports.stringifyPair = stringifyPair;\n","'use strict';\n\nvar Scalar = require('../nodes/Scalar.js');\nvar foldFlowLines = require('./foldFlowLines.js');\n\nconst getFoldOptions = (ctx) => ({\n    indentAtStart: ctx.indentAtStart,\n    lineWidth: ctx.options.lineWidth,\n    minContentWidth: ctx.options.minContentWidth\n});\n// Also checks for lines starting with %, as parsing the output as YAML 1.1 will\n// presume that's starting a new document.\nconst containsDocumentMarker = (str) => /^(%|---|\\.\\.\\.)/m.test(str);\nfunction lineLengthOverLimit(str, lineWidth, indentLength) {\n    if (!lineWidth || lineWidth < 0)\n        return false;\n    const limit = lineWidth - indentLength;\n    const strLen = str.length;\n    if (strLen <= limit)\n        return false;\n    for (let i = 0, start = 0; i < strLen; ++i) {\n        if (str[i] === '\\n') {\n            if (i - start > limit)\n                return true;\n            start = i + 1;\n            if (strLen - start <= limit)\n                return false;\n        }\n    }\n    return true;\n}\nfunction doubleQuotedString(value, ctx) {\n    const json = JSON.stringify(value);\n    if (ctx.options.doubleQuotedAsJSON)\n        return json;\n    const { implicitKey } = ctx;\n    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    let str = '';\n    let start = 0;\n    for (let i = 0, ch = json[i]; ch; ch = json[++i]) {\n        if (ch === ' ' && json[i + 1] === '\\\\' && json[i + 2] === 'n') {\n            // space before newline needs to be escaped to not be folded\n            str += json.slice(start, i) + '\\\\ ';\n            i += 1;\n            start = i;\n            ch = '\\\\';\n        }\n        if (ch === '\\\\')\n            switch (json[i + 1]) {\n                case 'u':\n                    {\n                        str += json.slice(start, i);\n                        const code = json.substr(i + 2, 4);\n                        switch (code) {\n                            case '0000':\n                                str += '\\\\0';\n                                break;\n                            case '0007':\n                                str += '\\\\a';\n                                break;\n                            case '000b':\n                                str += '\\\\v';\n                                break;\n                            case '001b':\n                                str += '\\\\e';\n                                break;\n                            case '0085':\n                                str += '\\\\N';\n                                break;\n                            case '00a0':\n                                str += '\\\\_';\n                                break;\n                            case '2028':\n                                str += '\\\\L';\n                                break;\n                            case '2029':\n                                str += '\\\\P';\n                                break;\n                            default:\n                                if (code.substr(0, 2) === '00')\n                                    str += '\\\\x' + code.substr(2);\n                                else\n                                    str += json.substr(i, 6);\n                        }\n                        i += 5;\n                        start = i + 1;\n                    }\n                    break;\n                case 'n':\n                    if (implicitKey ||\n                        json[i + 2] === '\"' ||\n                        json.length < minMultiLineLength) {\n                        i += 1;\n                    }\n                    else {\n                        // folding will eat first newline\n                        str += json.slice(start, i) + '\\n\\n';\n                        while (json[i + 2] === '\\\\' &&\n                            json[i + 3] === 'n' &&\n                            json[i + 4] !== '\"') {\n                            str += '\\n';\n                            i += 2;\n                        }\n                        str += indent;\n                        // space after newline needs to be escaped to not be folded\n                        if (json[i + 2] === ' ')\n                            str += '\\\\';\n                        i += 1;\n                        start = i + 1;\n                    }\n                    break;\n                default:\n                    i += 1;\n            }\n    }\n    str = start ? str + json.slice(start) : json;\n    return implicitKey\n        ? str\n        : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_QUOTED, getFoldOptions(ctx));\n}\nfunction singleQuotedString(value, ctx) {\n    if (ctx.implicitKey) {\n        if (/\\n/.test(value))\n            return doubleQuotedString(value, ctx);\n    }\n    else {\n        // single quoted string can't have leading or trailing whitespace around newline\n        if (/[ \\t]\\n|\\n[ \\t]/.test(value))\n            return doubleQuotedString(value, ctx);\n    }\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    const res = \"'\" + value.replace(/'/g, \"''\").replace(/\\n+/g, `$&\\n${indent}`) + \"'\";\n    return ctx.implicitKey\n        ? res\n        : foldFlowLines.foldFlowLines(res, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx));\n}\nfunction blockString({ comment, type, value }, ctx, onComment, onChompKeep) {\n    // 1. Block can't end in whitespace unless the last line is non-empty.\n    // 2. Strings consisting of only whitespace are best rendered explicitly.\n    if (/\\n[\\t ]+$/.test(value) || /^\\s*$/.test(value)) {\n        return doubleQuotedString(value, ctx);\n    }\n    const indent = ctx.indent ||\n        (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');\n    const literal = type === Scalar.Scalar.BLOCK_FOLDED\n        ? false\n        : type === Scalar.Scalar.BLOCK_LITERAL\n            ? true\n            : !lineLengthOverLimit(value, ctx.options.lineWidth, indent.length);\n    if (!value)\n        return literal ? '|\\n' : '>\\n';\n    // determine chomping from whitespace at value end\n    let chomp;\n    let endStart;\n    for (endStart = value.length; endStart > 0; --endStart) {\n        const ch = value[endStart - 1];\n        if (ch !== '\\n' && ch !== '\\t' && ch !== ' ')\n            break;\n    }\n    let end = value.substring(endStart);\n    const endNlPos = end.indexOf('\\n');\n    if (endNlPos === -1) {\n        chomp = '-'; // strip\n    }\n    else if (value === end || endNlPos !== end.length - 1) {\n        chomp = '+'; // keep\n        if (onChompKeep)\n            onChompKeep();\n    }\n    else {\n        chomp = ''; // clip\n    }\n    if (end) {\n        value = value.slice(0, -end.length);\n        if (end[end.length - 1] === '\\n')\n            end = end.slice(0, -1);\n        end = end.replace(/\\n+(?!\\n|$)/g, `$&${indent}`);\n    }\n    // determine indent indicator from whitespace at value start\n    let startWithSpace = false;\n    let startEnd;\n    let startNlPos = -1;\n    for (startEnd = 0; startEnd < value.length; ++startEnd) {\n        const ch = value[startEnd];\n        if (ch === ' ')\n            startWithSpace = true;\n        else if (ch === '\\n')\n            startNlPos = startEnd;\n        else\n            break;\n    }\n    let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);\n    if (start) {\n        value = value.substring(start.length);\n        start = start.replace(/\\n+/g, `$&${indent}`);\n    }\n    const indentSize = indent ? '2' : '1'; // root is at -1\n    let header = (literal ? '|' : '>') + (startWithSpace ? indentSize : '') + chomp;\n    if (comment) {\n        header += ' #' + comment.replace(/ ?[\\r\\n]+/g, ' ');\n        if (onComment)\n            onComment();\n    }\n    if (literal) {\n        value = value.replace(/\\n+/g, `$&${indent}`);\n        return `${header}\\n${indent}${start}${value}${end}`;\n    }\n    value = value\n        .replace(/\\n+/g, '\\n$&')\n        .replace(/(?:^|\\n)([\\t ].*)(?:([\\n\\t ]*)\\n(?![\\n\\t ]))?/g, '$1$2') // more-indented lines aren't folded\n        //                ^ more-ind. ^ empty     ^ capture next empty lines only at end of indent\n        .replace(/\\n+/g, `$&${indent}`);\n    const body = foldFlowLines.foldFlowLines(`${start}${value}${end}`, indent, foldFlowLines.FOLD_BLOCK, getFoldOptions(ctx));\n    return `${header}\\n${indent}${body}`;\n}\nfunction plainString(item, ctx, onComment, onChompKeep) {\n    var _a;\n    const { type, value } = item;\n    const { actualString, implicitKey, indent, inFlow } = ctx;\n    if ((implicitKey && /[\\n[\\]{},]/.test(value)) ||\n        (inFlow && /[[\\]{},]/.test(value))) {\n        return doubleQuotedString(value, ctx);\n    }\n    if (!value ||\n        /^[\\n\\t ,[\\]{}#&*!|>'\"%@`]|^[?-]$|^[?-][ \\t]|[\\n:][ \\t]|[ \\t]\\n|[\\n\\t ]#|[\\n\\t :]$/.test(value)) {\n        const hasDouble = value.indexOf('\"') !== -1;\n        const hasSingle = value.indexOf(\"'\") !== -1;\n        let quotedString;\n        if (hasDouble && !hasSingle) {\n            quotedString = singleQuotedString;\n        }\n        else if (hasSingle && !hasDouble) {\n            quotedString = doubleQuotedString;\n        }\n        else if (ctx.options.singleQuote) {\n            quotedString = singleQuotedString;\n        }\n        else {\n            quotedString = doubleQuotedString;\n        }\n        // not allowed:\n        // - empty string, '-' or '?'\n        // - start with an indicator character (except [?:-]) or /[?-] /\n        // - '\\n ', ': ' or ' \\n' anywhere\n        // - '#' not preceded by a non-space char\n        // - end with ' ' or ':'\n        return implicitKey || inFlow || value.indexOf('\\n') === -1\n            ? quotedString(value, ctx)\n            : blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (!implicitKey &&\n        !inFlow &&\n        type !== Scalar.Scalar.PLAIN &&\n        value.indexOf('\\n') !== -1) {\n        // Where allowed & type not set explicitly, prefer block style for multiline strings\n        return blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (indent === '' && containsDocumentMarker(value)) {\n        ctx.forceBlockIndent = true;\n        return blockString(item, ctx, onComment, onChompKeep);\n    }\n    const str = value.replace(/\\n+/g, `$&\\n${indent}`);\n    // Verify that output will be parsed as a string, as e.g. plain numbers and\n    // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),\n    // and others in v1.1.\n    if (actualString) {\n        for (const tag of ctx.doc.schema.tags) {\n            if (tag.default &&\n                tag.tag !== 'tag:yaml.org,2002:str' &&\n                ((_a = tag.test) === null || _a === void 0 ? void 0 : _a.test(str)))\n                return doubleQuotedString(value, ctx);\n        }\n    }\n    return implicitKey\n        ? str\n        : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx));\n}\nfunction stringifyString(item, ctx, onComment, onChompKeep) {\n    const { implicitKey, inFlow } = ctx;\n    const ss = typeof item.value === 'string'\n        ? item\n        : Object.assign({}, item, { value: String(item.value) });\n    let { type } = item;\n    if (type !== Scalar.Scalar.QUOTE_DOUBLE) {\n        // force double quotes on control characters & unpaired surrogates\n        if (/[\\x00-\\x08\\x0b-\\x1f\\x7f-\\x9f\\u{D800}-\\u{DFFF}]/u.test(ss.value))\n            type = Scalar.Scalar.QUOTE_DOUBLE;\n    }\n    const _stringify = (_type) => {\n        switch (_type) {\n            case Scalar.Scalar.BLOCK_FOLDED:\n            case Scalar.Scalar.BLOCK_LITERAL:\n                return implicitKey || inFlow\n                    ? doubleQuotedString(ss.value, ctx) // blocks are not valid inside flow containers\n                    : blockString(ss, ctx, onComment, onChompKeep);\n            case Scalar.Scalar.QUOTE_DOUBLE:\n                return doubleQuotedString(ss.value, ctx);\n            case Scalar.Scalar.QUOTE_SINGLE:\n                return singleQuotedString(ss.value, ctx);\n            case Scalar.Scalar.PLAIN:\n                return plainString(ss, ctx, onComment, onChompKeep);\n            default:\n                return null;\n        }\n    };\n    let res = _stringify(type);\n    if (res === null) {\n        const { defaultKeyType, defaultStringType } = ctx.options;\n        const t = (implicitKey && defaultKeyType) || defaultStringType;\n        res = _stringify(t);\n        if (res === null)\n            throw new Error(`Unsupported default string type ${t}`);\n    }\n    return res;\n}\n\nexports.stringifyString = stringifyString;\n","'use strict';\n\nvar Node = require('./nodes/Node.js');\n\nconst BREAK = Symbol('break visit');\nconst SKIP = Symbol('skip children');\nconst REMOVE = Symbol('remove node');\n/**\n * Apply a visitor to an AST node or document.\n *\n * Walks through the tree (depth-first) starting from `node`, calling a\n * `visitor` function with three arguments:\n *   - `key`: For sequence values and map `Pair`, the node's index in the\n *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.\n *     `null` for the root node.\n *   - `node`: The current node.\n *   - `path`: The ancestry of the current node.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this node, continue with next\n *     sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current node, then continue with the next one\n *   - `Node`: Replace the current node, then continue by visiting it\n *   - `number`: While iterating the items of a sequence or map, set the index\n *     of the next step. This is useful especially if the index of the current\n *     node has changed.\n *\n * If `visitor` is a single function, it will be called with all values\n * encountered in the tree, including e.g. `null` values. Alternatively,\n * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,\n * `Alias` and `Scalar` node. To define the same visitor function for more than\n * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)\n * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most\n * specific defined one will be used for each node.\n */\nfunction visit(node, visitor) {\n    if (typeof visitor === 'object' &&\n        (visitor.Collection || visitor.Node || visitor.Value)) {\n        visitor = Object.assign({\n            Alias: visitor.Node,\n            Map: visitor.Node,\n            Scalar: visitor.Node,\n            Seq: visitor.Node\n        }, visitor.Value && {\n            Map: visitor.Value,\n            Scalar: visitor.Value,\n            Seq: visitor.Value\n        }, visitor.Collection && {\n            Map: visitor.Collection,\n            Seq: visitor.Collection\n        }, visitor);\n    }\n    if (Node.isDocument(node)) {\n        const cd = _visit(null, node.contents, visitor, Object.freeze([node]));\n        if (cd === REMOVE)\n            node.contents = null;\n    }\n    else\n        _visit(null, node, visitor, Object.freeze([]));\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisit.BREAK = BREAK;\n/** Do not visit the children of the current node */\nvisit.SKIP = SKIP;\n/** Remove the current node */\nvisit.REMOVE = REMOVE;\nfunction _visit(key, node, visitor, path) {\n    let ctrl = undefined;\n    if (typeof visitor === 'function')\n        ctrl = visitor(key, node, path);\n    else if (Node.isMap(node)) {\n        if (visitor.Map)\n            ctrl = visitor.Map(key, node, path);\n    }\n    else if (Node.isSeq(node)) {\n        if (visitor.Seq)\n            ctrl = visitor.Seq(key, node, path);\n    }\n    else if (Node.isPair(node)) {\n        if (visitor.Pair)\n            ctrl = visitor.Pair(key, node, path);\n    }\n    else if (Node.isScalar(node)) {\n        if (visitor.Scalar)\n            ctrl = visitor.Scalar(key, node, path);\n    }\n    else if (Node.isAlias(node)) {\n        if (visitor.Alias)\n            ctrl = visitor.Alias(key, node, path);\n    }\n    if (Node.isNode(ctrl) || Node.isPair(ctrl)) {\n        const parent = path[path.length - 1];\n        if (Node.isCollection(parent)) {\n            parent.items[key] = ctrl;\n        }\n        else if (Node.isPair(parent)) {\n            if (key === 'key')\n                parent.key = ctrl;\n            else\n                parent.value = ctrl;\n        }\n        else if (Node.isDocument(parent)) {\n            parent.contents = ctrl;\n        }\n        else {\n            const pt = Node.isAlias(parent) ? 'alias' : 'scalar';\n            throw new Error(`Cannot replace node with ${pt} parent`);\n        }\n        return _visit(key, ctrl, visitor, path);\n    }\n    if (typeof ctrl !== 'symbol') {\n        if (Node.isCollection(node)) {\n            path = Object.freeze(path.concat(node));\n            for (let i = 0; i < node.items.length; ++i) {\n                const ci = _visit(i, node.items[i], visitor, path);\n                if (typeof ci === 'number')\n                    i = ci - 1;\n                else if (ci === BREAK)\n                    return BREAK;\n                else if (ci === REMOVE) {\n                    node.items.splice(i, 1);\n                    i -= 1;\n                }\n            }\n        }\n        else if (Node.isPair(node)) {\n            path = Object.freeze(path.concat(node));\n            const ck = _visit('key', node.key, visitor, path);\n            if (ck === BREAK)\n                return BREAK;\n            else if (ck === REMOVE)\n                node.key = null;\n            const cv = _visit('value', node.value, visitor, path);\n            if (cv === BREAK)\n                return BREAK;\n            else if (cv === REMOVE)\n                node.value = null;\n        }\n    }\n    return ctrl;\n}\n\nexports.visit = visit;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","// generated by cdk8s\nimport { ApiObject } from 'cdk8s';\n/**\n *\n *\n * @schema ExternalSecret\n */\nexport class ExternalSecret extends ApiObject {\n    /**\n     * Returns the apiVersion and kind for \"ExternalSecret\"\n     */\n    static GVK = {\n        apiVersion: 'kubernetes-client.io/v1',\n        kind: 'ExternalSecret',\n    };\n    /**\n     * Renders a Kubernetes manifest for \"ExternalSecret\".\n     *\n     * This can be used to inline resource manifests inside other objects (e.g. as templates).\n     *\n     * @param props initialization props\n     */\n    static manifest(props) {\n        return {\n            ...ExternalSecret.GVK,\n            ...toJson_ExternalSecretProps(props),\n        };\n    }\n    /**\n     * Defines a \"ExternalSecret\" API object\n     * @param scope the scope in which to define this object\n     * @param id a scope-local name for the object\n     * @param props initialization props\n     */\n    constructor(scope, id, props) {\n        super(scope, id, {\n            ...ExternalSecret.GVK,\n            ...props,\n        });\n    }\n    /**\n     * Renders the object to Kubernetes JSON.\n     */\n    toJson() {\n        const resolved = super.toJson();\n        return {\n            ...ExternalSecret.GVK,\n            ...toJson_ExternalSecretProps(resolved),\n        };\n    }\n}\n/**\n * Converts an object of type 'ExternalSecretProps' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nexport function toJson_ExternalSecretProps(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        spec: toJson_ExternalSecretSpec(obj.spec),\n        metadata: obj.metadata,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce(\n        (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),\n        {}\n    );\n}\n/**\n * Converts an object of type 'ExternalSecretSpec' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nexport function toJson_ExternalSecretSpec(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        controllerId: obj.controllerId,\n        type: obj.type,\n        template: obj.template,\n        backendType: obj.backendType,\n        vaultRole: obj.vaultRole,\n        vaultMountPoint: obj.vaultMountPoint,\n        kvVersion: obj.kvVersion,\n        keyVaultName: obj.keyVaultName,\n        dataFrom: obj.dataFrom?.map((y) => y),\n        data: obj.data?.map((y) => toJson_ExternalSecretSpecData(y)),\n        roleArn: obj.roleArn,\n        region: obj.region,\n        projectId: obj.projectId,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce(\n        (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),\n        {}\n    );\n}\n/* eslint-enable max-len, quote-props */\n/**\n * Determines which backend to use for fetching secrets\n *\n * @schema ExternalSecretSpecBackendType\n */\nexport var ExternalSecretSpecBackendType;\n(function (ExternalSecretSpecBackendType) {\n    /** secretsManager */\n    ExternalSecretSpecBackendType['SECRETS_MANAGER'] = 'secretsManager';\n    /** systemManager */\n    ExternalSecretSpecBackendType['SYSTEM_MANAGER'] = 'systemManager';\n    /** vault */\n    ExternalSecretSpecBackendType['VAULT'] = 'vault';\n    /** azureKeyVault */\n    ExternalSecretSpecBackendType['AZURE_KEY_VAULT'] = 'azureKeyVault';\n    /** gcpSecretsManager */\n    ExternalSecretSpecBackendType['GCP_SECRETS_MANAGER'] = 'gcpSecretsManager';\n    /** alicloudSecretsManager */\n    ExternalSecretSpecBackendType['ALICLOUD_SECRETS_MANAGER'] = 'alicloudSecretsManager';\n    /** ibmcloudSecretsManager */\n    ExternalSecretSpecBackendType['IBMCLOUD_SECRETS_MANAGER'] = 'ibmcloudSecretsManager';\n})(ExternalSecretSpecBackendType || (ExternalSecretSpecBackendType = {}));\n/**\n * Converts an object of type 'ExternalSecretSpecData' to JSON representation.\n */\n/* eslint-disable max-len, quote-props */\nexport function toJson_ExternalSecretSpecData(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    const result = {\n        key: obj.key,\n        name: obj.name,\n        property: obj.property,\n        isBinary: obj.isBinary,\n        path: obj.path,\n        recursive: obj.recursive,\n        secretType: obj.secretType,\n        version: obj.version,\n        versionStage: obj.versionStage,\n        versionId: obj.versionId,\n    };\n    // filter undefined values\n    return Object.entries(result).reduce(\n        (r, i) => (i[1] === undefined ? r : { ...r, [i[0]]: i[1] }),\n        {}\n    );\n}\n/* eslint-enable max-len, quote-props */\n","/**\n * Get the pod resources based on a size string to simplify this for the end user.\n * i.e. container_size: \"medium\"\n *\n * @param {string} size the size of the instance\n * @returns\n */\nexport default function getResources(size) {\n    /**\n     * This function will return a tuple with the resources we should\n     * allocate the docker container\n     *\n     * Example from the manifest:\n     * resources:\n     *      requests:\n     *      memory: \"1.5Gi\"\n     *      cpu: \"1000m\"\n     *      limits:\n     *      memory: \"1.5Gi\"\n     *      cpu: \"1000m\"\n     *\n     * This will be CapacityProvisioned=1vCPU 2GB for the Fargate instance.\n     *\n     * Note: Fargate always add 0.5Gi of memory by default, so 1.5Gi would equal 2Gi\n     * TODO: Review these instances and adjust accordingly\n     *\n     */\n\n    // [memory in Gi, CPU in millis]\n    const resources = {\n        small: [0.5, 500],\n        medium: [1.5, 1000],\n        large: [2.5, 1000],\n        xlarge: [3.5, 2000],\n    };\n\n    if (resources[size] === undefined) {\n        // 0.5GB / 0.25vCPU, which is the default instance\n        return [0.5, 250];\n    }\n\n    return resources[size];\n}\n","import * as k from 'cdk8s';\nimport * as kplus from 'cdk8s-plus-22';\nimport * as secrets from '../../imports/external-secrets.js';\nimport getResources from '../resources.js';\n\n/**\n * This function will create a webservice manifest.\n *\n * @param {object} app the app created by the main.js file\n * @param {object} inputs the inputs coming from the github action\n * @returns\n */\nexport default function createWebservice(app, inputs) {\n    const labels = {\n        app: inputs.appName,\n        'app.kubernetes.io/name': inputs.appName,\n    };\n\n    const chart = new k.Chart(app, inputs.appName + '-webservice', {\n        labels,\n        namespace: inputs.namespace,\n    });\n\n    const [memory, cpu] = getResources(inputs.containerSize);\n\n    // The docker container configuration\n    // Information https://kubernetes.io/docs/concepts/containers/\n    const dockerContainer = {\n        name: inputs.appName,\n        image: inputs.dockerImage,\n        port: inputs.containerPort,\n        command: inputs.containerCommand,\n        args: inputs.containerArgs,\n\n        // Information regarding liveness and readiness\n        // https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/\n        liveness: kplus.Probe.fromTcpSocket({\n            failureThreshold: 3,\n            periodSeconds: k.Duration.seconds(15),\n            timeoutSeconds: k.Duration.seconds(60),\n            port: inputs.containerPort,\n        }),\n        readiness: kplus.Probe.fromTcpSocket({\n            failureThreshold: 3,\n            periodSeconds: k.Duration.seconds(15),\n            timeoutSeconds: k.Duration.seconds(60),\n            port: inputs.containerPort,\n        }),\n\n        // Information regarding resources\n        // https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n        resources: {\n            cpu: {\n                limit: kplus.Cpu.millis(cpu),\n                request: kplus.Cpu.millis(cpu),\n            },\n            memory: {\n                limit: k.Size.gibibytes(memory),\n                request: k.Size.gibibytes(memory),\n            },\n        },\n\n        // Information regarding security context\n        // https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n        securityContext: {\n            ensureNonRoot: true,\n            // https://hub.armo.cloud/docs/c-0017\n            // if we set this to true, it is not possible to write to /tmp\n            readOnlyRootFilesystem: false,\n            privileged: false,\n            user: 1000,\n            group: 3000,\n            // https://hub.armo.cloud/docs/c-0016\n            allowPrivilegeEscalation: false,\n        },\n    };\n\n    if (inputs.secretsmanager && inputs.clusterName) {\n        // We are using this service to handle the external secrets coming from\n        // AWS Secrets Manager: https://github.com/external-secrets/external-secrets\n        // it will fetch data from `cluster/cluster_name/app_name`.\n        // This will transform all key values to env vars for the deployment\n        new secrets.ExternalSecret(chart, 'external-secret', {\n            metadata: {\n                name: inputs.appName,\n                namespace: inputs.namespace,\n            },\n            spec: {\n                backendType: secrets.ExternalSecretSpecBackendType.SECRETS_MANAGER,\n                dataFrom: [`cluster/${inputs.clusterName}/${inputs.appName}`],\n            },\n        });\n\n        // Information regarding secrets\n        // https://kubernetes.io/docs/concepts/configuration/secret/\n        const secret = new kplus.Secret(chart, 'secret', {\n            metadata: {\n                name: inputs.appName,\n            },\n        });\n\n        const secretSource = kplus.Env.fromSecret(secret);\n\n        // assign the secrets created in kubernetes by external secret to the container\n        Object.assign(dockerContainer, { envFrom: [secretSource] });\n    }\n\n    // This is the main object for our deployment manifest. Also\n    // known as a workload resource.\n    // https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\n    const deployment = new kplus.Deployment(chart, 'deployment', {\n        select: false,\n        containers: [dockerContainer],\n        restartPolicy: kplus.RestartPolicy.ALWAYS,\n        replicas: inputs.replicas,\n        metadata: {\n            name: inputs.appName,\n            labels: labels,\n            namespace: inputs.namespace,\n        },\n        podMetadata: {\n            name: inputs.appName,\n            labels: labels,\n        },\n        securityContext: {\n            ensureNonRoot: true,\n            // https://hub.armo.cloud/docs/c-0013\n            runAsUser: 1000,\n            runAsGroup: 3000,\n            fsGroup: 2000,\n        },\n    });\n\n    deployment.select(kplus.LabelSelector.of({ labels: { app: inputs.appName } }));\n\n    // The service to expose our pod/application to the Internet\n    // https://kubernetes.io/docs/concepts/services-networking/service/\n    const service = new kplus.Service(chart, 'service', {\n        ports: [{ port: 5000, targetPort: 5000 }],\n        metadata: {\n            name: inputs.appName,\n            labels: labels,\n            namespace: inputs.namespace,\n            // The alb ingress target type is set to IP so the ALB can create\n            // a target group with the service IP to allow traffic to the pod\n            annotations: { 'alb.ingress.kubernetes.io/target-type': 'ip' },\n        },\n        type: kplus.ServiceType.NODE_PORT,\n    });\n\n    service.selectLabel('app', inputs.appName);\n\n    // Return the manifest object\n    return app;\n}\n","import * as core from '@actions/core';\nimport createWebservice from './service/webservice.js';\n\nconst services = {\n    webservice: createWebservice,\n};\n\n/**\n * This function selects the service based on what type\n * we are passing to the function.\n * This could be a generic webservice (currently just supporting this),\n * a cron job, some special service we have to create. Etc.\n *\n * @param {string} serviceType\n * @returns {function} The service chosen by the service type\n */\nexport default function generateManifest(serviceType) {\n    const service = services[serviceType];\n\n    if (service === undefined) {\n        core.setFailed(` [!] No service type with name \"${serviceType}\" found!`);\n\n        // Return a noop function\n        return () => {};\n    }\n\n    // Return the service\n    return service;\n}\n","import * as k from 'cdk8s';\nimport * as core from '@actions/core';\n\nimport generateManifest from './src/strategy.js';\n\nconst DEVELOPMENT = process.env.DEVELOPMENT === 'true';\n\n// All inputs coming from the action\n// Integers and booleans are transformed from strings to int/bool using JSON.parse\nconst inputs = {\n    // Required\n    appName: core.getInput('app_name', { required: true }),\n    namespace: core.getInput('namespace', { required: true }),\n    serviceType: core.getInput('service_type', { required: true }),\n    dockerImage: core.getInput('docker_image', { required: true }),\n    containerPort: JSON.parse(core.getInput('container_port', { required: true })),\n    port: JSON.parse(core.getInput('port', { required: true })),\n\n    // Optional\n    replicas: JSON.parse(core.getInput('replicas') || '1'),\n    clusterName: core.getInput('cluster_name'),\n    containerSize: core.getInput('container_size'),\n    containerCommand: JSON.parse(core.getInput('container_command') || null),\n    containerArgs: JSON.parse(core.getInput('container_args') || null),\n    secretsmanager: JSON.parse(core.getInput('secretsmanager') || 'false'),\n};\n\nconst app = new k.App();\n\ncore.info(` [*] Creating manifest files for ${inputs.appName}`);\n\ntry {\n    // This will populate the app object\n    generateManifest(inputs.serviceType)(app, inputs);\n\n    // Base64 encode the yaml\n    const buff = new Buffer.from(app.synthYaml());\n    const base64data = buff.toString('base64');\n\n    // Create the output manifest yaml\n    core.setOutput('manifest', base64data);\n\n    if (DEVELOPMENT) {\n        console.log(app.synthYaml());\n    }\n} catch (error) {\n    core.setFailed(error.message);\n}\n"],"names":[],"sourceRoot":""}